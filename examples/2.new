Trying to load file: 2.koat

Initial Control flow graph problem:
  Start location: a
      0: a -> b : [], cost: 1
      1: b -> b : A'=free, [ A==B ], cost: 1


Try instantiation
  Start location: a
      0: a -> b : [], cost: 1
      2: b -> b : [ A>=B && A<=B ], cost: INF

Eliminating 1 self-loops for location b
  Removing the self-loops: 2.

Removed all Self-loops using metering functions (where possible):
  Start location: a
      0: a -> b : [], cost: 1
      3: b -> [2] : [ A>=B && A<=B ], cost: INF


Applied simple chaining:
  Start location: a
      0: a -> [2] : [ A>=B && A<=B ], cost: INF


Final control flow graph problem, now checking costs for infinitely many models:
  Start location: a
      0: a -> [2] : [ A>=B && A<=B ], cost: INF


Computing complexity for remaining 1 transitions.

Found new complexity INF, because: INF sat.


The final runtime is determined by this resulting transition:
  Final Guard: A>=B && A<=B
  Final Cost:  INF

Obtained the following complexity w.r.t. the length of the input n:
  Complexity class: INF
  Complexity value: INF

WORST_CASE(INF,?)
