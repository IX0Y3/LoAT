(GOAL COMPLEXITY)
(VAR QL L M N V V1 V2 X X1 X2 x x_0 x_1 x_2 x_3 x_4 x_5 x_6 x_7 x_8 x_9 x_10 x_11 x_12 x_13 x_14 x_15 x_16 x_17 x_18 x_19 x_20 x_21 x_22 x_23 x_24 x_25 x_26 x_27 x_28 x_29 x_30 x_31 x_32 x_33 x_34 x_35 x_36 x_37 x_38 x_39 x_40 x_41 x_42 x_43 x_44 x_45 x_46 x_47 x_48)
(RULES
zeros -> 2
U11((x), (V1)) -> U12(isNatList(activate((V1)))) :|: V1>=0 && x==1
U12((x_0)) -> 1 :|: x_0==1
U21((x_1), (V1)) -> U22(isNat(activate((V1)))) :|: V1>=0 && x_1==1
U22((x_2)) -> 1 :|: x_2==1
U31((x_3), (V)) -> U32(isNatList(activate((V)))) :|: V>=0 && x_3==1
U32((x_4)) -> 1 :|: x_4==1
U41((x_5), (V1), (V2)) -> U42(isNat(activate((V1))), activate((V2))) :|: V2>=0 && V1>=0 && x_5==1
U42((x_6), (V2)) -> U43(isNatIList(activate((V2)))) :|: V2>=0 && x_6==1
U43((x_7)) -> 1 :|: x_7==1
U51((x_8), (V1), (V2)) -> U52(isNat(activate((V1))), activate((V2))) :|: V2>=0 && V1>=0 && x_8==1
U52((x_9), (V2)) -> U53(isNatList(activate((V2)))) :|: V2>=0 && x_9==1
U53((x_10)) -> 1 :|: x_10==1
U61((x_11), (V1), (V2)) -> U62(isNat(activate((V1))), activate((V2))) :|: V2>=0 && V1>=0 && x_11==1
U62((x_12), (V2)) -> U63(isNatIList(activate((V2)))) :|: V2>=0 && x_12==1
U63((x_13)) -> 1 :|: x_13==1
U71((x_14), (L)) -> (1) + length(activate((L))) :|: L>=0 && x_14==1
U81((x_15)) -> 1 :|: x_15==1
U91((x_16), (QL), (M), (N)) -> ((1) + activate((N))) + (((1) + activate((M))) + activate((QL))) :|: N>=0 && QL>=0 && M>=0 && x_16==1
and((x_17), (X)) -> activate((X)) :|: X>=0 && x_17==1
isNat((x_18)) -> 1 :|: x_18==1
isNat((x_19)) -> U11(isNatIListKind(activate((V1))), activate((V1))) :|: V1>=0 && x_19==1+V1 && x_19>0
isNat((x_20)) -> U21(isNatKind(activate((V1))), activate((V1))) :|: V1>=0 && x_20==1+V1 && x_20>0
isNatIList((V)) -> U31(isNatIListKind(activate((V))), activate((V))) :|: V>=0
isNatIList((x_21)) -> 1 :|: x_21==1
isNatIList((x_22)) -> U41(and(isNatKind(activate((V1))), ((1) + activate((V2)))), activate((V1)), activate((V2))) :|: V2>=0 && V1>=0 && x_22==1+V2+V1 && x_22>0
isNatIListKind((x_23)) -> 1 :|: x_23==1
isNatIListKind((x_24)) -> 1 :|: x_24==1
isNatIListKind((x_25)) -> and(isNatKind(activate((V1))), ((1) + activate((V2)))) :|: V2>=0 && V1>=0 && x_25==1+V2+V1 && x_25>0
isNatIListKind((x_26)) -> and(isNatKind(activate((V1))), ((1) + activate((V2)))) :|: V2>=0 && V1>=0 && x_26==1+V2+V1 && x_26>0
isNatKind((x_27)) -> 1 :|: x_27==1
isNatKind((x_28)) -> isNatIListKind(activate((V1))) :|: V1>=0 && x_28==1+V1 && x_28>0
isNatKind((x_29)) -> isNatKind(activate((V1))) :|: V1>=0 && x_29==1+V1 && x_29>0
isNatList((x_30)) -> 1 :|: x_30==1
isNatList((x_31)) -> U51(and(isNatKind(activate((V1))), ((1) + activate((V2)))), activate((V1)), activate((V2))) :|: V2>=0 && V1>=0 && x_31==1+V2+V1 && x_31>0
isNatList((x_32)) -> U61(and(isNatKind(activate((V1))), ((1) + activate((V2)))), activate((V1)), activate((V2))) :|: V2>=0 && V1>=0 && x_32==1+V2+V1 && x_32>0
length((x_33)) -> 0 :|: x_33==1
length((x_34)) -> U71(and(and(isNatList(activate((L))), ((1) + activate((L)))), (3+2*N)), activate((L))) :|: N>=0 && L>=0 && x_34==1+N+L && x_34>0
take((x_35), (QL)) -> U81(and(isNatIList((QL)), (1+QL))) :|: QL>=0 && x_35==0
take((x_36), (x_37)) -> U91(and(and(isNatIList(activate((QL))), ((1) + activate((QL)))), (7+2*N+2*M)), activate((QL)), (M), (N)) :|: N>=0 && QL>=0 && M>=0 && x_36==1+M && x_36>0 && x_37==1+N+QL && x_37>0
zeros -> 1
take((X1), (X2)) -> 1+X2+X1 :|: X2>=0 && X1>=0
length((X)) -> 1+X :|: X>=0
isNatIListKind((X)) -> 1+X :|: X>=0
and((X1), (X2)) -> 1+X2+X1 :|: X2>=0 && X1>=0
isNat((X)) -> 1+X :|: X>=0
isNatKind((X)) -> 1+X :|: X>=0
activate((x_38)) -> zeros :|: x_38==1
activate((x_39)) -> take(activate((X1)), activate((X2))) :|: X2>=0 && X1>=0 && x_39==1+X2+X1 && x_39>0
activate((x_40)) -> 0 :|: x_40==1
activate((x_41)) -> length(activate((X))) :|: X>=0 && x_41==1+X && x_41>0
activate((x_42)) -> (1) + activate((X)) :|: X>=0 && x_42==1+X && x_42>0
activate((x_43)) -> ((1) + activate((X1))) + (X2) :|: X2>=0 && X1>=0 && x_43==1+X2+X1 && x_43>0
activate((x_44)) -> isNatIListKind((X)) :|: X>=0 && x_44==1+X && x_44>0
activate((x_45)) -> 1 :|: x_45==1
activate((x_46)) -> and(activate((X1)), (X2)) :|: X2>=0 && X1>=0 && x_46==1+X2+X1 && x_46>0
activate((x_47)) -> isNat((X)) :|: X>=0 && x_47==1+X && x_47>0
activate((x_48)) -> isNatKind((X)) :|: X>=0 && x_48==1+X && x_48>0
activate((X)) -> X :|: X>=0
)
