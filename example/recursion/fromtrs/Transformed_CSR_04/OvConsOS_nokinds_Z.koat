(GOAL COMPLEXITY)
(VAR QL L M N V V1 V2 X X1 X2 x x_0 x_1 x_2 x_3 x_4 x_5 x_6 x_7 x_8 x_9 x_10 x_11 x_12 x_13 x_14 x_15 x_16 x_17 x_18 x_19 x_20 x_21 x_22 x_23 x_24 x_25 x_26)
(RULES
zeros -> 2
U11((x), (L)) -> (1) + length(activate((L))) :|: L>=0 && x==1
U21((x_0)) -> 1 :|: x_0==1
U31((x_1), (QL), (M), (N)) -> ((1) + activate((N))) + (((1) + activate((M))) + activate((QL))) :|: M>=0 && N>=0 && QL>=0 && x_1==1
and((x_2), (X)) -> activate((X)) :|: X>=0 && x_2==1
isNat((x_3)) -> 1 :|: x_3==1
isNat((x_4)) -> isNatList(activate((V1))) :|: V1>=0 && x_4==1+V1 && x_4>0
isNat((x_5)) -> isNat(activate((V1))) :|: V1>=0 && x_5==1+V1 && x_5>0
isNatIList((V)) -> isNatList(activate((V))) :|: V>=0
isNatIList((x_6)) -> 1 :|: x_6==1
isNatIList((x_7)) -> and(isNat(activate((V1))), ((1) + activate((V2)))) :|: V1>=0 && V2>=0 && x_7==1+V1+V2 && x_7>0
isNatList((x_8)) -> 1 :|: x_8==1
isNatList((x_9)) -> and(isNat(activate((V1))), ((1) + activate((V2)))) :|: V1>=0 && V2>=0 && x_9==1+V1+V2 && x_9>0
isNatList((x_10)) -> and(isNat(activate((V1))), ((1) + activate((V2)))) :|: V1>=0 && V2>=0 && x_10==1+V1+V2 && x_10>0
length((x_11)) -> 0 :|: x_11==1
length((x_12)) -> U11(and(isNatList(activate((L))), (1+N)), activate((L))) :|: L>=0 && N>=0 && x_12==1+L+N && x_12>0
take((x_13), (QL)) -> U21(isNatIList((QL))) :|: QL>=0 && x_13==0
take((x_14), (x_15)) -> U31(and(isNatIList(activate((QL))), (((1) + isNat((M))) + (1+N))), activate((QL)), (M), (N)) :|: M>=0 && N>=0 && QL>=0 && x_14==1+M && x_14>0 && x_15==1+N+QL && x_15>0
zeros -> 1
take((X1), (X2)) -> 1+X1+X2 :|: X1>=0 && X2>=0
length((X)) -> 1+X :|: X>=0
isNatIList((X)) -> 1+X :|: X>=0
isNatList((X)) -> 1+X :|: X>=0
isNat((X)) -> 1+X :|: X>=0
and((X1), (X2)) -> 1+X1+X2 :|: X1>=0 && X2>=0
activate((x_16)) -> zeros :|: x_16==1
activate((x_17)) -> take((X1), (X2)) :|: X1>=0 && X2>=0 && x_17==1+X1+X2 && x_17>0
activate((x_18)) -> 0 :|: x_18==1
activate((x_19)) -> length((X)) :|: X>=0 && x_19==1+X && x_19>0
activate((x_20)) -> 1+X :|: X>=0 && x_20==1+X && x_20>0
activate((x_21)) -> 1+X1+X2 :|: X1>=0 && X2>=0 && x_21==1+X1+X2 && x_21>0
activate((x_22)) -> isNatIList((X)) :|: X>=0 && x_22==1+X && x_22>0
activate((x_23)) -> 1 :|: x_23==1
activate((x_24)) -> isNatList((X)) :|: X>=0 && x_24==1+X && x_24>0
activate((x_25)) -> isNat((X)) :|: X>=0 && x_25==1+X && x_25>0
activate((x_26)) -> and((X1), (X2)) :|: X1>=0 && X2>=0 && x_26==1+X1+X2 && x_26>0
activate((X)) -> X :|: X>=0
)
