Trying to load file: randomwalk_withassume.koat

Initial Control flow graph problem:
  Start location: f0
      0: f0 -> f10 : A'=1, B'=1, C'=free, D'=0, E'=2, F'=1, [ free>=0 ], cost: 1
      1: f10 -> f21 : B'=-1+B, G'=0, [ F>=1 && E>=F && B>=1 && 0>=C ], cost: 1
      2: f10 -> f21 : A'=1+A, B'=1+A, C'=free_1, G'=free_2, [ free_2>=0 && 1>=free_2 && free_1>=0 && F>=1 && E>=F && 0>=B && 0>=C ], cost: 1
      3: f10 -> f21 : C'=-1+C, G'=free_3, [ free_3>=0 && 1>=free_3 && F>=1 && C>=1 && E>=F ], cost: 1
      6: f10 -> f32 : [ 0>=F && E>=F ], cost: 1
      7: f10 -> f32 : [ F>=1+E ], cost: 1
      4: f21 -> f10 : F'=-1+F, [ 1+E>=A && 0>=G ], cost: 1
      5: f21 -> f10 : F'=1+F, [ 1+E>=A && G>=1 ], cost: 1


Simplified the transitions:
  Start location: f0
      0: f0 -> f10 : A'=1, B'=1, C'=free, D'=0, E'=2, F'=1, [ free>=0 ], cost: 1
      1: f10 -> f21 : B'=-1+B, G'=0, [ F>=1 && E>=F && B>=1 && 0>=C ], cost: 1
      2: f10 -> f21 : A'=1+A, B'=1+A, C'=free_1, G'=free_2, [ free_2>=0 && 1>=free_2 && free_1>=0 && F>=1 && E>=F && 0>=B && 0>=C ], cost: 1
      3: f10 -> f21 : C'=-1+C, G'=free_3, [ free_3>=0 && 1>=free_3 && F>=1 && C>=1 && E>=F ], cost: 1
      4: f21 -> f10 : F'=-1+F, [ 1+E>=A && 0>=G ], cost: 1
      5: f21 -> f10 : F'=1+F, [ 1+E>=A && G>=1 ], cost: 1


Applied chaining over branches and pruning:
  Start location: f0
      0: f0 -> f10 : A'=1, B'=1, C'=free, D'=0, E'=2, F'=1, [ free>=0 ], cost: 1
      8: f10 -> f10 : B'=-1+B, F'=-1+F, G'=0, [ F>=1 && E>=F && B>=1 && 0>=C && 1+E>=A && 0>=0 ], cost: 2
      9: f10 -> f10 : A'=1+A, B'=1+A, C'=free_1, F'=-1+F, G'=free_2, [ free_2>=0 && 1>=free_2 && free_1>=0 && F>=1 && E>=F && 0>=B && 0>=C && 1+E>=1+A && 0>=free_2 ], cost: 2
     10: f10 -> f10 : A'=1+A, B'=1+A, C'=free_1, F'=1+F, G'=free_2, [ free_2>=0 && 1>=free_2 && free_1>=0 && F>=1 && E>=F && 0>=B && 0>=C && 1+E>=1+A && free_2>=1 ], cost: 2
     11: f10 -> f10 : C'=-1+C, F'=-1+F, G'=free_3, [ free_3>=0 && 1>=free_3 && F>=1 && C>=1 && E>=F && 1+E>=A && 0>=free_3 ], cost: 2
     12: f10 -> f10 : C'=-1+C, F'=1+F, G'=free_3, [ free_3>=0 && 1>=free_3 && F>=1 && C>=1 && E>=F && 1+E>=A && free_3>=1 ], cost: 2


Try instantiation
  Start location: f0
      0: f0 -> f10 : A'=1, B'=1, C'=free, D'=0, E'=2, F'=1, [ free>=0 ], cost: 1
     13: f10 -> f10 : C'=0, F'=C+F, G'=free_3, [ E>=-1+C+F && F>=1 && C>=1 && E>=F && E>=-1+A && C+F>=2 ], cost: 2*C
     14: f10 -> f10 : C'=-1+C+F-E, F'=1+E, G'=free_3, [ C+F-E>=1 && F>=1 && C>=1 && E>=F && E>=-1+A && E>=1 ], cost: 2-2*F+2*E
     15: f10 -> f10 : C'=C-F, F'=0, G'=free_3, [ E>=1 && F>=1 && C>=1 && E>=F && E>=-1+A && C-F>=0 ], cost: 2*F
     16: f10 -> f10 : C'=0, F'=-C+F, G'=free_3, [ E>=1-C+F && F>=1 && C>=1 && E>=F && E>=-1+A && -C+F>=0 ], cost: 2*C
     17: f10 -> f10 : A'=1+A-F+E, B'=1+A-F+E, C'=free_1, F'=1+E, G'=free_2, [ F>=1 && E>=F && 0>=B && 0>=C && E>=A && E>=1 && 0>=A-F+E && 0>=A-F ], cost: 2-2*F+2*E
     18: f10 -> f10 : A'=0, B'=0, C'=free_1, F'=-A+F, G'=free_2, [ F>=1 && E>=F && 0>=B && 0>=C && E>=A && -A+F>=2 && E>=-1-A+F && E>=-1 ], cost: -2*A
     19: f10 -> f10 : A'=A+F, B'=A+F, C'=free_1, F'=0, G'=free_2, [ F>=1 && E>=F && 0>=B && 0>=C && E>=A && E>=1 && 1>=A+F && E>=-1+A+F ], cost: 2*F
     20: f10 -> f10 : A'=0, B'=0, C'=free_1, F'=A+F, G'=free_2, [ F>=1 && E>=F && 0>=B && 0>=C && E>=A && A+F>=0 && E>=1+A+F && E>=-1 ], cost: -2*A
     21: f10 -> f10 : B'=B-F, F'=0, G'=0, [ B-F>=0 && E>=-1+A && F>=1 && E>=F && B>=1 && 0>=C && E>=1 ], cost: 2*F
     22: f10 -> f10 : B'=0, F'=-B+F, G'=0, [ E>=1-B+F && E>=-1+A && F>=1 && E>=F && B>=1 && 0>=C && -B+F>=0 ], cost: 2*B

Eliminating 10 self-loops for location f10
  Removing the self-loops: 13 14 15 16 17 18 19 20 21 22.
Adding an epsilon transition (to model nonexecution of the loops): 33.

Removed all Self-loops using metering functions (where possible):
  Start location: f0
      0: f0 -> f10 : A'=1, B'=1, C'=free, D'=0, E'=2, F'=1, [ free>=0 ], cost: 1
     23: f10 -> [4] : C'=0, F'=C+F, G'=free_3, [ E>=-1+C+F && F>=1 && C>=1 && E>=F && E>=-1+A && C+F>=2 ], cost: 2*C
     24: f10 -> [4] : C'=-1+C+F-E, F'=1+E, G'=free_3, [ C+F-E>=1 && F>=1 && C>=1 && E>=F && E>=-1+A && E>=1 ], cost: 2-2*F+2*E
     25: f10 -> [4] : C'=C-F, F'=0, G'=free_3, [ E>=1 && F>=1 && C>=1 && E>=F && E>=-1+A && C-F>=0 ], cost: 2*F
     26: f10 -> [4] : C'=0, F'=-C+F, G'=free_3, [ E>=1-C+F && F>=1 && C>=1 && E>=F && E>=-1+A && -C+F>=0 ], cost: 2*C
     27: f10 -> [4] : A'=1+A-F+E, B'=1+A-F+E, C'=free_1, F'=1+E, G'=free_2, [ F>=1 && E>=F && 0>=B && 0>=C && E>=A && E>=1 && 0>=A-F+E && 0>=A-F ], cost: 2-2*F+2*E
     28: f10 -> [4] : A'=0, B'=0, C'=free_1, F'=-A+F, G'=free_2, [ F>=1 && E>=F && 0>=B && 0>=C && E>=A && -A+F>=2 && E>=-1-A+F && E>=-1 ], cost: -2*A
     29: f10 -> [4] : A'=A+F, B'=A+F, C'=free_1, F'=0, G'=free_2, [ F>=1 && E>=F && 0>=B && 0>=C && E>=A && E>=1 && 1>=A+F && E>=-1+A+F ], cost: 2*F
     30: f10 -> [4] : A'=0, B'=0, C'=free_1, F'=A+F, G'=free_2, [ F>=1 && E>=F && 0>=B && 0>=C && E>=A && A+F>=0 && E>=1+A+F && E>=-1 ], cost: -2*A
     31: f10 -> [4] : B'=B-F, F'=0, G'=0, [ B-F>=0 && E>=-1+A && F>=1 && E>=F && B>=1 && 0>=C && E>=1 ], cost: 2*F
     32: f10 -> [4] : B'=0, F'=-B+F, G'=0, [ E>=1-B+F && E>=-1+A && F>=1 && E>=F && B>=1 && 0>=C && -B+F>=0 ], cost: 2*B
     33: f10 -> [4] : [], cost: 0


Applied chaining over branches and pruning:
  Start location: f0
     34: f0 -> [4] : A'=1, B'=1, C'=0, D'=0, E'=2, F'=1+free, G'=free_3, [ free>=0 && 2>=free && 1>=1 && free>=1 && 2>=1 && 2>=0 && 1+free>=2 ], cost: 1+2*free
     37: f0 -> [4] : A'=1, B'=1, C'=0, D'=0, E'=2, F'=1-free, G'=free_3, [ free>=0 && 2>=2-free && 1>=1 && free>=1 && 2>=1 && 2>=0 && 1-free>=0 ], cost: 1+2*free


Final control flow graph problem, now checking costs for infinitely many models:
  Start location: f0
     34: f0 -> [4] : A'=1, B'=1, C'=0, D'=0, E'=2, F'=1+free, G'=free_3, [ free>=0 && 2>=free && 1>=1 && free>=1 && 2>=1 && 2>=0 && 1+free>=2 ], cost: 1+2*free
     37: f0 -> [4] : A'=1, B'=1, C'=0, D'=0, E'=2, F'=1-free, G'=free_3, [ free>=0 && 2>=2-free && 1>=1 && free>=1 && 2>=1 && 2>=0 && 1-free>=0 ], cost: 1+2*free


Computing complexity for remaining 2 transitions.


The final runtime is determined by this resulting transition:
  Final Guard: 
  Final Cost:  1

Obtained the following complexity w.r.t. the length of the input n:
  Complexity class: const
  Complexity value: 0

WORST_CASE(Omega(1),?)
