Trying to load file: loops.koat

Initial Control flow graph problem:
  Start location: start0
      0: start -> stop : D'=F, [ 0>=1+A && B==C && D==E && F==A ], cost: 1
      1: start -> lbl121 : B'=1, D'=-1+F, [ A>=0 && 1>=A && B==C && D==E && F==A ], cost: 1
      2: start -> lbl101 : B'=2, D'=F, [ A>=2 && B==C && D==E && F==A ], cost: 1
      3: lbl121 -> stop : [ A>=0 && B>=0 && B>=1 && 1+D==0 && F==A ], cost: 1
      4: lbl121 -> lbl121 : B'=1, D'=-1+D, [ D>=0 && 1>=D && A>=1+D && B>=1+D && B>=1 && 1+D>=0 && F==A ], cost: 1
      5: lbl121 -> lbl101 : B'=2, [ D>=2 && A>=1+D && B>=1+D && B>=1 && 1+D>=0 && F==A ], cost: 1
      7: lbl101 -> lbl121 : D'=-1+D, [ B>=D && B>=2 && 2*D>=2+B && A>=D && F==A ], cost: 1
      6: lbl101 -> lbl101 : B'=2*B, [ D>=1+B && B>=2 && 2*D>=2+B && A>=D && F==A ], cost: 1
      8: start0 -> start : B'=C, D'=E, F'=A, [], cost: 1


Simplified the transitions:
  Start location: start0
      1: start -> lbl121 : B'=1, D'=-1+F, [ A>=0 && 1>=A && B==C && D==E && F==A ], cost: 1
      2: start -> lbl101 : B'=2, D'=F, [ A>=2 && B==C && D==E && F==A ], cost: 1
      4: lbl121 -> lbl121 : B'=1, D'=-1+D, [ D>=0 && 1>=D && A>=1+D && B>=1+D && B>=1 && F==A ], cost: 1
      5: lbl121 -> lbl101 : B'=2, [ D>=2 && A>=1+D && B>=1+D && B>=1 && F==A ], cost: 1
      7: lbl101 -> lbl121 : D'=-1+D, [ B>=D && B>=2 && 2*D>=2+B && A>=D && F==A ], cost: 1
      6: lbl101 -> lbl101 : B'=2*B, [ D>=1+B && B>=2 && 2*D>=2+B && A>=D && F==A ], cost: 1
      8: start0 -> start : B'=C, D'=E, F'=A, [], cost: 1

Eliminating 1 self-loops for location lbl121
  Self-Loop 4 has the metering function: 1+D, resulting in the new transition 9.
  Removing the self-loops: 4.
Eliminating 1 self-loops for location lbl101
  Removing the self-loops: 6.

Accelerated all simple loops using metering functions (where possible):
  Start location: start0
      1: start -> lbl121 : B'=1, D'=-1+F, [ A>=0 && 1>=A && B==C && D==E && F==A ], cost: 1
      2: start -> lbl101 : B'=2, D'=F, [ A>=2 && B==C && D==E && F==A ], cost: 1
      9: lbl121 -> lbl121 : B'=1, D'=-1, [ D>=0 && 1>=D && A>=1+D && B>=1+D && B>=1 && F==A ], cost: 1+D
      5: lbl121 -> lbl101 : B'=2, [ D>=2 && A>=1+D && B>=1+D && B>=1 && F==A ], cost: 1
      7: lbl101 -> lbl121 : D'=-1+D, [ B>=D && B>=2 && 2*D>=2+B && A>=D && F==A ], cost: 1
     10: lbl101 -> lbl101 : B'=2*B, [ D>=1+B && B>=2 && 2*D>=2+B && A>=D && F==A ], cost: 1
      8: start0 -> start : B'=C, D'=E, F'=A, [], cost: 1


Chained simpled loops:
  Start location: start0
     11: start -> lbl121 : B'=1, D'=-1, [ A>=0 && 1>=A && B==C && D==E && F==A && -1+F>=0 && 1>=-1+F && A>=F && 1>=F && 1>=1 && F==A ], cost: 1+F
      2: start -> lbl101 : B'=2, D'=F, [ A>=2 && B==C && D==E && F==A ], cost: 1
     13: start -> lbl101 : B'=4, D'=F, [ A>=2 && B==C && D==E && F==A && F>=3 && 2>=2 && 2*F>=4 && A>=F && F==A ], cost: 2
      5: lbl121 -> lbl101 : B'=2, [ D>=2 && A>=1+D && B>=1+D && B>=1 && F==A ], cost: 1
     14: lbl121 -> lbl101 : B'=4, [ D>=2 && A>=1+D && B>=1+D && B>=1 && F==A && D>=3 && 2>=2 && 2*D>=4 && A>=D && F==A ], cost: 2
     12: lbl101 -> lbl121 : B'=1, D'=-1, [ B>=D && B>=2 && 2*D>=2+B && A>=D && F==A && -1+D>=0 && 1>=-1+D && A>=D && B>=D && B>=1 && F==A ], cost: 1+D
      8: start0 -> start : B'=C, D'=E, F'=A, [], cost: 1


Eliminated locations (branches):
  Start location: start0
      5: lbl121 -> lbl101 : B'=2, [ D>=2 && A>=1+D && B>=1+D && B>=1 && F==A ], cost: 1
     14: lbl121 -> lbl101 : B'=4, [ D>=2 && A>=1+D && B>=1+D && B>=1 && F==A && D>=3 && 2>=2 && 2*D>=4 && A>=D && F==A ], cost: 2
     12: lbl101 -> lbl121 : B'=1, D'=-1, [ B>=D && B>=2 && 2*D>=2+B && A>=D && F==A && -1+D>=0 && 1>=-1+D && A>=D && B>=D && B>=1 && F==A ], cost: 1+D
     15: start0 -> lbl121 : B'=1, D'=-1, F'=A, [ A>=0 && 1>=A && C==C && E==E && A==A && -1+A>=0 && 1>=-1+A && A>=A && 1>=A && 1>=1 && A==A ], cost: 2+A
     16: start0 -> lbl101 : B'=2, D'=A, F'=A, [ A>=2 && C==C && E==E && A==A ], cost: 2
     17: start0 -> lbl101 : B'=4, D'=A, F'=A, [ A>=2 && C==C && E==E && A==A && A>=3 && 2>=2 && 2*A>=4 && A>=A && A==A ], cost: 3


Eliminated locations:
  Start location: start0
     12: lbl101 -> lbl121 : B'=1, D'=-1, [ B>=D && B>=2 && 2*D>=2+B && A>=D && F==A && -1+D>=0 && 1>=-1+D && A>=D && B>=D && B>=1 && F==A ], cost: 1+D
     15: start0 -> lbl121 : B'=1, D'=-1, F'=A, [ A>=0 && 1>=A && C==C && E==E && A==A && -1+A>=0 && 1>=-1+A && A>=A && 1>=A && 1>=1 && A==A ], cost: 2+A
     16: start0 -> lbl101 : B'=2, D'=A, F'=A, [ A>=2 && C==C && E==E && A==A ], cost: 2
     17: start0 -> lbl101 : B'=4, D'=A, F'=A, [ A>=2 && C==C && E==E && A==A && A>=3 && 2>=2 && 2*A>=4 && A>=A && A==A ], cost: 3


Eliminated locations (branches):
  Start location: start0
     15: start0 -> lbl121 : B'=1, D'=-1, F'=A, [ A>=0 && 1>=A && C==C && E==E && A==A && -1+A>=0 && 1>=-1+A && A>=A && 1>=A && 1>=1 && A==A ], cost: 2+A
     18: start0 -> lbl121 : B'=1, D'=-1, F'=A, [ A>=2 && C==C && E==E && A==A && 2>=A && 2>=2 && 2*A>=4 && A>=A && A==A && -1+A>=0 && 1>=-1+A && A>=A && 2>=A && 2>=1 && A==A ], cost: 3+A


Final control flow graph problem, now checking costs for infinitely many models:
  Start location: start0
     15: start0 -> lbl121 : B'=1, D'=-1, F'=A, [ A>=0 && 1>=A && C==C && E==E && A==A && -1+A>=0 && 1>=-1+A && A>=A && 1>=A && 1>=1 && A==A ], cost: 2+A
     18: start0 -> lbl121 : B'=1, D'=-1, F'=A, [ A>=2 && C==C && E==E && A==A && 2>=A && 2>=2 && 2*A>=4 && A>=A && A==A && -1+A>=0 && 1>=-1+A && A>=A && 2>=A && 2>=1 && A==A ], cost: 3+A


Computing complexity for remaining 2 transitions.


The final runtime is determined by this resulting transition:
  Final Guard: 
  Final Cost:  1

Obtained the following complexity w.r.t. the length of the input n:
  Complexity class: const
  Complexity value: 0

WORST_CASE(Omega(1),?)
