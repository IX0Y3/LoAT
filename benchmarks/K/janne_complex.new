Trying to load file: janne_complex.koat

Initial Control flow graph problem:
  Start location: f0
      0: f0 -> f8 : A'=1, B'=1, C'=0, D'=1, E'=1, [], cost: 1
      1: f8 -> f10 : [ 29>=D ], cost: 1
      8: f8 -> f28 : C'=1, F'=1, [ D>=30 ], cost: 1
      7: f10 -> f8 : D'=2+D, E'=-10+E, [ E>=D ], cost: 1
      2: f10 -> f14 : E'=free, [ D>=1+E && E>=6 ], cost: 1
      3: f10 -> f14 : E'=2+E, [ D>=1+E && 5>=E ], cost: 1
      4: f14 -> f10 : D'=10+D, [ 12>=E && E>=10 ], cost: 1
      5: f14 -> f10 : D'=1+D, [ E>=13 ], cost: 1
      6: f14 -> f10 : D'=1+D, [ 9>=E ], cost: 1


Simplified the transitions:
  Start location: f0
      0: f0 -> f8 : A'=1, B'=1, C'=0, D'=1, E'=1, [], cost: 1
      1: f8 -> f10 : [ 29>=D ], cost: 1
      7: f10 -> f8 : D'=2+D, E'=-10+E, [ E>=D ], cost: 1
      2: f10 -> f14 : E'=free, [ D>=1+E && E>=6 ], cost: 1
      3: f10 -> f14 : E'=2+E, [ D>=1+E && 5>=E ], cost: 1
      4: f14 -> f10 : D'=10+D, [ 12>=E && E>=10 ], cost: 1
      5: f14 -> f10 : D'=1+D, [ E>=13 ], cost: 1
      6: f14 -> f10 : D'=1+D, [ 9>=E ], cost: 1


Applied chaining over branches and pruning:
  Start location: f0
      0: f0 -> f8 : A'=1, B'=1, C'=0, D'=1, E'=1, [], cost: 1
      1: f8 -> f10 : [ 29>=D ], cost: 1
      7: f10 -> f8 : D'=2+D, E'=-10+E, [ E>=D ], cost: 1
      9: f10 -> f10 : D'=10+D, E'=free, [ D>=1+E && E>=6 && 12>=free && free>=10 ], cost: 2
     10: f10 -> f10 : D'=1+D, E'=free, [ D>=1+E && E>=6 && free>=13 ], cost: 2
     11: f10 -> f10 : D'=1+D, E'=free, [ D>=1+E && E>=6 && 9>=free ], cost: 2
     12: f10 -> f10 : D'=1+D, E'=2+E, [ D>=1+E && 5>=E && 9>=2+E ], cost: 2


Try instantiation
  Start location: f0
      0: f0 -> f8 : A'=1, B'=1, C'=0, D'=1, E'=1, [], cost: 1
      1: f8 -> f10 : [ 29>=D ], cost: 1
      7: f10 -> f8 : D'=2+D, E'=-10+E, [ E>=D ], cost: 1
     13: f10 -> f10 : [ D>=1+E && E>=6 && D>=6 ], cost: INF
     14: f10 -> f10 : [ D>=1+E && E>=6 && D>=6 ], cost: INF
     15: f10 -> f10 : [ D>=1+E && E>=6 && D>=-3 ], cost: INF

Eliminating 3 self-loops for location f10
  Removing the self-loops: 13 14 15.
Removing duplicate transition: 16.

Removed all Self-loops using metering functions (where possible):
  Start location: f0
      0: f0 -> f8 : A'=1, B'=1, C'=0, D'=1, E'=1, [], cost: 1
      1: f8 -> f10 : [ 29>=D ], cost: 1
     17: f10 -> [5] : [ D>=1+E && E>=6 && D>=6 ], cost: INF
     18: f10 -> [5] : [ D>=1+E && E>=6 && D>=-3 ], cost: INF
      7: [5] -> f8 : D'=2+D, E'=-10+E, [ E>=D ], cost: 1


Applied chaining over branches and pruning:
  Start location: f0
      0: f0 -> f8 : A'=1, B'=1, C'=0, D'=1, E'=1, [], cost: 1
     19: f8 -> [5] : [ 29>=D && D>=1+E && E>=6 && D>=6 ], cost: INF
     20: f8 -> [5] : [ 29>=D && D>=1+E && E>=6 && D>=-3 ], cost: INF
      7: [5] -> f8 : D'=2+D, E'=-10+E, [ E>=D ], cost: 1


Applied chaining over branches and pruning:
  Start location: f0
      0: f0 -> f8 : A'=1, B'=1, C'=0, D'=1, E'=1, [], cost: 1
     21: f8 -> [6] : [ 29>=D && D>=1+E && E>=6 && D>=6 ], cost: INF
     22: f8 -> [7] : [ 29>=D && D>=1+E && E>=6 && D>=-3 ], cost: INF


Applied chaining over branches and pruning:
  Start location: f0
    <empty>


Final control flow graph problem, now checking costs for infinitely many models:
  Start location: f0
    <empty>


Computing complexity for remaining 0 transitions.


The final runtime is determined by this resulting transition:
  Final Guard: 
  Final Cost:  1

Obtained the following complexity w.r.t. the length of the input n:
  Complexity class: const
  Complexity value: 0

WORST_CASE(Omega(1),?)
