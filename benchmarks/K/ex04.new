Trying to load file: ex04.koat

Initial Control flow graph problem:
  Start location: evalfstart
      0: evalfstart -> evalfentryin : [], cost: 1
      1: evalfentryin -> evalfbb7in : A'=0, [], cost: 1
      2: evalfbb7in -> evalfbb5in : C'=0, [ B^3>=0 && 0>=B^3 && 0>=1+A ], cost: 1
      3: evalfbb7in -> evalfbb5in : C'=0, [ B^3>=1 && free>=0 && B^3>=2*free && 1+2*free>=B^3 && free>=1+A ], cost: 1
      4: evalfbb7in -> evalfbb5in : C'=0, [ 0>=1+B^3 && 0>=free_1 && free_1>=1+A && 2*free_1>=B^3 && 1+B^3>=2*free_1 ], cost: 1
      5: evalfbb7in -> evalfreturnin : [ B^3>=0 && 0>=B^3 && A>=0 ], cost: 1
      6: evalfbb7in -> evalfreturnin : [ B^3>=1 && free_2>=0 && B^3>=2*free_2 && 1+2*free_2>=B^3 && A>=free_2 ], cost: 1
      7: evalfbb7in -> evalfreturnin : [ 0>=1+B^3 && 0>=free_3 && A>=free_3 && 2*free_3>=B^3 && 1+B^3>=2*free_3 ], cost: 1
      8: evalfbb5in -> evalfbb3in : D'=0, [ B>=1+C ], cost: 1
      9: evalfbb5in -> evalfbb6in : [ C>=B ], cost: 1
     15: evalfreturnin -> evalfstop : [], cost: 1
     10: evalfbb3in -> evalfbb2in : [ C>=1+D ], cost: 1
     11: evalfbb3in -> evalfbb4in : [ D>=C ], cost: 1
     14: evalfbb6in -> evalfbb7in : A'=1+A, [], cost: 1
     12: evalfbb2in -> evalfbb3in : D'=1+D, [], cost: 1
     13: evalfbb4in -> evalfbb5in : C'=1+C, [], cost: 1


Simplified the transitions:
  Start location: evalfstart
      0: evalfstart -> evalfentryin : [], cost: 1
      1: evalfentryin -> evalfbb7in : A'=0, [], cost: 1
      2: evalfbb7in -> evalfbb5in : C'=0, [ -B^3==0 && 0>=1+A ], cost: 1
      3: evalfbb7in -> evalfbb5in : C'=0, [ B^3>=1 && free>=0 && B^3>=2*free && 1+2*free>=B^3 && free>=1+A ], cost: 1
      4: evalfbb7in -> evalfbb5in : C'=0, [ 0>=1+B^3 && 0>=free_1 && free_1>=1+A && 2*free_1>=B^3 && 1+B^3>=2*free_1 ], cost: 1
      8: evalfbb5in -> evalfbb3in : D'=0, [ B>=1+C ], cost: 1
      9: evalfbb5in -> evalfbb6in : [ C>=B ], cost: 1
     10: evalfbb3in -> evalfbb2in : [ C>=1+D ], cost: 1
     11: evalfbb3in -> evalfbb4in : [ D>=C ], cost: 1
     14: evalfbb6in -> evalfbb7in : A'=1+A, [], cost: 1
     12: evalfbb2in -> evalfbb3in : D'=1+D, [], cost: 1
     13: evalfbb4in -> evalfbb5in : C'=1+C, [], cost: 1


Applied simple chaining:
  Start location: evalfstart
      0: evalfstart -> evalfbb7in : A'=0, [], cost: 2
      2: evalfbb7in -> evalfbb5in : C'=0, [ -B^3==0 && 0>=1+A ], cost: 1
      3: evalfbb7in -> evalfbb5in : C'=0, [ B^3>=1 && free>=0 && B^3>=2*free && 1+2*free>=B^3 && free>=1+A ], cost: 1
      4: evalfbb7in -> evalfbb5in : C'=0, [ 0>=1+B^3 && 0>=free_1 && free_1>=1+A && 2*free_1>=B^3 && 1+B^3>=2*free_1 ], cost: 1
      9: evalfbb5in -> evalfbb7in : A'=1+A, [ C>=B ], cost: 2
      8: evalfbb5in -> evalfbb3in : D'=0, [ B>=1+C ], cost: 1
     11: evalfbb3in -> evalfbb5in : C'=1+C, [ D>=C ], cost: 2
     10: evalfbb3in -> evalfbb3in : D'=1+D, [ C>=1+D ], cost: 2


Try instantiation
  Start location: evalfstart
      0: evalfstart -> evalfbb7in : A'=0, [], cost: 2
      2: evalfbb7in -> evalfbb5in : C'=0, [ -B^3==0 && 0>=1+A ], cost: 1
      3: evalfbb7in -> evalfbb5in : C'=0, [ B^3>=1 && free>=0 && B^3>=2*free && 1+2*free>=B^3 && free>=1+A ], cost: 1
      4: evalfbb7in -> evalfbb5in : C'=0, [ 0>=1+B^3 && 0>=free_1 && free_1>=1+A && 2*free_1>=B^3 && 1+B^3>=2*free_1 ], cost: 1
      9: evalfbb5in -> evalfbb7in : A'=1+A, [ C>=B ], cost: 2
      8: evalfbb5in -> evalfbb3in : D'=0, [ B>=1+C ], cost: 1
     11: evalfbb3in -> evalfbb5in : C'=1+C, [ D>=C ], cost: 2
     16: evalfbb3in -> evalfbb3in : D'=C, [ C>=1+D ], cost: 2*C-2*D

Eliminating 1 self-loops for location evalfbb3in
  Removing the self-loops: 16.
Adding an epsilon transition (to model nonexecution of the loops): 18.

Removed all Self-loops using metering functions (where possible):
  Start location: evalfstart
      0: evalfstart -> evalfbb7in : A'=0, [], cost: 2
      2: evalfbb7in -> evalfbb5in : C'=0, [ -B^3==0 && 0>=1+A ], cost: 1
      3: evalfbb7in -> evalfbb5in : C'=0, [ B^3>=1 && free>=0 && B^3>=2*free && 1+2*free>=B^3 && free>=1+A ], cost: 1
      4: evalfbb7in -> evalfbb5in : C'=0, [ 0>=1+B^3 && 0>=free_1 && free_1>=1+A && 2*free_1>=B^3 && 1+B^3>=2*free_1 ], cost: 1
      9: evalfbb5in -> evalfbb7in : A'=1+A, [ C>=B ], cost: 2
      8: evalfbb5in -> evalfbb3in : D'=0, [ B>=1+C ], cost: 1
     17: evalfbb3in -> [10] : D'=C, [ C>=1+D ], cost: 2*C-2*D
     18: evalfbb3in -> [10] : [], cost: 0
     11: [10] -> evalfbb5in : C'=1+C, [ D>=C ], cost: 2


Applied chaining over branches and pruning:
  Start location: evalfstart
      0: evalfstart -> evalfbb7in : A'=0, [], cost: 2
      2: evalfbb7in -> evalfbb5in : C'=0, [ -B^3==0 && 0>=1+A ], cost: 1
      3: evalfbb7in -> evalfbb5in : C'=0, [ B^3>=1 && free>=0 && B^3>=2*free && 1+2*free>=B^3 && free>=1+A ], cost: 1
      4: evalfbb7in -> evalfbb5in : C'=0, [ 0>=1+B^3 && 0>=free_1 && free_1>=1+A && 2*free_1>=B^3 && 1+B^3>=2*free_1 ], cost: 1
      9: evalfbb5in -> evalfbb7in : A'=1+A, [ C>=B ], cost: 2
     19: evalfbb5in -> [10] : D'=C, [ B>=1+C && C>=1 ], cost: 1+2*C
     20: evalfbb5in -> [10] : D'=0, [ B>=1+C ], cost: 1
     11: [10] -> evalfbb5in : C'=1+C, [ D>=C ], cost: 2


Applied chaining over branches and pruning:
  Start location: evalfstart
      0: evalfstart -> evalfbb7in : A'=0, [], cost: 2
      2: evalfbb7in -> evalfbb5in : C'=0, [ -B^3==0 && 0>=1+A ], cost: 1
      3: evalfbb7in -> evalfbb5in : C'=0, [ B^3>=1 && free>=0 && B^3>=2*free && 1+2*free>=B^3 && free>=1+A ], cost: 1
      4: evalfbb7in -> evalfbb5in : C'=0, [ 0>=1+B^3 && 0>=free_1 && free_1>=1+A && 2*free_1>=B^3 && 1+B^3>=2*free_1 ], cost: 1
      9: evalfbb5in -> evalfbb7in : A'=1+A, [ C>=B ], cost: 2
     21: evalfbb5in -> evalfbb5in : C'=1+C, D'=C, [ B>=1+C && C>=1 && C>=C ], cost: 3+2*C
     22: evalfbb5in -> evalfbb5in : C'=1+C, D'=0, [ B>=1+C && 0>=C ], cost: 3


Try instantiation
  Start location: evalfstart
      0: evalfstart -> evalfbb7in : A'=0, [], cost: 2
      2: evalfbb7in -> evalfbb5in : C'=0, [ -B^3==0 && 0>=1+A ], cost: 1
      3: evalfbb7in -> evalfbb5in : C'=0, [ B^3>=1 && free>=0 && B^3>=2*free && 1+2*free>=B^3 && free>=1+A ], cost: 1
      4: evalfbb7in -> evalfbb5in : C'=0, [ 0>=1+B^3 && 0>=free_1 && free_1>=1+A && 2*free_1>=B^3 && 1+B^3>=2*free_1 ], cost: 1
      9: evalfbb5in -> evalfbb7in : A'=1+A, [ C>=B ], cost: 2
     23: evalfbb5in -> evalfbb5in : C'=1, D'=0, [ B>=1 && 0>=C && B>=1+C ], cost: 3-3*C
     24: evalfbb5in -> evalfbb5in : C'=B, D'=0, [ 1>=B && 0>=C && B>=1+C ], cost: 3*B-3*C
     25: evalfbb5in -> evalfbb5in : C'=B, D'=-1+B, [ B>=2 && C>=1 && B>=1+C ], cost: (B-C)^2+2*B+2*(B-C)*C-2*C

Eliminating 3 self-loops for location evalfbb5in
  Removing the self-loops: 23 24 25.
Adding an epsilon transition (to model nonexecution of the loops): 29.

Removed all Self-loops using metering functions (where possible):
  Start location: evalfstart
      0: evalfstart -> evalfbb7in : A'=0, [], cost: 2
      2: evalfbb7in -> evalfbb5in : C'=0, [ -B^3==0 && 0>=1+A ], cost: 1
      3: evalfbb7in -> evalfbb5in : C'=0, [ B^3>=1 && free>=0 && B^3>=2*free && 1+2*free>=B^3 && free>=1+A ], cost: 1
      4: evalfbb7in -> evalfbb5in : C'=0, [ 0>=1+B^3 && 0>=free_1 && free_1>=1+A && 2*free_1>=B^3 && 1+B^3>=2*free_1 ], cost: 1
     26: evalfbb5in -> [11] : C'=1, D'=0, [ B>=1 && 0>=C && B>=1+C ], cost: 3-3*C
     27: evalfbb5in -> [11] : C'=B, D'=0, [ 1>=B && 0>=C && B>=1+C ], cost: 3*B-3*C
     28: evalfbb5in -> [11] : C'=B, D'=-1+B, [ B>=2 && C>=1 && B>=1+C ], cost: (B-C)^2+2*B+2*(B-C)*C-2*C
     29: evalfbb5in -> [11] : [], cost: 0
      9: [11] -> evalfbb7in : A'=1+A, [ C>=B ], cost: 2


Applied chaining over branches and pruning:
  Start location: evalfstart
      0: evalfstart -> evalfbb7in : A'=0, [], cost: 2
     30: evalfbb7in -> [11] : C'=0, [ -B^3==0 && 0>=1+A ], cost: 1
     31: evalfbb7in -> [11] : C'=1, D'=0, [ B^3>=1 && free>=0 && B^3>=2*free && 1+2*free>=B^3 && free>=1+A && B>=1 && 0>=0 && B>=1 ], cost: 4
     32: evalfbb7in -> [11] : C'=B, D'=0, [ B^3>=1 && free>=0 && B^3>=2*free && 1+2*free>=B^3 && free>=1+A && 1>=B && 0>=0 && B>=1 ], cost: 1+3*B
     33: evalfbb7in -> [11] : C'=0, [ B^3>=1 && free>=0 && B^3>=2*free && 1+2*free>=B^3 && free>=1+A ], cost: 1
     34: evalfbb7in -> [11] : C'=0, [ 0>=1+B^3 && 0>=free_1 && free_1>=1+A && 2*free_1>=B^3 && 1+B^3>=2*free_1 ], cost: 1
      9: [11] -> evalfbb7in : A'=1+A, [ C>=B ], cost: 2


Applied chaining over branches and pruning:
  Start location: evalfstart
      0: evalfstart -> evalfbb7in : A'=0, [], cost: 2
     35: evalfbb7in -> evalfbb7in : A'=1+A, C'=0, [ -B^3==0 && 0>=1+A && 0>=B ], cost: 3
     36: evalfbb7in -> evalfbb7in : A'=1+A, C'=1, D'=0, [ B^3>=1 && free>=0 && B^3>=2*free && 1+2*free>=B^3 && free>=1+A && B>=1 && 0>=0 && B>=1 && 1>=B ], cost: 6
     37: evalfbb7in -> evalfbb7in : A'=1+A, C'=B, D'=0, [ B^3>=1 && free>=0 && B^3>=2*free && 1+2*free>=B^3 && free>=1+A && 1>=B && 0>=0 && B>=1 && B>=B ], cost: 3+3*B
     38: evalfbb7in -> evalfbb7in : A'=1+A, C'=0, [ 0>=1+B^3 && 0>=free_1 && free_1>=1+A && 2*free_1>=B^3 && 1+B^3>=2*free_1 && 0>=B ], cost: 3

