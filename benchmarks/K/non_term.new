Trying to load file: non_term.koat

Initial Control flow graph problem:
  Start location: f1
      0: f1 -> f2 : [ 0>=1+B+A && A>=1 ], cost: 1
      1: f2 -> f2 : A'=-B+A, [ A>=0 ], cost: 1
      2: f2 -> f3 : [ 0>=1+A ], cost: 1


Simplified the transitions:
  Start location: f1
      0: f1 -> f2 : [ 0>=1+B+A && A>=1 ], cost: 1
      1: f2 -> f2 : A'=-B+A, [ A>=0 ], cost: 1


Try instantiation
  Start location: f1
      0: f1 -> f2 : [ 0>=1+B+A && A>=1 ], cost: 1
      3: f2 -> f2 : [ A>=0 && B<=-1 && B>=-1 ], cost: INF
      4: f2 -> f2 : A'=-1, [ A>=0 && B<=1 && B>=1 ], cost: 1+A

Eliminating 2 self-loops for location f2
  Removing the self-loops: 3 4.
Adding an epsilon transition (to model nonexecution of the loops): 7.

Removed all Self-loops using metering functions (where possible):
  Start location: f1
      0: f1 -> f2 : [ 0>=1+B+A && A>=1 ], cost: 1
      5: f2 -> [3] : [ A>=0 && B<=-1 && B>=-1 ], cost: INF
      6: f2 -> [3] : A'=-1, [ A>=0 && -1+B==0 ], cost: 1+A
      7: f2 -> [3] : [], cost: 0


Applied chaining over branches and pruning:
  Start location: f1
    <empty>


Final control flow graph problem, now checking costs for infinitely many models:
  Start location: f1
    <empty>


Computing complexity for remaining 0 transitions.


The final runtime is determined by this resulting transition:
  Final Guard: 
  Final Cost:  1

Obtained the following complexity w.r.t. the length of the input n:
  Complexity class: const
  Complexity value: 0

WORST_CASE(Omega(1),?)
