Trying to load file: Example2_2.koat

Initial Control flow graph problem:
  Start location: evalfstart
      0: evalfstart -> evalfentryin : [], cost: 1
      1: evalfentryin -> evalfbb3in : A'=B, B'=A, C'=0, [ A>=1 && B>=1 ], cost: 1
      2: evalfbb3in -> evalfreturnin : [ 0>=B ], cost: 1
      3: evalfbb3in -> evalfbb4in : [ B>=1 ], cost: 1
     10: evalfreturnin -> evalfstop : [], cost: 1
      6: evalfbb4in -> evalfreturnin : [], cost: 1
      4: evalfbb4in -> evalfbbin : [ 0>=1+free ], cost: 1
      5: evalfbb4in -> evalfbbin : [ free_1>=1 ], cost: 1
      8: evalfbbin -> evalfbb3in : C'=0, [ C>=A ], cost: 1
      7: evalfbbin -> evalfbb1in : [ A>=1+C ], cost: 1
      9: evalfbb1in -> evalfbb3in : B'=-1+B, C'=1+C, [], cost: 1

Removing duplicate transition: 4.

Simplified the transitions:
  Start location: evalfstart
      0: evalfstart -> evalfentryin : [], cost: 1
      1: evalfentryin -> evalfbb3in : A'=B, B'=A, C'=0, [ A>=1 && B>=1 ], cost: 1
      3: evalfbb3in -> evalfbb4in : [ B>=1 ], cost: 1
      5: evalfbb4in -> evalfbbin : [], cost: 1
      8: evalfbbin -> evalfbb3in : C'=0, [ C>=A ], cost: 1
      7: evalfbbin -> evalfbb1in : [ A>=1+C ], cost: 1
      9: evalfbb1in -> evalfbb3in : B'=-1+B, C'=1+C, [], cost: 1


Applied simple chaining:
  Start location: evalfstart
      0: evalfstart -> evalfbb3in : A'=B, B'=A, C'=0, [ A>=1 && B>=1 ], cost: 2
      3: evalfbb3in -> evalfbbin : [ B>=1 ], cost: 2
      8: evalfbbin -> evalfbb3in : C'=0, [ C>=A ], cost: 1
      7: evalfbbin -> evalfbb3in : B'=-1+B, C'=1+C, [ A>=1+C ], cost: 2


Applied chaining over branches and pruning:
  Start location: evalfstart
      0: evalfstart -> evalfbb3in : A'=B, B'=A, C'=0, [ A>=1 && B>=1 ], cost: 2
     11: evalfbb3in -> evalfbb3in : C'=0, [ B>=1 && C>=A ], cost: 3
     12: evalfbb3in -> evalfbb3in : B'=-1+B, C'=1+C, [ B>=1 && A>=1+C ], cost: 4


Try instantiation
  Start location: evalfstart
      0: evalfstart -> evalfbb3in : A'=B, B'=A, C'=0, [ A>=1 && B>=1 ], cost: 2
     13: evalfbb3in -> evalfbb3in : B'=B-A+C, C'=A, [ B-A+C>=0 && A>=1+C && B>=1 ], cost: 4*A-4*C
     14: evalfbb3in -> evalfbb3in : B'=0, C'=B+C, [ A>=B+C && A>=1+C && B>=1 ], cost: 4*B
     15: evalfbb3in -> evalfbb3in : [ 0>=A && C>=A && B>=1 ], cost: INF

Eliminating 3 self-loops for location evalfbb3in
  Removing the self-loops: 13 14 15.
Adding an epsilon transition (to model nonexecution of the loops): 19.

Removed all Self-loops using metering functions (where possible):
  Start location: evalfstart
      0: evalfstart -> evalfbb3in : A'=B, B'=A, C'=0, [ A>=1 && B>=1 ], cost: 2
     16: evalfbb3in -> [8] : B'=B-A+C, C'=A, [ B-A+C>=0 && A>=1+C && B>=1 ], cost: 4*A-4*C
     17: evalfbb3in -> [8] : B'=0, C'=B+C, [ A>=B+C && A>=1+C && B>=1 ], cost: 4*B
     18: evalfbb3in -> [8] : [ 0>=A && C>=A && B>=1 ], cost: INF
     19: evalfbb3in -> [8] : [], cost: 0


Applied chaining over branches and pruning:
  Start location: evalfstart
     20: evalfstart -> [8] : A'=B, B'=-B+A, C'=B, [ A>=1 && B>=1 && -B+A>=0 && B>=1 && A>=1 ], cost: 2+4*B
     21: evalfstart -> [8] : A'=B, B'=0, C'=A, [ A>=1 && B>=1 && B>=A && B>=1 && A>=1 ], cost: 2+4*A


Final control flow graph problem, now checking costs for infinitely many models:
  Start location: evalfstart
     20: evalfstart -> [8] : A'=B, B'=-B+A, C'=B, [ A>=1 && B>=1 && -B+A>=0 && B>=1 && A>=1 ], cost: 2+4*B
     21: evalfstart -> [8] : A'=B, B'=0, C'=A, [ A>=1 && B>=1 && B>=A && B>=1 && A>=1 ], cost: 2+4*A


Computing complexity for remaining 2 transitions.

  Found configuration with infinitely models for cost: 2+4*B
  and guard: A>=1 && B>=1 && -B+A>=0 && B>=1 && A>=1:
  B: Pos, A: Pos, where: A > B

Found new complexity n^1, because: Found infinity configuration.


The final runtime is determined by this resulting transition:
  Final Guard: A>=1 && B>=1 && -B+A>=0 && B>=1 && A>=1
  Final Cost:  2+4*B

Obtained the following complexity w.r.t. the length of the input n:
  Complexity class: n^1
  Complexity value: 1

WORST_CASE(Omega(n^1),?)
