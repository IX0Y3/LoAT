Trying to load file: bs.koat

Initial Control flow graph problem:
  Start location: f0
      0: f0 -> f6 : A'=8, B'=0, C'=14, D'=-1, [], cost: 1
      3: f6 -> f6 : C'=-1+B, D'=free_3, E'=free_4, [ C>=B ], cost: 1
      1: f6 -> f12 : E'=free, [ C>=B && A>=1+free_1 ], cost: 1
      2: f6 -> f12 : E'=free_2, [ C>=B ], cost: 1
      6: f6 -> f20 : F'=D, G'=D, [ B>=1+C ], cost: 1
      4: f12 -> f6 : C'=-1+E, [], cost: 1
      5: f12 -> f6 : B'=1+E, [], cost: 1


Simplified the transitions:
  Start location: f0
      0: f0 -> f6 : A'=8, B'=0, C'=14, D'=-1, [], cost: 1
      3: f6 -> f6 : C'=-1+B, D'=free_3, E'=free_4, [ C>=B ], cost: 1
      1: f6 -> f12 : E'=free, [ C>=B ], cost: 1
      2: f6 -> f12 : E'=free_2, [ C>=B ], cost: 1
      4: f12 -> f6 : C'=-1+E, [], cost: 1
      5: f12 -> f6 : B'=1+E, [], cost: 1

Eliminating 1 self-loops for location f6
  Removing the self-loops: 3.

Accelerated all simple loops using metering functions (where possible):
  Start location: f0
      0: f0 -> f6 : A'=8, B'=0, C'=14, D'=-1, [], cost: 1
      7: f6 -> f6 : C'=-1+B, D'=free_3, E'=free_4, [ C>=B ], cost: 1
      1: f6 -> f12 : E'=free, [ C>=B ], cost: 1
      2: f6 -> f12 : E'=free_2, [ C>=B ], cost: 1
      4: f12 -> f6 : C'=-1+E, [], cost: 1
      5: f12 -> f6 : B'=1+E, [], cost: 1


Chained simpled loops:
  Start location: f0
      0: f0 -> f6 : A'=8, B'=0, C'=14, D'=-1, [], cost: 1
      8: f0 -> f6 : A'=8, B'=0, C'=-1, D'=free_3, E'=free_4, [ 14>=0 ], cost: 2
      1: f6 -> f12 : E'=free, [ C>=B ], cost: 1
      2: f6 -> f12 : E'=free_2, [ C>=B ], cost: 1
      4: f12 -> f6 : C'=-1+E, [], cost: 1
      5: f12 -> f6 : B'=1+E, [], cost: 1
      9: f12 -> f6 : C'=-1+B, D'=free_3, E'=free_4, [ -1+E>=B ], cost: 2
     10: f12 -> f6 : B'=1+E, C'=E, D'=free_3, E'=free_4, [ C>=1+E ], cost: 2


Eliminated locations (branches):
  Start location: f0
      0: f0 -> f6 : A'=8, B'=0, C'=14, D'=-1, [], cost: 1
      8: f0 -> f6 : A'=8, B'=0, C'=-1, D'=free_3, E'=free_4, [ 14>=0 ], cost: 2
     11: f6 -> f6 : C'=-1+free, E'=free, [ C>=B ], cost: 2
     12: f6 -> f6 : B'=1+free, E'=free, [ C>=B ], cost: 2
     13: f6 -> f6 : C'=-1+B, D'=free_3, E'=free_4, [ C>=B && -1+free>=B ], cost: 3
     14: f6 -> f6 : B'=1+free, C'=free, D'=free_3, E'=free_4, [ C>=B && C>=1+free ], cost: 3
     15: f6 -> f6 : C'=-1+free_2, E'=free_2, [ C>=B ], cost: 2
     16: f6 -> f6 : B'=1+free_2, E'=free_2, [ C>=B ], cost: 2
     17: f6 -> f6 : C'=-1+B, D'=free_3, E'=free_4, [ C>=B && -1+free_2>=B ], cost: 3
     18: f6 -> f6 : B'=1+free_2, C'=free_2, D'=free_3, E'=free_4, [ C>=B && C>=1+free_2 ], cost: 3


Pruned:
  Start location: f0
      0: f0 -> f6 : A'=8, B'=0, C'=14, D'=-1, [], cost: 1
      8: f0 -> f6 : A'=8, B'=0, C'=-1, D'=free_3, E'=free_4, [ 14>=0 ], cost: 2
     11: f6 -> f6 : C'=-1+free, E'=free, [ C>=B ], cost: 2
     12: f6 -> f6 : B'=1+free, E'=free, [ C>=B ], cost: 2
     14: f6 -> f6 : B'=1+free, C'=free, D'=free_3, E'=free_4, [ C>=B && C>=1+free ], cost: 3
     15: f6 -> f6 : C'=-1+free_2, E'=free_2, [ C>=B ], cost: 2
     16: f6 -> f6 : B'=1+free_2, E'=free_2, [ C>=B ], cost: 2

Eliminating 5 self-loops for location f6
  Removing the self-loops: 11 12 14 15 16.

Accelerated all simple loops using metering functions (where possible):
  Start location: f0
      0: f0 -> f6 : A'=8, B'=0, C'=14, D'=-1, [], cost: 1
      8: f0 -> f6 : A'=8, B'=0, C'=-1, D'=free_3, E'=free_4, [ 14>=0 ], cost: 2
     19: f6 -> f6 : C'=-1+free, E'=free, [ C>=B ], cost: 2
     20: f6 -> f6 : B'=1+free, E'=free, [ C>=B ], cost: 2
     21: f6 -> f6 : B'=1+free, C'=free, D'=free_3, E'=free_4, [ C>=B && C>=1+free ], cost: 3
     22: f6 -> f6 : C'=-1+free_2, E'=free_2, [ C>=B ], cost: 2
     23: f6 -> f6 : B'=1+free_2, E'=free_2, [ C>=B ], cost: 2


Chained simpled loops:
  Start location: f0
      0: f0 -> f6 : A'=8, B'=0, C'=14, D'=-1, [], cost: 1
      8: f0 -> f6 : A'=8, B'=0, C'=-1, D'=free_3, E'=free_4, [ 14>=0 ], cost: 2
     24: f0 -> f6 : A'=8, B'=0, C'=-1+free, D'=-1, E'=free, [ 14>=0 ], cost: 3
     25: f0 -> f6 : A'=8, B'=1+free, C'=14, D'=-1, E'=free, [ 14>=0 ], cost: 3
     26: f0 -> f6 : A'=8, B'=1+free, C'=free, D'=free_3, E'=free_4, [ 14>=0 && 14>=1+free ], cost: 4
     27: f0 -> f6 : A'=8, B'=0, C'=-1+free_2, D'=-1, E'=free_2, [ 14>=0 ], cost: 3
     28: f0 -> f6 : A'=8, B'=1+free_2, C'=14, D'=-1, E'=free_2, [ 14>=0 ], cost: 3


Pruned:
  Start location: f0
    <empty>


Final control flow graph problem, now checking costs for infinitely many models:
  Start location: f0
    <empty>


Computing complexity for remaining 0 transitions.


The final runtime is determined by this resulting transition:
  Final Guard: 
  Final Cost:  1

Obtained the following complexity w.r.t. the length of the input n:
  Complexity class: const
  Complexity value: 0

WORST_CASE(Omega(1),?)
