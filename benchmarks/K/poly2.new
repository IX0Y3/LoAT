Trying to load file: poly2.koat

Initial Control flow graph problem:
  Start location: start
      0: eval -> eval : A'=B+A, B'=-2+B, C'=1+C, [ A>=0 ], cost: 1
      1: eval -> eval : A'=A+C, C'=-2+C, [ A>=0 ], cost: 1
      2: start -> eval : [], cost: 1


Try instantiation
  Start location: start
      3: eval -> eval : A'=A+C, C'=-2+C, [ A>=0 ], cost: 1
      4: eval -> eval : A'=B+A, B'=-2+B, C'=1+C, [ A>=0 ], cost: 1
      2: start -> eval : [], cost: 1

Eliminating 2 self-loops for location eval
  Removing the self-loops: 3 4.
Adding an epsilon transition (to model nonexecution of the loops): 7.

Removed all Self-loops using metering functions (where possible):
  Start location: start
      5: eval -> [2] : A'=A+C, C'=-2+C, [ A>=0 ], cost: 1
      6: eval -> [2] : A'=B+A, B'=-2+B, C'=1+C, [ A>=0 ], cost: 1
      7: eval -> [2] : [], cost: 0
      2: start -> eval : [], cost: 1


Applied chaining over branches and pruning:
  Start location: start
    <empty>


Final control flow graph problem, now checking costs for infinitely many models:
  Start location: start
    <empty>


Computing complexity for remaining 0 transitions.


The final runtime is determined by this resulting transition:
  Final Guard: 
  Final Cost:  1

Obtained the following complexity w.r.t. the length of the input n:
  Complexity class: const
  Complexity value: 0

WORST_CASE(Omega(1),?)
