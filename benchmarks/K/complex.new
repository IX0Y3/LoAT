Trying to load file: complex.koat

Initial Control flow graph problem:
  Start location: evalcomplexstart
      0: evalcomplexstart -> evalcomplexentryin : [], cost: 1
      1: evalcomplexentryin -> evalcomplexbb10in : A'=B, B'=A, [], cost: 1
      2: evalcomplexbb10in -> evalcomplexbb8in : C'=A, D'=B, [ 29>=B ], cost: 1
      3: evalcomplexbb10in -> evalcomplexreturnin : [ B>=30 ], cost: 1
      4: evalcomplexbb8in -> evalcomplexbb1in : [ D>=1+C ], cost: 1
      5: evalcomplexbb8in -> evalcomplexbb9in : [ C>=D ], cost: 1
     15: evalcomplexreturnin -> evalcomplexstop : [], cost: 1
      6: evalcomplexbb1in -> evalcomplexbb7in : E'=7+C, [ C>=6 && 2>=C ], cost: 1
      7: evalcomplexbb1in -> evalcomplexbb7in : E'=7+C, [ C>=6 ], cost: 1
      9: evalcomplexbb1in -> evalcomplexbb7in : E'=2+C, [ 5>=C && 7>=C ], cost: 1
     10: evalcomplexbb1in -> evalcomplexbb7in : E'=2+C, [ 5>=C && C>=11 ], cost: 1
      8: evalcomplexbb1in -> evalcomplexbb6in : E'=7+C, [ C>=6 && C>=3 && 5>=C ], cost: 1
     11: evalcomplexbb1in -> evalcomplexbb6in : E'=2+C, [ 5>=C && C>=8 && 10>=C ], cost: 1
     14: evalcomplexbb9in -> evalcomplexbb10in : A'=-10+C, B'=2+D, [], cost: 1
     12: evalcomplexbb7in -> evalcomplexbb8in : C'=E, D'=1+D, [], cost: 1
     13: evalcomplexbb6in -> evalcomplexbb8in : C'=E, D'=10+D, [], cost: 1


Simplified the transitions:
  Start location: evalcomplexstart
      0: evalcomplexstart -> evalcomplexentryin : [], cost: 1
      1: evalcomplexentryin -> evalcomplexbb10in : A'=B, B'=A, [], cost: 1
      2: evalcomplexbb10in -> evalcomplexbb8in : C'=A, D'=B, [ 29>=B ], cost: 1
      4: evalcomplexbb8in -> evalcomplexbb1in : [ D>=1+C ], cost: 1
      5: evalcomplexbb8in -> evalcomplexbb9in : [ C>=D ], cost: 1
      6: evalcomplexbb1in -> evalcomplexbb7in : E'=7+C, [ C>=6 && 2>=C ], cost: 1
      7: evalcomplexbb1in -> evalcomplexbb7in : E'=7+C, [ C>=6 ], cost: 1
      9: evalcomplexbb1in -> evalcomplexbb7in : E'=2+C, [ 5>=C ], cost: 1
     10: evalcomplexbb1in -> evalcomplexbb7in : E'=2+C, [ 5>=C && C>=11 ], cost: 1
      8: evalcomplexbb1in -> evalcomplexbb6in : E'=7+C, [ C>=6 && 5>=C ], cost: 1
     11: evalcomplexbb1in -> evalcomplexbb6in : E'=2+C, [ 5>=C && C>=8 ], cost: 1
     14: evalcomplexbb9in -> evalcomplexbb10in : A'=-10+C, B'=2+D, [], cost: 1
     12: evalcomplexbb7in -> evalcomplexbb8in : C'=E, D'=1+D, [], cost: 1
     13: evalcomplexbb6in -> evalcomplexbb8in : C'=E, D'=10+D, [], cost: 1


Applied simple chaining:
  Start location: evalcomplexstart
      0: evalcomplexstart -> evalcomplexbb10in : A'=B, B'=A, [], cost: 2
      2: evalcomplexbb10in -> evalcomplexbb8in : C'=A, D'=B, [ 29>=B ], cost: 1
      5: evalcomplexbb8in -> evalcomplexbb10in : A'=-10+C, B'=2+D, [ C>=D ], cost: 2
      4: evalcomplexbb8in -> evalcomplexbb1in : [ D>=1+C ], cost: 1
      6: evalcomplexbb1in -> evalcomplexbb7in : E'=7+C, [ C>=6 && 2>=C ], cost: 1
      7: evalcomplexbb1in -> evalcomplexbb7in : E'=7+C, [ C>=6 ], cost: 1
      9: evalcomplexbb1in -> evalcomplexbb7in : E'=2+C, [ 5>=C ], cost: 1
     10: evalcomplexbb1in -> evalcomplexbb7in : E'=2+C, [ 5>=C && C>=11 ], cost: 1
      8: evalcomplexbb1in -> evalcomplexbb6in : E'=7+C, [ C>=6 && 5>=C ], cost: 1
     11: evalcomplexbb1in -> evalcomplexbb6in : E'=2+C, [ 5>=C && C>=8 ], cost: 1
     12: evalcomplexbb7in -> evalcomplexbb8in : C'=E, D'=1+D, [], cost: 1
     13: evalcomplexbb6in -> evalcomplexbb8in : C'=E, D'=10+D, [], cost: 1


Applied chaining over branches and pruning:
  Start location: evalcomplexstart
      0: evalcomplexstart -> evalcomplexbb10in : A'=B, B'=A, [], cost: 2
      2: evalcomplexbb10in -> evalcomplexbb8in : C'=A, D'=B, [ 29>=B ], cost: 1
      5: evalcomplexbb8in -> evalcomplexbb10in : A'=-10+C, B'=2+D, [ C>=D ], cost: 2
     16: evalcomplexbb8in -> evalcomplexbb7in : E'=7+C, [ D>=1+C && C>=6 ], cost: 2
     17: evalcomplexbb8in -> evalcomplexbb7in : E'=2+C, [ D>=1+C && 5>=C ], cost: 2
     12: evalcomplexbb7in -> evalcomplexbb8in : C'=E, D'=1+D, [], cost: 1


Applied chaining over branches and pruning:
  Start location: evalcomplexstart
      0: evalcomplexstart -> evalcomplexbb10in : A'=B, B'=A, [], cost: 2
      2: evalcomplexbb10in -> evalcomplexbb8in : C'=A, D'=B, [ 29>=B ], cost: 1
      5: evalcomplexbb8in -> evalcomplexbb10in : A'=-10+C, B'=2+D, [ C>=D ], cost: 2
     18: evalcomplexbb8in -> evalcomplexbb8in : C'=7+C, D'=1+D, E'=7+C, [ D>=1+C && C>=6 ], cost: 3
     19: evalcomplexbb8in -> evalcomplexbb8in : C'=2+C, D'=1+D, E'=2+C, [ D>=1+C && 5>=C ], cost: 3


Try instantiation
  Start location: evalcomplexstart
      0: evalcomplexstart -> evalcomplexbb10in : A'=B, B'=A, [], cost: 2
      2: evalcomplexbb10in -> evalcomplexbb8in : C'=A, D'=B, [ 29>=B ], cost: 1
      5: evalcomplexbb8in -> evalcomplexbb10in : A'=-10+C, B'=2+D, [ C>=D ], cost: 2
     20: evalcomplexbb8in -> evalcomplexbb8in : C'=C+2*meter, D'=D+meter, E'=C+2*meter, [ 2*meter==1-C+D && D+meter>=C+2*meter && 7>=C+2*meter ], cost: 3*meter
     21: evalcomplexbb8in -> evalcomplexbb8in : C'=C+2*meter_1, D'=D+meter_1, E'=C+2*meter_1, [ 2*meter_1==7-C && 5>=C && D+meter_1>=C+2*meter_1 ], cost: 3*meter_1
     22: evalcomplexbb8in -> evalcomplexbb8in : C'=C+7*meter_2, D'=meter_2+D, E'=C+7*meter_2, [ 7*meter_2==6-C+D && C>=6 && meter_2+D>=-5+C+7*meter_2 ], cost: 3*meter_2

Eliminating 3 self-loops for location evalcomplexbb8in
  Removing the self-loops: 20 21 22.
Adding an epsilon transition (to model nonexecution of the loops): 26.

Removed all Self-loops using metering functions (where possible):
  Start location: evalcomplexstart
      0: evalcomplexstart -> evalcomplexbb10in : A'=B, B'=A, [], cost: 2
      2: evalcomplexbb10in -> evalcomplexbb8in : C'=A, D'=B, [ 29>=B ], cost: 1
     23: evalcomplexbb8in -> [10] : C'=C+2*meter, D'=D+meter, E'=C+2*meter, [ 2*meter==1-C+D && D+meter>=C+2*meter && 7>=C+2*meter ], cost: 3*meter
     24: evalcomplexbb8in -> [10] : C'=C+2*meter_1, D'=D+meter_1, E'=C+2*meter_1, [ 2*meter_1==7-C && 5>=C && D+meter_1>=C+2*meter_1 ], cost: 3*meter_1
     25: evalcomplexbb8in -> [10] : C'=C+7*meter_2, D'=meter_2+D, E'=C+7*meter_2, [ 7*meter_2==6-C+D && C>=6 && meter_2+D>=-5+C+7*meter_2 ], cost: 3*meter_2
     26: evalcomplexbb8in -> [10] : [], cost: 0
      5: [10] -> evalcomplexbb10in : A'=-10+C, B'=2+D, [ C>=D ], cost: 2


Applied chaining over branches and pruning:
  Start location: evalcomplexstart
      0: evalcomplexstart -> evalcomplexbb10in : A'=B, B'=A, [], cost: 2
     27: evalcomplexbb10in -> [10] : C'=2*meter+A, D'=meter+B, E'=2*meter+A, [ 29>=B && 2*meter==1+B-A && meter+B>=2*meter+A && 7>=2*meter+A ], cost: 1+3*meter
     28: evalcomplexbb10in -> [10] : C'=2*meter_1+A, D'=B+meter_1, E'=2*meter_1+A, [ 29>=B && 2*meter_1==7-A && 5>=A && B+meter_1>=2*meter_1+A ], cost: 1+3*meter_1
     29: evalcomplexbb10in -> [10] : C'=7*meter_2+A, D'=meter_2+B, E'=7*meter_2+A, [ 29>=B && 7*meter_2==6+B-A && A>=6 && meter_2+B>=-5+7*meter_2+A ], cost: 1+3*meter_2
     30: evalcomplexbb10in -> [10] : C'=A, D'=B, [ 29>=B ], cost: 1
      5: [10] -> evalcomplexbb10in : A'=-10+C, B'=2+D, [ C>=D ], cost: 2


Applied chaining over branches and pruning:
  Start location: evalcomplexstart
      0: evalcomplexstart -> evalcomplexbb10in : A'=B, B'=A, [], cost: 2
     31: evalcomplexbb10in -> evalcomplexbb10in : A'=-10+2*meter+A, B'=2+meter+B, C'=2*meter+A, D'=meter+B, E'=2*meter+A, [ 29>=B && 2*meter==1+B-A && meter+B>=2*meter+A && 7>=2*meter+A && 2*meter+A>=meter+B ], cost: 3+3*meter
     32: evalcomplexbb10in -> evalcomplexbb10in : A'=-10+2*meter_1+A, B'=2+B+meter_1, C'=2*meter_1+A, D'=B+meter_1, E'=2*meter_1+A, [ 29>=B && 2*meter_1==7-A && 5>=A && B+meter_1>=2*meter_1+A && 2*meter_1+A>=B+meter_1 ], cost: 3+3*meter_1
     33: evalcomplexbb10in -> evalcomplexbb10in : A'=-10+7*meter_2+A, B'=2+meter_2+B, C'=7*meter_2+A, D'=meter_2+B, E'=7*meter_2+A, [ 29>=B && 7*meter_2==6+B-A && A>=6 && meter_2+B>=-5+7*meter_2+A && 7*meter_2+A>=meter_2+B ], cost: 3+3*meter_2
     34: evalcomplexbb10in -> evalcomplexbb10in : A'=-10+A, B'=2+B, C'=A, D'=B, [ 29>=B && A>=B ], cost: 3


Try instantiation
  Start location: evalcomplexstart
      0: evalcomplexstart -> evalcomplexbb10in : A'=B, B'=A, [], cost: 2
     35: evalcomplexbb10in -> evalcomplexbb10in : A'=-10+7*meter_2+A, B'=2+meter_2+B, C'=7*meter_2+A, D'=meter_2+B, E'=7*meter_2+A, [ 29>=B && 7*meter_2==6+B-A && A>=6 && meter_2+B>=-5+7*meter_2+A && 7*meter_2+A>=meter_2+B ], cost: 3+3*meter_2
     36: evalcomplexbb10in -> evalcomplexbb10in : A'=-10+2*meter_1+A, B'=2+B+meter_1, C'=2*meter_1+A, D'=B+meter_1, E'=2*meter_1+A, [ 29>=B && 2*meter_1==7-A && 5>=A && B+meter_1>=2*meter_1+A && 2*meter_1+A>=B+meter_1 ], cost: 3+3*meter_1
     37: evalcomplexbb10in -> evalcomplexbb10in : A'=-10+2*meter+A, B'=2+meter+B, C'=2*meter+A, D'=meter+B, E'=2*meter+A, [ 29>=B && 2*meter==1+B-A && meter+B>=2*meter+A && 7>=2*meter+A && 2*meter+A>=meter+B ], cost: 3+3*meter
     38: evalcomplexbb10in -> evalcomplexbb10in : A'=-10*meter_3+A, B'=2*meter_3+B, C'=10-10*meter_3+A, D'=-2+2*meter_3+B, [ 2*meter_3==31-B && 29>=B && -10*meter_3+A>=-12+2*meter_3+B ], cost: 3*meter_3
     39: evalcomplexbb10in -> evalcomplexbb10in : A'=-10*meter_4+A, B'=B+2*meter_4, C'=10-10*meter_4+A, D'=-2+B+2*meter_4, [ 10*meter_4==10-B+A && A>=B && 31>=B+2*meter_4 && -10*meter_4+A>=-12+B+2*meter_4 ], cost: 3*meter_4
     40: evalcomplexbb10in -> evalcomplexbb10in : A'=A-10*meter_5, B'=B+2*meter_5, C'=10+A-10*meter_5, D'=-2+B+2*meter_5, [ 0 ], cost: 3*meter_5

Eliminating 6 self-loops for location evalcomplexbb10in
  Self-Loop 37 has the metering function: meter_6, resulting in the new transition 43.
  Self-Loop 39 has the metering function: meter_7, resulting in the new transition 45.
