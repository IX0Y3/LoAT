Trying to load file: perfect.koat

Initial Control flow graph problem:
  Start location: start0
      0: start -> stop : [ 1>=A && B==C && D==E && F==G && H==A ], cost: 1
      1: start -> lbl111 : B'=H, D'=1, F'=-1+H, [ A>=2 && B==C && D==E && F==G && H==A ], cost: 1
      3: lbl111 -> lbl111 : D'=-F+D, [ D>=F && A>=1+F && A>=F+D && A>=B && F>=1 && D>=0 && H==A ], cost: 1
      4: lbl111 -> lbl82 : D'=H, F'=-1+F, [ F>=1+D && 0>=1+D && A>=1+F && A>=F+D && A>=B && F>=1 && D>=0 && H==A ], cost: 1
      5: lbl111 -> lbl82 : D'=H, F'=-1+F, [ F>=1+D && D>=1 && A>=1+F && A>=F+D && A>=B && F>=1 && D>=0 && H==A ], cost: 1
      6: lbl111 -> lbl82 : B'=-F+B, D'=H, F'=-1+F, [ F>=1 && A>=1+F && A>=F && A>=B && D==0 && H==A ], cost: 1
      2: lbl16 -> stop : [ A>=2 && A>=1+B && F==0 && H==A && D==A ], cost: 1
      8: lbl82 -> lbl111 : D'=-F+D, [ F>=1 && A>=F && F>=0 && A>=2+F && A>=B && F+A>=1+B && H==A && D==A ], cost: 1
      7: lbl82 -> lbl16 : [ A>=2 && A>=B && A>=1+B && F==0 && H==A && D==A ], cost: 1
      9: lbl82 -> lbl82 : D'=H, F'=-1+F, [ F>=1+A && A>=1 && F>=0 && A>=2+F && A>=B && F+A>=1+B && H==A && D==A ], cost: 1
     10: lbl82 -> lbl82 : D'=H, F'=-1+F, [ F>=1 && 0>=1+A && F>=0 && A>=2+F && A>=B && F+A>=1+B && H==A && D==A ], cost: 1
     11: lbl82 -> lbl82 : B'=-F+B, D'=H, F'=-1+F, [ F>=1 && F>=0 && 0>=2+F && 0>=B && F>=1+B && D==0 && H==0 && A==0 ], cost: 1
     12: start0 -> start : B'=C, D'=E, F'=G, H'=A, [], cost: 1


Simplified the transitions:
  Start location: start0
      1: start -> lbl111 : B'=H, D'=1, F'=-1+H, [ A>=2 && B==C && D==E && F==G && H==A ], cost: 1
      3: lbl111 -> lbl111 : D'=-F+D, [ D>=F && A>=1+F && A>=F+D && A>=B && F>=1 && D>=0 && H==A ], cost: 1
      4: lbl111 -> lbl82 : D'=H, F'=-1+F, [ F>=1+D && 0>=1+D && A>=1+F && A>=F+D && A>=B && F>=1 && D>=0 ], cost: 1
      5: lbl111 -> lbl82 : D'=H, F'=-1+F, [ F>=1+D && D>=1 && A>=1+F && A>=F+D && A>=B && F>=1 && H==A ], cost: 1
      6: lbl111 -> lbl82 : B'=-F+B, D'=H, F'=-1+F, [ F>=1 && A>=1+F && A>=B && D==0 && H==A ], cost: 1
      8: lbl82 -> lbl111 : D'=-F+D, [ F>=1 && A>=2+F && A>=B && F+A>=1+B && H==A && D==A ], cost: 1
      9: lbl82 -> lbl82 : D'=H, F'=-1+F, [ F>=1+A && A>=1 && F>=0 && A>=2+F && A>=B && F+A>=1+B && H==A ], cost: 1
     10: lbl82 -> lbl82 : D'=H, F'=-1+F, [ F>=1 && 0>=1+A && A>=2+F && A>=B && F+A>=1+B && H==A ], cost: 1
     11: lbl82 -> lbl82 : B'=-F+B, D'=H, F'=-1+F, [ F>=1 && 0>=2+F && 0>=B && F>=1+B && D==0 && H==0 ], cost: 1
     12: start0 -> start : B'=C, D'=E, F'=G, H'=A, [], cost: 1

Eliminating 1 self-loops for location lbl111
  Removing the self-loops: 3.
Eliminating 3 self-loops for location lbl82
  Self-Loop 9 has unbounded runtime, resulting in the new transition 14.
  Self-Loop 10 has unbounded runtime, resulting in the new transition 15.
  Self-Loop 11 has unbounded runtime, resulting in the new transition 16.
  Removing the self-loops: 9 10 11.

Accelerated all simple loops using metering functions (where possible):
  Start location: start0
      1: start -> lbl111 : B'=H, D'=1, F'=-1+H, [ A>=2 && B==C && D==E && F==G && H==A ], cost: 1
     13: lbl111 -> lbl111 : D'=-F+D, [ D>=F && A>=1+F && A>=F+D && A>=B && F>=1 && D>=0 && H==A ], cost: 1
      4: lbl111 -> lbl82 : D'=H, F'=-1+F, [ F>=1+D && 0>=1+D && A>=1+F && A>=F+D && A>=B && F>=1 && D>=0 ], cost: 1
      5: lbl111 -> lbl82 : D'=H, F'=-1+F, [ F>=1+D && D>=1 && A>=1+F && A>=F+D && A>=B && F>=1 && H==A ], cost: 1
      6: lbl111 -> lbl82 : B'=-F+B, D'=H, F'=-1+F, [ F>=1 && A>=1+F && A>=B && D==0 && H==A ], cost: 1
      8: lbl82 -> lbl111 : D'=-F+D, [ F>=1 && A>=2+F && A>=B && F+A>=1+B && H==A && D==A ], cost: 1
     14: lbl82 -> lbl82 : [ F>=1+A && A>=1 && F>=0 && A>=2+F && A>=B && F+A>=1+B && H==A ], cost: INF
     15: lbl82 -> lbl82 : [ F>=1 && 0>=1+A && A>=2+F && A>=B && F+A>=1+B && H==A ], cost: INF
     16: lbl82 -> lbl82 : [ F>=1 && 0>=2+F && 0>=B && F>=1+B && D==0 && H==0 ], cost: INF
     12: start0 -> start : B'=C, D'=E, F'=G, H'=A, [], cost: 1


Chained simpled loops:
  Start location: start0
      1: start -> lbl111 : B'=H, D'=1, F'=-1+H, [ A>=2 && B==C && D==E && F==G && H==A ], cost: 1
     17: start -> lbl111 : B'=H, D'=2-H, F'=-1+H, [ A>=2 && B==C && D==E && F==G && H==A && 1>=-1+H && A>=H && A>=H && A>=H && -1+H>=1 && 1>=0 && H==A ], cost: 2
      4: lbl111 -> lbl82 : D'=H, F'=-1+F, [ F>=1+D && 0>=1+D && A>=1+F && A>=F+D && A>=B && F>=1 && D>=0 ], cost: 1
      5: lbl111 -> lbl82 : D'=H, F'=-1+F, [ F>=1+D && D>=1 && A>=1+F && A>=F+D && A>=B && F>=1 && H==A ], cost: 1
      6: lbl111 -> lbl82 : B'=-F+B, D'=H, F'=-1+F, [ F>=1 && A>=1+F && A>=B && D==0 && H==A ], cost: 1
      8: lbl82 -> lbl111 : D'=-F+D, [ F>=1 && A>=2+F && A>=B && F+A>=1+B && H==A && D==A ], cost: 1
     18: lbl82 -> lbl111 : D'=-2*F+D, [ F>=1 && A>=2+F && A>=B && F+A>=1+B && H==A && D==A && -F+D>=F && A>=1+F && A>=D && A>=B && F>=1 && -F+D>=0 && H==A ], cost: 2
     12: start0 -> start : B'=C, D'=E, F'=G, H'=A, [], cost: 1


Eliminated locations (branches):
  Start location: start0
     21: lbl111 -> lbl111 : D'=1-F+H, F'=-1+F, [ F>=1+D && D>=1 && A>=1+F && A>=F+D && A>=B && F>=1 && H==A && -1+F>=1 && A>=1+F && A>=B && -1+F+A>=1+B && H==A && H==A ], cost: 2
     22: lbl111 -> lbl111 : D'=2-2*F+H, F'=-1+F, [ F>=1+D && D>=1 && A>=1+F && A>=F+D && A>=B && F>=1 && H==A && -1+F>=1 && A>=1+F && A>=B && -1+F+A>=1+B && H==A && H==A && 1-F+H>=-1+F && A>=F && A>=H && A>=B && -1+F>=1 && 1-F+H>=0 && H==A ], cost: 3
     23: lbl111 -> lbl111 : B'=-F+B, D'=1-F+H, F'=-1+F, [ F>=1 && A>=1+F && A>=B && D==0 && H==A && -1+F>=1 && A>=1+F && A>=-F+B && -1+F+A>=1-F+B && H==A && H==A ], cost: 2
     24: lbl111 -> lbl111 : B'=-F+B, D'=2-2*F+H, F'=-1+F, [ F>=1 && A>=1+F && A>=B && D==0 && H==A && -1+F>=1 && A>=1+F && A>=-F+B && -1+F+A>=1-F+B && H==A && H==A && 1-F+H>=-1+F && A>=F && A>=H && A>=-F+B && -1+F>=1 && 1-F+H>=0 && H==A ], cost: 3
     19: start0 -> lbl111 : B'=A, D'=1, F'=-1+A, H'=A, [ A>=2 && C==C && E==E && G==G && A==A ], cost: 2
     20: start0 -> lbl111 : B'=A, D'=2-A, F'=-1+A, H'=A, [ A>=2 && C==C && E==E && G==G && A==A && 1>=-1+A && A>=A && A>=A && A>=A && -1+A>=1 && 1>=0 && A==A ], cost: 3

Eliminating 4 self-loops for location lbl111
  Removing the self-loops: 21 22 23 24.

Accelerated all simple loops using metering functions (where possible):
  Start location: start0
     25: lbl111 -> lbl111 : D'=1-F+H, F'=-1+F, [ F>=1+D && D>=1 && A>=1+F && A>=F+D && A>=B && H==A && -1+F>=1 && -1+F+A>=1+B ], cost: 2
     26: lbl111 -> lbl111 : D'=2-2*F+H, F'=-1+F, [ F>=1+D && D>=1 && A>=1+F && A>=F+D && A>=B && H==A && -1+F>=1 && -1+F+A>=1+B && 1-F+H>=-1+F && 1-F+H>=0 ], cost: 3
     27: lbl111 -> lbl111 : B'=-F+B, D'=1-F+H, F'=-1+F, [ A>=1+F && A>=B && D==0 && H==A && -1+F>=1 && A>=-F+B && -1+F+A>=1-F+B ], cost: 2
     28: lbl111 -> lbl111 : B'=-F+B, D'=2-2*F+H, F'=-1+F, [ A>=1+F && A>=B && D==0 && H==A && -1+F>=1 && A>=-F+B && -1+F+A>=1-F+B && 1-F+H>=-1+F && 1-F+H>=0 ], cost: 3
     19: start0 -> lbl111 : B'=A, D'=1, F'=-1+A, H'=A, [ A>=2 && C==C && E==E && G==G && A==A ], cost: 2
     20: start0 -> lbl111 : B'=A, D'=2-A, F'=-1+A, H'=A, [ A>=2 && C==C && E==E && G==G && A==A && 1>=-1+A && A>=A && A>=A && A>=A && -1+A>=1 && 1>=0 && A==A ], cost: 3


Chained simpled loops:
  Start location: start0
     19: start0 -> lbl111 : B'=A, D'=1, F'=-1+A, H'=A, [ A>=2 && C==C && E==E && G==G && A==A ], cost: 2
     20: start0 -> lbl111 : B'=A, D'=2-A, F'=-1+A, H'=A, [ A>=2 && C==C && E==E && G==G && A==A && 1>=-1+A && A>=A && A>=A && A>=A && -1+A>=1 && 1>=0 && A==A ], cost: 3
     29: start0 -> lbl111 : B'=A, D'=2, F'=-2+A, H'=A, [ A>=2 && C==C && E==E && G==G && A==A && -1+A>=2 && 1>=1 && A>=A && A>=A && A>=A && A==A && -2+A>=1 && -2+2*A>=1+A ], cost: 4
     30: start0 -> lbl111 : B'=A, D'=4-A, F'=-2+A, H'=A, [ A>=2 && C==C && E==E && G==G && A==A && -1+A>=2 && 1>=1 && A>=A && A>=A && A>=A && A==A && -2+A>=1 && -2+2*A>=1+A && 2>=-2+A && 2>=0 ], cost: 5


Pruned:
  Start location: start0
    <empty>


Final control flow graph problem, now checking costs for infinitely many models:
  Start location: start0
    <empty>


Computing complexity for remaining 0 transitions.


The final runtime is determined by this resulting transition:
  Final Guard: 
  Final Cost:  1

Obtained the following complexity w.r.t. the length of the input n:
  Complexity class: const
  Complexity value: 0

WORST_CASE(Omega(1),?)
