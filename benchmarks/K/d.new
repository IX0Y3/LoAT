Trying to load file: d.koat

Initial Control flow graph problem:
  Start location: f0
      0: f0 -> f1 : [], cost: 1
      1: f1 -> f1 : A'=free_1, B'=free, C'=B, [ A>=1 && free_2>=1 && B==0 ], cost: 1


Simplified the transitions:
  Start location: f0
      0: f0 -> f1 : [], cost: 1
      1: f1 -> f1 : A'=free_1, B'=free, C'=B, [ A>=1 && B==0 ], cost: 1


Try instantiation
  Start location: f0
      0: f0 -> f1 : [], cost: 1
      2: f1 -> f1 : [ B>=0 && A>=1 && B<=0 ], cost: INF

Eliminating 1 self-loops for location f1
  Removing the self-loops: 2.

Removed all Self-loops using metering functions (where possible):
  Start location: f0
      0: f0 -> f1 : [], cost: 1
      3: f1 -> [2] : [ B>=0 && A>=1 && B<=0 ], cost: INF


Applied simple chaining:
  Start location: f0
      0: f0 -> [2] : [ B>=0 && A>=1 && B<=0 ], cost: INF


Final control flow graph problem, now checking costs for infinitely many models:
  Start location: f0
      0: f0 -> [2] : [ B>=0 && A>=1 && B<=0 ], cost: INF


Computing complexity for remaining 1 transitions.

Found new complexity INF, because: INF sat.


The final runtime is determined by this resulting transition:
  Final Guard: B>=0 && A>=1 && B<=0
  Final Cost:  INF

Obtained the following complexity w.r.t. the length of the input n:
  Complexity class: INF
  Complexity value: INF

WORST_CASE(INF,?)
