Trying to load file: speedpldi2.koat

Initial Control flow graph problem:
  Start location: evalspeedpldi2start
      0: evalspeedpldi2start -> evalspeedpldi2entryin : [], cost: 1
      1: evalspeedpldi2entryin -> evalspeedpldi2bb5in : A'=B, B'=0, C'=A, [ A>=0 && B>=1 ], cost: 1
      2: evalspeedpldi2entryin -> evalspeedpldi2returnin : [ 0>=1+A ], cost: 1
      3: evalspeedpldi2entryin -> evalspeedpldi2returnin : [ 0>=B ], cost: 1
      5: evalspeedpldi2bb5in -> evalspeedpldi2returnin : [ 0>=C ], cost: 1
      4: evalspeedpldi2bb5in -> evalspeedpldi2bb2in : [ C>=1 ], cost: 1
      9: evalspeedpldi2returnin -> evalspeedpldi2stop : [], cost: 1
      7: evalspeedpldi2bb2in -> evalspeedpldi2bb5in : B'=0, [ B>=A ], cost: 1
      6: evalspeedpldi2bb2in -> evalspeedpldi2bb3in : [ A>=1+B ], cost: 1
      8: evalspeedpldi2bb3in -> evalspeedpldi2bb5in : B'=1+B, C'=-1+C, [], cost: 1


Simplified the transitions:
  Start location: evalspeedpldi2start
      0: evalspeedpldi2start -> evalspeedpldi2entryin : [], cost: 1
      1: evalspeedpldi2entryin -> evalspeedpldi2bb5in : A'=B, B'=0, C'=A, [ A>=0 && B>=1 ], cost: 1
      4: evalspeedpldi2bb5in -> evalspeedpldi2bb2in : [ C>=1 ], cost: 1
      7: evalspeedpldi2bb2in -> evalspeedpldi2bb5in : B'=0, [ B>=A ], cost: 1
      6: evalspeedpldi2bb2in -> evalspeedpldi2bb3in : [ A>=1+B ], cost: 1
      8: evalspeedpldi2bb3in -> evalspeedpldi2bb5in : B'=1+B, C'=-1+C, [], cost: 1


Applied simple chaining:
  Start location: evalspeedpldi2start
      0: evalspeedpldi2start -> evalspeedpldi2bb5in : A'=B, B'=0, C'=A, [ A>=0 && B>=1 ], cost: 2
      4: evalspeedpldi2bb5in -> evalspeedpldi2bb2in : [ C>=1 ], cost: 1
      7: evalspeedpldi2bb2in -> evalspeedpldi2bb5in : B'=0, [ B>=A ], cost: 1
      6: evalspeedpldi2bb2in -> evalspeedpldi2bb5in : B'=1+B, C'=-1+C, [ A>=1+B ], cost: 2


Applied chaining over branches and pruning:
  Start location: evalspeedpldi2start
      0: evalspeedpldi2start -> evalspeedpldi2bb5in : A'=B, B'=0, C'=A, [ A>=0 && B>=1 ], cost: 2
     10: evalspeedpldi2bb5in -> evalspeedpldi2bb5in : B'=0, [ C>=1 && B>=A ], cost: 2
     11: evalspeedpldi2bb5in -> evalspeedpldi2bb5in : B'=1+B, C'=-1+C, [ C>=1 && A>=1+B ], cost: 3


Try instantiation
  Start location: evalspeedpldi2start
      0: evalspeedpldi2start -> evalspeedpldi2bb5in : A'=B, B'=0, C'=A, [ A>=0 && B>=1 ], cost: 2
     12: evalspeedpldi2bb5in -> evalspeedpldi2bb5in : B'=B+C, C'=0, [ C>=1 && A>=B+C ], cost: 3*C
     13: evalspeedpldi2bb5in -> evalspeedpldi2bb5in : B'=A, C'=B-A+C, [ A>=1+B && B-A+C>=0 ], cost: -3*B+3*A
     14: evalspeedpldi2bb5in -> evalspeedpldi2bb5in : [ B>=A && C>=1 && 0>=A ], cost: INF

Eliminating 3 self-loops for location evalspeedpldi2bb5in
  Removing the self-loops: 12 13 14.
Adding an epsilon transition (to model nonexecution of the loops): 18.

Removed all Self-loops using metering functions (where possible):
  Start location: evalspeedpldi2start
      0: evalspeedpldi2start -> evalspeedpldi2bb5in : A'=B, B'=0, C'=A, [ A>=0 && B>=1 ], cost: 2
     15: evalspeedpldi2bb5in -> [7] : B'=B+C, C'=0, [ C>=1 && A>=B+C ], cost: 3*C
     16: evalspeedpldi2bb5in -> [7] : B'=A, C'=B-A+C, [ A>=1+B && B-A+C>=0 ], cost: -3*B+3*A
     17: evalspeedpldi2bb5in -> [7] : [ B>=A && C>=1 && 0>=A ], cost: INF
     18: evalspeedpldi2bb5in -> [7] : [], cost: 0


Applied chaining over branches and pruning:
  Start location: evalspeedpldi2start
     19: evalspeedpldi2start -> [7] : A'=B, B'=A, C'=0, [ A>=0 && B>=1 && A>=1 && B>=A ], cost: 2+3*A
     20: evalspeedpldi2start -> [7] : A'=B, B'=B, C'=-B+A, [ A>=0 && B>=1 && B>=1 && -B+A>=0 ], cost: 2+3*B


Final control flow graph problem, now checking costs for infinitely many models:
  Start location: evalspeedpldi2start
     19: evalspeedpldi2start -> [7] : A'=B, B'=A, C'=0, [ A>=0 && B>=1 && A>=1 && B>=A ], cost: 2+3*A
     20: evalspeedpldi2start -> [7] : A'=B, B'=B, C'=-B+A, [ A>=0 && B>=1 && B>=1 && -B+A>=0 ], cost: 2+3*B


Computing complexity for remaining 2 transitions.

  Found configuration with infinitely models for cost: 2+3*A
  and guard: A>=0 && B>=1 && A>=1 && B>=A:
  B: Pos, A: Pos, where: B > A

Found new complexity n^1, because: Found infinity configuration.


The final runtime is determined by this resulting transition:
  Final Guard: A>=0 && B>=1 && A>=1 && B>=A
  Final Cost:  2+3*A

Obtained the following complexity w.r.t. the length of the input n:
  Complexity class: n^1
  Complexity value: 1

WORST_CASE(Omega(n^1),?)
