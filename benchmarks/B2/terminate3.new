Trying to load file: terminate3.koat

Initial Control flow graph problem:
  Start location: start0
      0: start -> stop : [ A>=101 && B==C && D==E && F==A && G==H ], cost: 1
      1: start -> stop : [ E>=1+C && B==C && D==E && F==A && G==H ], cost: 1
      2: start -> lbl72 : B'=-1+B, D'=1+F, F'=D, G'=F, [ C>=E && 100>=A && B==C && D==E && F==A && G==H ], cost: 1
      3: lbl72 -> stop : [ F>=101 && 100>=A && 101+F+B>=E+A+C && 1+B>=F && C>=1+B && C>=E && 1+F+B+G==E+A+C && D+F+B==E+A+C ], cost: 1
      4: lbl72 -> stop : [ E+A+C>=1+F+2*B && 100>=A && 101+F+B>=E+A+C && 1+B>=F && C>=1+B && C>=E && 1+F+B+G==E+A+C && D+F+B==E+A+C ], cost: 1
      5: lbl72 -> lbl72 : B'=-1+B, D'=1+F, F'=D, G'=F, [ F+2*B>=E+A+C && 100>=F && 100>=A && 101+F+B>=E+A+C && 1+B>=F && C>=1+B && C>=E && 1+F+B+G==E+A+C && D+F+B==E+A+C ], cost: 1
      6: start0 -> start : B'=C, D'=E, F'=A, G'=H, [], cost: 1


Simplified the transitions:
  Start location: start0
      2: start -> lbl72 : B'=-1+B, D'=1+F, F'=D, G'=F, [ C>=E && 100>=A && B==C && D==E && F==A && G==H ], cost: 1
      5: lbl72 -> lbl72 : B'=-1+B, D'=1+F, F'=D, G'=F, [ F+2*B>=E+A+C && 100>=F && 100>=A && 101+F+B>=E+A+C && 1+B>=F && C>=1+B && C>=E && 1+F+B+G==E+A+C && D+F+B==E+A+C ], cost: 1
      6: start0 -> start : B'=C, D'=E, F'=A, G'=H, [], cost: 1


Try instantiation
  Start location: start0
      2: start -> lbl72 : B'=-1+B, D'=1+F, F'=D, G'=F, [ C>=E && 100>=A && B==C && D==E && F==A && G==H ], cost: 1
      7: lbl72 -> lbl72 : B'=-1+B, D'=1+F, F'=D, G'=F, [ F+2*B>=E+A+C && 100>=F && 100>=A && 101+F+B>=E+A+C && 1+B>=F && C>=1+B && C>=E && 1+F+B+G==E+A+C && D+F+B==E+A+C ], cost: 1
      6: start0 -> start : B'=C, D'=E, F'=A, G'=H, [], cost: 1

Eliminating 1 self-loops for location lbl72
  Self-Loop 7 has the metering function: -D-F+E-B+A+C, resulting in the new transition 8.
  Removing the self-loops: 7.

Removed all Self-loops using metering functions (where possible):
  Start location: start0
      2: start -> lbl72 : B'=-1+B, D'=1+F, F'=D, G'=F, [ C>=E && 100>=A && B==C && D==E && F==A && G==H ], cost: 1
      8: lbl72 -> [4] : B'=D+F-E+2*B-A-C, D'=-F+E-B+A+C, F'=-1-F+E-B+A+C, G'=-1-F+E-B+A+C, [ F+2*B>=E+A+C && 100>=F && 100>=A && 101+F+B>=E+A+C && 1+B>=F && C>=1+B && C>=E && 1+F+B+G==E+A+C && D+F+B==E+A+C && D==F && D==G ], cost: -D-F+E-B+A+C
      6: start0 -> start : B'=C, D'=E, F'=A, G'=H, [], cost: 1


Applied simple chaining:
  Start location: start0
      8: lbl72 -> [4] : B'=D+F-E+2*B-A-C, D'=-F+E-B+A+C, F'=-1-F+E-B+A+C, G'=-1-F+E-B+A+C, [ F+2*B>=E+A+C && 100>=F && 100>=A && 101+F+B>=E+A+C && 1+B>=F && C>=1+B && C>=E && 1+F+B+G==E+A+C && D+F+B==E+A+C && D==F && D==G ], cost: -D-F+E-B+A+C
      6: start0 -> lbl72 : B'=-1+C, D'=1+A, F'=E, G'=A, [ C>=E && 100>=A && C==C && E==E && A==A && H==H ], cost: 2


Applied chaining over branches and pruning:
  Start location: start0
    <empty>


Final control flow graph problem, now checking costs for infinitely many models:
  Start location: start0
    <empty>


Computing complexity for remaining 0 transitions.


The final runtime is determined by this resulting transition:
  Final Guard: 
  Final Cost:  1

Obtained the following complexity w.r.t. the length of the input n:
  Complexity class: const
  Complexity value: 0

WORST_CASE(Omega(1),?)
