Trying to load file: exmini.koat

Initial Control flow graph problem:
  Start location: start0
      0: start -> stop : [ A>=101 && B==C && D==E && F==G && H==A ], cost: 1
      1: start -> stop : [ G>=1+E && B==C && D==E && F==G && H==A ], cost: 1
      2: start -> lbl71 : B'=H, D'=-1+D, F'=1+H, H'=F, [ E>=G && 100>=A && B==C && D==E && F==G && H==A ], cost: 1
      3: lbl71 -> stop : [ E+G+A>=102+D+B && E>=1+D && 100>=A && E>=G && 2+2*D+B>=E+G+A && 100>=B && F==1+B && 1+H+D+B==E+G+A ], cost: 1
      4: lbl71 -> stop : [ B>=D && E>=1+D && 100>=A && E>=G && 2+2*D+B>=E+G+A && 100>=B && F==1+B && 1+H+D+B==E+G+A ], cost: 1
      5: lbl71 -> lbl71 : B'=H, D'=-1+D, F'=1+H, H'=F, [ D>=1+B && 101+D+B>=E+G+A && E>=1+D && 100>=A && E>=G && 2+2*D+B>=E+G+A && 100>=B && F==1+B && 1+H+D+B==E+G+A ], cost: 1
      6: start0 -> start : B'=C, D'=E, F'=G, H'=A, [], cost: 1


Simplified the transitions:
  Start location: start0
      2: start -> lbl71 : B'=H, D'=-1+D, F'=1+H, H'=F, [ E>=G && 100>=A && B==C && D==E && F==G && H==A ], cost: 1
      5: lbl71 -> lbl71 : B'=H, D'=-1+D, F'=1+H, H'=F, [ D>=1+B && 101+D+B>=E+G+A && E>=1+D && 100>=A && E>=G && 2+2*D+B>=E+G+A && 100>=B && F==1+B && 1+H+D+B==E+G+A ], cost: 1
      6: start0 -> start : B'=C, D'=E, F'=G, H'=A, [], cost: 1


Try instantiation
  Start location: start0
      2: start -> lbl71 : B'=H, D'=-1+D, F'=1+H, H'=F, [ E>=G && 100>=A && B==C && D==E && F==G && H==A ], cost: 1
      7: lbl71 -> lbl71 : B'=H, D'=-1+D, F'=1+H, H'=F, [ D>=1+B && 101+D+B>=E+G+A && E>=1+D && 100>=A && E>=G && 2+2*D+B>=E+G+A && 100>=B && F==1+B && 1+H+D+B==E+G+A ], cost: 1
      6: start0 -> start : B'=C, D'=E, F'=G, H'=A, [], cost: 1

Eliminating 1 self-loops for location lbl71
  Self-Loop 7 has the metering function: -1-2*H-2*D-F+2*E-B+2*G+2*A, resulting in the new transition 8.
  Removing the self-loops: 7.

Removed all Self-loops using metering functions (where possible):
  Start location: start0
      2: start -> lbl71 : B'=H, D'=-1+D, F'=1+H, H'=F, [ E>=G && 100>=A && B==C && D==E && F==G && H==A ], cost: 1
      8: lbl71 -> [4] : B'=B, D'=1+2*H+3*D+F-2*E+B-2*G-2*A, F'=1+B, H'=B, [ D>=1+B && 101+D+B>=E+G+A && E>=1+D && 100>=A && E>=G && 2+2*D+B>=E+G+A && 100>=B && F==1+B && 1+H+D+B==E+G+A && B==F && B==H ], cost: -1-2*H-2*D-F+2*E-B+2*G+2*A
      6: start0 -> start : B'=C, D'=E, F'=G, H'=A, [], cost: 1


Applied simple chaining:
  Start location: start0
      8: lbl71 -> [4] : B'=B, D'=1+2*H+3*D+F-2*E+B-2*G-2*A, F'=1+B, H'=B, [ D>=1+B && 101+D+B>=E+G+A && E>=1+D && 100>=A && E>=G && 2+2*D+B>=E+G+A && 100>=B && F==1+B && 1+H+D+B==E+G+A && B==F && B==H ], cost: -1-2*H-2*D-F+2*E-B+2*G+2*A
      6: start0 -> lbl71 : B'=A, D'=-1+E, F'=1+A, H'=G, [ E>=G && 100>=A && C==C && E==E && G==G && A==A ], cost: 2


Applied chaining over branches and pruning:
  Start location: start0
    <empty>


Final control flow graph problem, now checking costs for infinitely many models:
  Start location: start0
    <empty>


Computing complexity for remaining 0 transitions.


The final runtime is determined by this resulting transition:
  Final Guard: 
  Final Cost:  1

Obtained the following complexity w.r.t. the length of the input n:
  Complexity class: const
  Complexity value: 0

WORST_CASE(Omega(1),?)
