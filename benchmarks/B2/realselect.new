Trying to load file: realselect.koat

Initial Control flow graph problem:
  Start location: start0
      0: start -> stop : L'=0, [ 1>=A && B==C && D==E && F==G && H==Q && J==K && L==M && N==A ], cost: 1
      1: start -> lbl53 : D'=1, H'=0, J'=2, L'=0, [ A>=2 && B==C && D==E && F==G && H==Q && J==K && L==M && N==A ], cost: 1
      2: start -> lbl53 : D'=1, H'=1, J'=2, L'=0, [ A>=2 && B==C && D==E && F==G && H==Q && J==K && L==M && N==A ], cost: 1
      5: lbl53 -> lbl53 : D'=J, J'=1+J, [ A>=1+J && D>=H && D>=1 && A>=J && J>=1+D && 1+H>=D && 1+L==D && N==A ], cost: 1
      6: lbl53 -> lbl53 : D'=J, H'=J, J'=1+J, [ A>=1+J && D>=H && D>=1 && A>=J && J>=1+D && 1+H>=D && 1+L==D && N==A ], cost: 1
      4: lbl53 -> lbl91 : F'=free, [ D>=H && D>=1 && A>=1+D && 1+H>=D && J==A && 1+L==D && N==A ], cost: 1
      3: lbl91 -> lbl13 : B'=L, L'=1+L, [ D>=H && D>=1 && 1+H>=D && A>=1+D && N==A && 1+L==D && J==A ], cost: 1
      7: lbl13 -> stop : [ 2+H>=A && A>=2 && A>=1+H && 1+L==A && 2+B==A && 1+D==A && N==A && J==A ], cost: 1
      8: lbl13 -> lbl53 : D'=1+L, H'=L, J'=2+L, [ A>=3+B && A>=2+B && H>=B && B>=0 && 1+B>=H && L==1+B && D==1+B && N==A && J==A ], cost: 1
      9: lbl13 -> lbl53 : D'=1+L, H'=1+L, J'=2+L, [ A>=3+B && A>=2+B && H>=B && B>=0 && 1+B>=H && L==1+B && D==1+B && N==A && J==A ], cost: 1
     10: start0 -> start : B'=C, D'=E, F'=G, H'=Q, J'=K, L'=M, N'=A, [], cost: 1


Simplified the transitions:
  Start location: start0
      1: start -> lbl53 : D'=1, H'=0, J'=2, L'=0, [ A>=2 && B==C && D==E && F==G && H==Q && J==K && L==M && N==A ], cost: 1
      2: start -> lbl53 : D'=1, H'=1, J'=2, L'=0, [ A>=2 && B==C && D==E && F==G && H==Q && J==K && L==M && N==A ], cost: 1
      5: lbl53 -> lbl53 : D'=J, J'=1+J, [ A>=1+J && D>=H && D>=1 && J>=1+D && 1+H>=D && 1+L==D && N==A ], cost: 1
      6: lbl53 -> lbl53 : D'=J, H'=J, J'=1+J, [ A>=1+J && D>=H && D>=1 && J>=1+D && 1+H>=D && 1+L==D && N==A ], cost: 1
      4: lbl53 -> lbl91 : F'=free, [ D>=H && D>=1 && A>=1+D && 1+H>=D && J==A && 1+L==D && N==A ], cost: 1
      3: lbl91 -> lbl13 : B'=L, L'=1+L, [ D>=H && D>=1 && 1+H>=D && A>=1+D && N==A && 1+L==D && J==A ], cost: 1
      8: lbl13 -> lbl53 : D'=1+L, H'=L, J'=2+L, [ A>=3+B && H>=B && B>=0 && 1+B>=H && L==1+B && D==1+B && N==A && J==A ], cost: 1
      9: lbl13 -> lbl53 : D'=1+L, H'=1+L, J'=2+L, [ A>=3+B && H>=B && B>=0 && 1+B>=H && L==1+B && D==1+B && N==A && J==A ], cost: 1
     10: start0 -> start : B'=C, D'=E, F'=G, H'=Q, J'=K, L'=M, N'=A, [], cost: 1


Try instantiation
  Start location: start0
      1: start -> lbl53 : D'=1, H'=0, J'=2, L'=0, [ A>=2 && B==C && D==E && F==G && H==Q && J==K && L==M && N==A ], cost: 1
      2: start -> lbl53 : D'=1, H'=1, J'=2, L'=0, [ A>=2 && B==C && D==E && F==G && H==Q && J==K && L==M && N==A ], cost: 1
     11: lbl53 -> lbl53 : D'=-1+A, H'=-1+A, J'=A, [ L>=-3+A && N>=A && A>=1+J && D>=H && D>=1 && J>=1+D && H>=-1+D && L<=-1+D && N<=A && L>=-1+D && A>=3 && L<=-3+A ], cost: -J+A
     12: lbl53 -> lbl53 : D'=-1+A, J'=A, [ L>=-3+A && N>=A && A>=1+J && D>=H && D>=1 && J>=1+D && H>=-1+D && L<=-1+D && N<=A && L>=-1+D && A>=2+H && A>=3 && H>=-3+A && L<=-3+A ], cost: -J+A
     13: lbl53 -> lbl53 : D'=-1+J, J'=J, [ L>=-3+J && N>=A && A>=1+J && D>=H && D>=1 && J>=1+D && H>=-1+D && L<=-1+D && N<=A && L>=-1+D && A>=J && J>=2+H && J>=3 && H>=-3+J && L<=-3+J ], cost: 0
     14: lbl53 -> lbl53 : D'=1+H, J'=2+H, [ L>=-1+H && N>=A && A>=1+J && D>=H && D>=1 && J>=1+D && H>=-1+D && L<=-1+D && N<=A && L>=-1+D && A>=2+H && H>=1 && L<=-1+H ], cost: 2-J+H
      4: lbl53 -> lbl91 : F'=free, [ D>=H && D>=1 && A>=1+D && 1+H>=D && J==A && 1+L==D && N==A ], cost: 1
      3: lbl91 -> lbl13 : B'=L, L'=1+L, [ D>=H && D>=1 && 1+H>=D && A>=1+D && N==A && 1+L==D && J==A ], cost: 1
      8: lbl13 -> lbl53 : D'=1+L, H'=L, J'=2+L, [ A>=3+B && H>=B && B>=0 && 1+B>=H && L==1+B && D==1+B && N==A && J==A ], cost: 1
      9: lbl13 -> lbl53 : D'=1+L, H'=1+L, J'=2+L, [ A>=3+B && H>=B && B>=0 && 1+B>=H && L==1+B && D==1+B && N==A && J==A ], cost: 1
     10: start0 -> start : B'=C, D'=E, F'=G, H'=Q, J'=K, L'=M, N'=A, [], cost: 1

Eliminating 4 self-loops for location lbl53
  Self-Loop 11 has the metering function: -2-2*J+D-L+2*A, resulting in the new transition 15.
  Self-Loop 12 has the metering function: -2-2*J+D-L+2*A, resulting in the new transition 16.
  Self-Loop 13 has the metering function: 5-J-D+2*L, resulting in the new transition 17.
  Self-Loop 14 has the metering function: 2-D+2*L-H, resulting in the new transition 18.
  Removing the self-loops: 11 12 13 14.

Removed all Self-loops using metering functions (where possible):
  Start location: start0
      1: start -> lbl53 : D'=1, H'=0, J'=2, L'=0, [ A>=2 && B==C && D==E && F==G && H==Q && J==K && L==M && N==A ], cost: 1
      2: start -> lbl53 : D'=1, H'=1, J'=2, L'=0, [ A>=2 && B==C && D==E && F==G && H==Q && J==K && L==M && N==A ], cost: 1
     15: lbl53 -> [6] : D'=-1+A, H'=-1+A, J'=A, [ -3-L+A==0 && A-N==0 && A>=1+J && D>=H && D>=1 && J>=1+D && H>=-1+D && 1-D+L==0 && A>=3 ], cost: 0
     16: lbl53 -> [6] : D'=-1+A, J'=A, [ -3-L+A==0 && A-N==0 && A>=1+J && D>=H && D>=1 && J>=1+D && H>=-1+D && 1-D+L==0 && A>=2+H && A>=3 && H>=-3+A ], cost: 0
     17: lbl53 -> [6] : D'=-1+J, [ -3+J-L==0 && A-N==0 && A>=1+J && D>=H && D>=1 && J>=1+D && H>=-1+D && 1-D+L==0 && J>=2+H && J>=3 && H>=-3+J ], cost: 0
     18: lbl53 -> [6] : D'=1+H, J'=2+H, [ -1-L+H==0 && A-N==0 && A>=1+J && D>=H && D>=1 && J>=1+D && H>=-1+D && 1-D+L==0 && A>=2+H && H>=1 ], cost: 0
      3: lbl91 -> lbl13 : B'=L, L'=1+L, [ D>=H && D>=1 && 1+H>=D && A>=1+D && N==A && 1+L==D && J==A ], cost: 1
      8: lbl13 -> lbl53 : D'=1+L, H'=L, J'=2+L, [ A>=3+B && H>=B && B>=0 && 1+B>=H && L==1+B && D==1+B && N==A && J==A ], cost: 1
      9: lbl13 -> lbl53 : D'=1+L, H'=1+L, J'=2+L, [ A>=3+B && H>=B && B>=0 && 1+B>=H && L==1+B && D==1+B && N==A && J==A ], cost: 1
     10: start0 -> start : B'=C, D'=E, F'=G, H'=Q, J'=K, L'=M, N'=A, [], cost: 1
      4: [6] -> lbl91 : F'=free, [ D>=H && D>=1 && A>=1+D && 1+H>=D && J==A && 1+L==D && N==A ], cost: 1


Applied simple chaining:
  Start location: start0
      1: start -> lbl53 : D'=1, H'=0, J'=2, L'=0, [ A>=2 && B==C && D==E && F==G && H==Q && J==K && L==M && N==A ], cost: 1
      2: start -> lbl53 : D'=1, H'=1, J'=2, L'=0, [ A>=2 && B==C && D==E && F==G && H==Q && J==K && L==M && N==A ], cost: 1
     15: lbl53 -> [6] : D'=-1+A, H'=-1+A, J'=A, [ -3-L+A==0 && A-N==0 && A>=1+J && D>=H && D>=1 && J>=1+D && H>=-1+D && 1-D+L==0 && A>=3 ], cost: 0
     16: lbl53 -> [6] : D'=-1+A, J'=A, [ -3-L+A==0 && A-N==0 && A>=1+J && D>=H && D>=1 && J>=1+D && H>=-1+D && 1-D+L==0 && A>=2+H && A>=3 && H>=-3+A ], cost: 0
     17: lbl53 -> [6] : D'=-1+J, [ -3+J-L==0 && A-N==0 && A>=1+J && D>=H && D>=1 && J>=1+D && H>=-1+D && 1-D+L==0 && J>=2+H && J>=3 && H>=-3+J ], cost: 0
     18: lbl53 -> [6] : D'=1+H, J'=2+H, [ -1-L+H==0 && A-N==0 && A>=1+J && D>=H && D>=1 && J>=1+D && H>=-1+D && 1-D+L==0 && A>=2+H && H>=1 ], cost: 0
      8: lbl13 -> lbl53 : D'=1+L, H'=L, J'=2+L, [ A>=3+B && H>=B && B>=0 && 1+B>=H && L==1+B && D==1+B && N==A && J==A ], cost: 1
      9: lbl13 -> lbl53 : D'=1+L, H'=1+L, J'=2+L, [ A>=3+B && H>=B && B>=0 && 1+B>=H && L==1+B && D==1+B && N==A && J==A ], cost: 1
     10: start0 -> start : B'=C, D'=E, F'=G, H'=Q, J'=K, L'=M, N'=A, [], cost: 1
      4: [6] -> lbl13 : B'=L, F'=free, L'=1+L, [ D>=H && D>=1 && A>=1+D && 1+H>=D && J==A && 1+L==D && N==A && D>=H && D>=1 && 1+H>=D && A>=1+D && N==A && 1+L==D && J==A ], cost: 2


Applied chaining over branches and pruning:
  Start location: start0
    <empty>


Final control flow graph problem, now checking costs for infinitely many models:
  Start location: start0
    <empty>


Computing complexity for remaining 0 transitions.


The final runtime is determined by this resulting transition:
  Final Guard: 
  Final Cost:  1

Obtained the following complexity w.r.t. the length of the input n:
  Complexity class: const
  Complexity value: 0

WORST_CASE(Omega(1),?)
