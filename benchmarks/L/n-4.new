Trying to load file: n-4.koat

Initial Control flow graph problem:
  Start location: f5
      0: f5 -> f300 : [], cost: 1
      9: f300 -> f300 : C'=1+C, [ A>=1+C && A>=B ], cost: 1
     10: f300 -> f4 : A'=1+A, D'=free_5, [ free_5>=1 && A>=1+C && B>=1+A ], cost: 1
     11: f300 -> f4 : A'=1+A, D'=free_6, [ 0>=1+free_6 && A>=1+C && B>=1+A ], cost: 1
     12: f300 -> f2 : D'=0, [ A>=1+C && B>=1+A ], cost: 1
      8: f300 -> f1 : E'=free_4, [ C>=A ], cost: 1
      1: f4 -> f300 : C'=1+C, [ A>=B ], cost: 1
      2: f4 -> f4 : A'=1+A, D'=free, [ free>=1 && B>=1+A ], cost: 1
      3: f4 -> f4 : A'=1+A, D'=free_1, [ 0>=1+free_1 && B>=1+A ], cost: 1
      4: f4 -> f2 : D'=0, [ B>=1+A ], cost: 1
      5: f2 -> f4 : A'=1+A, D'=free_2, [ free_2>=1 && B>=1+A ], cost: 1
      6: f2 -> f4 : A'=1+A, D'=free_3, [ 0>=1+free_3 && B>=1+A ], cost: 1
      7: f2 -> f2 : D'=0, [ B>=1+A ], cost: 1


Simplified the transitions:
  Start location: f5
      0: f5 -> f300 : [], cost: 1
      9: f300 -> f300 : C'=1+C, [ A>=1+C && A>=B ], cost: 1
     10: f300 -> f4 : A'=1+A, D'=free_5, [ free_5>=1 && A>=1+C && B>=1+A ], cost: 1
     11: f300 -> f4 : A'=1+A, D'=free_6, [ 0>=1+free_6 && A>=1+C && B>=1+A ], cost: 1
     12: f300 -> f2 : D'=0, [ A>=1+C && B>=1+A ], cost: 1
      1: f4 -> f300 : C'=1+C, [ A>=B ], cost: 1
      2: f4 -> f4 : A'=1+A, D'=free, [ free>=1 && B>=1+A ], cost: 1
      3: f4 -> f4 : A'=1+A, D'=free_1, [ 0>=1+free_1 && B>=1+A ], cost: 1
      4: f4 -> f2 : D'=0, [ B>=1+A ], cost: 1
      5: f2 -> f4 : A'=1+A, D'=free_2, [ free_2>=1 && B>=1+A ], cost: 1
      6: f2 -> f4 : A'=1+A, D'=free_3, [ 0>=1+free_3 && B>=1+A ], cost: 1
      7: f2 -> f2 : D'=0, [ B>=1+A ], cost: 1


Try instantiation
  Start location: f5
      0: f5 -> f300 : [], cost: 1
     13: f300 -> f300 : C'=A, [ A>=1+C && A>=B ], cost: -C+A
     10: f300 -> f4 : A'=1+A, D'=free_5, [ free_5>=1 && A>=1+C && B>=1+A ], cost: 1
     11: f300 -> f4 : A'=1+A, D'=free_6, [ 0>=1+free_6 && A>=1+C && B>=1+A ], cost: 1
     12: f300 -> f2 : D'=0, [ A>=1+C && B>=1+A ], cost: 1
      1: f4 -> f300 : C'=1+C, [ A>=B ], cost: 1
      2: f4 -> f4 : A'=1+A, D'=free, [ free>=1 && B>=1+A ], cost: 1
      3: f4 -> f4 : A'=1+A, D'=free_1, [ 0>=1+free_1 && B>=1+A ], cost: 1
      4: f4 -> f2 : D'=0, [ B>=1+A ], cost: 1
      5: f2 -> f4 : A'=1+A, D'=free_2, [ free_2>=1 && B>=1+A ], cost: 1
      6: f2 -> f4 : A'=1+A, D'=free_3, [ 0>=1+free_3 && B>=1+A ], cost: 1
      7: f2 -> f2 : D'=0, [ B>=1+A ], cost: 1

Eliminating 1 self-loops for location f300
  Removing the self-loops: 13.
Adding an epsilon transition (to model nonexecution of the loops): 15.

Try instantiation
  Start location: f5
      0: f5 -> f300 : [], cost: 1
     14: f300 -> [5] : C'=A, [ A>=1+C && A>=B ], cost: -C+A
     15: f300 -> [5] : [], cost: 0
      1: f4 -> f300 : C'=1+C, [ A>=B ], cost: 1
     16: f4 -> f4 : A'=B, D'=free_1, [ B>=1+A ], cost: B-A
     17: f4 -> f4 : A'=B, D'=free, [ B>=1+A ], cost: B-A
      4: f4 -> f2 : D'=0, [ B>=1+A ], cost: 1
      5: f2 -> f4 : A'=1+A, D'=free_2, [ free_2>=1 && B>=1+A ], cost: 1
      6: f2 -> f4 : A'=1+A, D'=free_3, [ 0>=1+free_3 && B>=1+A ], cost: 1
      7: f2 -> f2 : D'=0, [ B>=1+A ], cost: 1
     10: [5] -> f4 : A'=1+A, D'=free_5, [ free_5>=1 && A>=1+C && B>=1+A ], cost: 1
     11: [5] -> f4 : A'=1+A, D'=free_6, [ 0>=1+free_6 && A>=1+C && B>=1+A ], cost: 1
     12: [5] -> f2 : D'=0, [ A>=1+C && B>=1+A ], cost: 1

Eliminating 2 self-loops for location f4
  Removing the self-loops: 16 17.
Adding an epsilon transition (to model nonexecution of the loops): 20.

Try instantiation
  Start location: f5
      0: f5 -> f300 : [], cost: 1
     14: f300 -> [5] : C'=A, [ A>=1+C && A>=B ], cost: -C+A
     15: f300 -> [5] : [], cost: 0
     18: f4 -> [6] : A'=B, D'=free_1, [ B>=1+A ], cost: B-A
     19: f4 -> [6] : A'=B, D'=free, [ B>=1+A ], cost: B-A
     20: f4 -> [6] : [], cost: 0
      5: f2 -> f4 : A'=1+A, D'=free_2, [ free_2>=1 && B>=1+A ], cost: 1
      6: f2 -> f4 : A'=1+A, D'=free_3, [ 0>=1+free_3 && B>=1+A ], cost: 1
     21: f2 -> f2 : [ B>=1+A ], cost: INF
     10: [5] -> f4 : A'=1+A, D'=free_5, [ free_5>=1 && A>=1+C && B>=1+A ], cost: 1
     11: [5] -> f4 : A'=1+A, D'=free_6, [ 0>=1+free_6 && A>=1+C && B>=1+A ], cost: 1
     12: [5] -> f2 : D'=0, [ A>=1+C && B>=1+A ], cost: 1
      1: [6] -> f300 : C'=1+C, [ A>=B ], cost: 1
      4: [6] -> f2 : D'=0, [ B>=1+A ], cost: 1

Eliminating 1 self-loops for location f2
  Removing the self-loops: 21.

Removed all Self-loops using metering functions (where possible):
  Start location: f5
      0: f5 -> f300 : [], cost: 1
     14: f300 -> [5] : C'=A, [ A>=1+C && A>=B ], cost: -C+A
     15: f300 -> [5] : [], cost: 0
     18: f4 -> [6] : A'=B, D'=free_1, [ B>=1+A ], cost: B-A
     19: f4 -> [6] : A'=B, D'=free, [ B>=1+A ], cost: B-A
     20: f4 -> [6] : [], cost: 0
     22: f2 -> [7] : [ B>=1+A ], cost: INF
     10: [5] -> f4 : A'=1+A, D'=free_5, [ free_5>=1 && A>=1+C && B>=1+A ], cost: 1
     11: [5] -> f4 : A'=1+A, D'=free_6, [ 0>=1+free_6 && A>=1+C && B>=1+A ], cost: 1
     12: [5] -> f2 : D'=0, [ A>=1+C && B>=1+A ], cost: 1
      1: [6] -> f300 : C'=1+C, [ A>=B ], cost: 1
      4: [6] -> f2 : D'=0, [ B>=1+A ], cost: 1
      5: [7] -> f4 : A'=1+A, D'=free_2, [ free_2>=1 && B>=1+A ], cost: 1
      6: [7] -> f4 : A'=1+A, D'=free_3, [ 0>=1+free_3 && B>=1+A ], cost: 1


Applied chaining over branches and pruning:
  Start location: f5
      0: f5 -> f300 : [], cost: 1
     26: f300 -> f4 : A'=1+A, D'=free_5, [ free_5>=1 && A>=1+C && B>=1+A ], cost: 1
     27: f300 -> f4 : A'=1+A, D'=free_6, [ 0>=1+free_6 && A>=1+C && B>=1+A ], cost: 1
     28: f300 -> f2 : D'=0, [ A>=1+C && B>=1+A ], cost: 1
     23: f300 -> [8] : C'=A, [ A>=1+C && A>=B ], cost: -C+A
     24: f300 -> [9] : C'=A, [ A>=1+C && A>=B ], cost: -C+A
     25: f300 -> [10] : C'=A, [ A>=1+C && A>=B ], cost: -C+A
     29: f4 -> f300 : A'=B, C'=1+C, D'=free_1, [ B>=1+A && B>=B ], cost: 1+B-A
     31: f4 -> f300 : A'=B, C'=1+C, D'=free, [ B>=1+A && B>=B ], cost: 1+B-A
     33: f4 -> f300 : C'=1+C, [ A>=B ], cost: 1
     34: f4 -> f2 : D'=0, [ B>=1+A ], cost: 1
     30: f4 -> [11] : A'=B, D'=free_1, [ B>=1+A ], cost: B-A
     32: f4 -> [12] : A'=B, D'=free, [ B>=1+A ], cost: B-A
     35: f2 -> f4 : A'=1+A, D'=free_2, [ B>=1+A && free_2>=1 && B>=1+A ], cost: INF
     36: f2 -> f4 : A'=1+A, D'=free_3, [ B>=1+A && 0>=1+free_3 && B>=1+A ], cost: INF


Final control flow graph problem, now checking costs for infinitely many models:
  Start location: f5
      0: f5 -> f300 : [], cost: 1
     26: f300 -> f4 : A'=1+A, D'=free_5, [ free_5>=1 && A>=1+C && B>=1+A ], cost: 1
     27: f300 -> f4 : A'=1+A, D'=free_6, [ 0>=1+free_6 && A>=1+C && B>=1+A ], cost: 1
     28: f300 -> f2 : D'=0, [ A>=1+C && B>=1+A ], cost: 1
     23: f300 -> [8] : C'=A, [ A>=1+C && A>=B ], cost: -C+A
     24: f300 -> [9] : C'=A, [ A>=1+C && A>=B ], cost: -C+A
     25: f300 -> [10] : C'=A, [ A>=1+C && A>=B ], cost: -C+A
     29: f4 -> f300 : A'=B, C'=1+C, D'=free_1, [ B>=1+A && B>=B ], cost: 1+B-A
     31: f4 -> f300 : A'=B, C'=1+C, D'=free, [ B>=1+A && B>=B ], cost: 1+B-A
     33: f4 -> f300 : C'=1+C, [ A>=B ], cost: 1
     34: f4 -> f2 : D'=0, [ B>=1+A ], cost: 1
     30: f4 -> [11] : A'=B, D'=free_1, [ B>=1+A ], cost: B-A
     32: f4 -> [12] : A'=B, D'=free, [ B>=1+A ], cost: B-A
     35: f2 -> f4 : A'=1+A, D'=free_2, [ B>=1+A && free_2>=1 && B>=1+A ], cost: INF
     36: f2 -> f4 : A'=1+A, D'=free_3, [ B>=1+A && 0>=1+free_3 && B>=1+A ], cost: INF

This is only a partial result (probably due to a timeout), trying to find max complexity

Removed transitions with const cost
  Start location: f5
      0: f5 -> f300 : [], cost: 1
     26: f300 -> f4 : A'=1+A, D'=free_5, [ free_5>=1 && A>=1+C && B>=1+A ], cost: 1
     27: f300 -> f4 : A'=1+A, D'=free_6, [ 0>=1+free_6 && A>=1+C && B>=1+A ], cost: 1
     23: f300 -> [8] : C'=A, [ A>=1+C && A>=B ], cost: -C+A
     24: f300 -> [9] : C'=A, [ A>=1+C && A>=B ], cost: -C+A
     25: f300 -> [10] : C'=A, [ A>=1+C && A>=B ], cost: -C+A
     29: f4 -> f300 : A'=B, C'=1+C, D'=free_1, [ B>=1+A && B>=B ], cost: 1+B-A
     31: f4 -> f300 : A'=B, C'=1+C, D'=free, [ B>=1+A && B>=B ], cost: 1+B-A
     34: f4 -> f2 : D'=0, [ B>=1+A ], cost: 1
     30: f4 -> [11] : A'=B, D'=free_1, [ B>=1+A ], cost: B-A
     32: f4 -> [12] : A'=B, D'=free, [ B>=1+A ], cost: B-A
     35: f2 -> f4 : A'=1+A, D'=free_2, [ B>=1+A && free_2>=1 && B>=1+A ], cost: INF
     36: f2 -> f4 : A'=1+A, D'=free_3, [ B>=1+A && 0>=1+free_3 && B>=1+A ], cost: INF

Performed chaining from the start location:
  Start location: f5
     37: f5 -> f4 : A'=1+A, D'=free_5, [ free_5>=1 && A>=1+C && B>=1+A ], cost: 2
     38: f5 -> f4 : A'=1+A, D'=free_6, [ 0>=1+free_6 && A>=1+C && B>=1+A ], cost: 2
     39: f5 -> [8] : C'=A, [ A>=1+C && A>=B ], cost: 1-C+A
     40: f5 -> [9] : C'=A, [ A>=1+C && A>=B ], cost: 1-C+A
     41: f5 -> [10] : C'=A, [ A>=1+C && A>=B ], cost: 1-C+A
     29: f4 -> f300 : A'=B, C'=1+C, D'=free_1, [ B>=1+A && B>=B ], cost: 1+B-A
     31: f4 -> f300 : A'=B, C'=1+C, D'=free, [ B>=1+A && B>=B ], cost: 1+B-A
     34: f4 -> f2 : D'=0, [ B>=1+A ], cost: 1
     30: f4 -> [11] : A'=B, D'=free_1, [ B>=1+A ], cost: B-A
     32: f4 -> [12] : A'=B, D'=free, [ B>=1+A ], cost: B-A
     35: f2 -> f4 : A'=1+A, D'=free_2, [ B>=1+A && free_2>=1 && B>=1+A ], cost: INF
     36: f2 -> f4 : A'=1+A, D'=free_3, [ B>=1+A && 0>=1+free_3 && B>=1+A ], cost: INF

  Found configuration with infinitely models for cost: 1-C+A
  and guard: A>=1+C && A>=B:
  C: Pos, B: Pos, A: Pos, where: A > C A > B

Found new complexity n^1, because: Found infinity configuration.

Performed chaining from the start location:
  Start location: f5
     42: f5 -> f300 : A'=B, C'=1+C, D'=free_1, [ free_5>=1 && A>=1+C && B>=1+A && B>=2+A && B>=B ], cost: 2+B-A
     43: f5 -> f300 : A'=B, C'=1+C, D'=free, [ free_5>=1 && A>=1+C && B>=1+A && B>=2+A && B>=B ], cost: 2+B-A
     44: f5 -> f2 : A'=1+A, D'=0, [ free_5>=1 && A>=1+C && B>=1+A && B>=2+A ], cost: 3
     45: f5 -> [11] : A'=B, D'=free_1, [ free_5>=1 && A>=1+C && B>=1+A && B>=2+A ], cost: 1+B-A
     46: f5 -> [12] : A'=B, D'=free, [ free_5>=1 && A>=1+C && B>=1+A && B>=2+A ], cost: 1+B-A
     35: f2 -> f4 : A'=1+A, D'=free_2, [ B>=1+A && free_2>=1 && B>=1+A ], cost: INF
     36: f2 -> f4 : A'=1+A, D'=free_3, [ B>=1+A && 0>=1+free_3 && B>=1+A ], cost: INF

Performed chaining from the start location:
  Start location: f5
     47: f5 -> f4 : A'=2+A, D'=free_2, [ free_5>=1 && A>=1+C && B>=1+A && B>=2+A && B>=2+A && free_2>=1 && B>=2+A ], cost: INF
     48: f5 -> f4 : A'=2+A, D'=free_3, [ free_5>=1 && A>=1+C && B>=1+A && B>=2+A && B>=2+A && 0>=1+free_3 && B>=2+A ], cost: INF

Found new complexity INF, because: INF sat.


The final runtime is determined by this resulting transition:
  Final Guard: free_5>=1 && A>=1+C && B>=1+A && B>=2+A && B>=2+A && free_2>=1 && B>=2+A
  Final Cost:  INF

Obtained the following complexity w.r.t. the length of the input n:
  Complexity class: INF
  Complexity value: INF

WORST_CASE(INF,?)
