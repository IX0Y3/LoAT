Trying to load file: a.10.c.koat

Initial Control flow graph problem:
  Start location: f0
      0: f0 -> f3 : [], cost: 1
      5: f0 -> f3 : A'=F, B'=D, C'=D, E'=F, G'=A, H'=B, [], cost: 1
      6: f0 -> f3 : A'=F, B'=D, C'=D, E'=F, G'=free_1, H'=free, Q'=free_1, J'=free, [], cost: 1
      9: f0 -> f3 : A'=1+A, C'=D, E'=F, G'=A, H'=B, [], cost: 1
     11: f0 -> f3 : B'=1+B, C'=D, E'=F, G'=A, H'=B, [], cost: 1
      1: f0 -> f4 : [], cost: 1
      2: f0 -> f8 : [], cost: 1
      7: f0 -> f8 : A'=free_2, B'=free_3, C'=D, D'=free_5, E'=F, F'=free_4, G'=A, H'=B, Q'=free_5, J'=free_4, K'=free_2, L'=free_3, [], cost: 1
      3: f3 -> f4 : C'=D, E'=F, G'=A, H'=B, [ A>=1+B ], cost: 1
      4: f3 -> f4 : C'=D, E'=F, G'=A, H'=B, [ B>=1+A ], cost: 1
      8: f3 -> f8 : A'=free_6, B'=free_7, C'=D, D'=free_9, E'=F, F'=free_8, G'=A, H'=A, Q'=free_9, J'=free_8, K'=free_6, L'=free_7, [ A==B ], cost: 1
     10: f4 -> f3 : A'=1+A, C'=D, E'=F, G'=A, H'=B, [ B>=1+A ], cost: 1
     12: f4 -> f3 : B'=1+B, C'=D, E'=F, G'=A, H'=B, [ A>=B ], cost: 1


Simplified the transitions:
  Start location: f0
      0: f0 -> f3 : [], cost: 1
      5: f0 -> f3 : A'=F, B'=D, C'=D, E'=F, G'=A, H'=B, [], cost: 1
      6: f0 -> f3 : A'=F, B'=D, C'=D, E'=F, G'=free_1, H'=free, Q'=free_1, J'=free, [], cost: 1
      9: f0 -> f3 : A'=1+A, C'=D, E'=F, G'=A, H'=B, [], cost: 1
     11: f0 -> f3 : B'=1+B, C'=D, E'=F, G'=A, H'=B, [], cost: 1
      1: f0 -> f4 : [], cost: 1
      3: f3 -> f4 : C'=D, E'=F, G'=A, H'=B, [ A>=1+B ], cost: 1
      4: f3 -> f4 : C'=D, E'=F, G'=A, H'=B, [ B>=1+A ], cost: 1
     10: f4 -> f3 : A'=1+A, C'=D, E'=F, G'=A, H'=B, [ B>=1+A ], cost: 1
     12: f4 -> f3 : B'=1+B, C'=D, E'=F, G'=A, H'=B, [ A>=B ], cost: 1


Final control flow graph problem, now checking costs for infinitely many models:
  Start location: f0
      0: f0 -> f3 : [], cost: 1
      5: f0 -> f3 : A'=F, B'=D, C'=D, E'=F, G'=A, H'=B, [], cost: 1
      6: f0 -> f3 : A'=F, B'=D, C'=D, E'=F, G'=free_1, H'=free, Q'=free_1, J'=free, [], cost: 1
      9: f0 -> f3 : A'=1+A, C'=D, E'=F, G'=A, H'=B, [], cost: 1
     11: f0 -> f3 : B'=1+B, C'=D, E'=F, G'=A, H'=B, [], cost: 1
      1: f0 -> f4 : [], cost: 1
      3: f3 -> f4 : C'=D, E'=F, G'=A, H'=B, [ A>=1+B ], cost: 1
      4: f3 -> f4 : C'=D, E'=F, G'=A, H'=B, [ B>=1+A ], cost: 1
     10: f4 -> f3 : A'=1+A, C'=D, E'=F, G'=A, H'=B, [ B>=1+A ], cost: 1
     12: f4 -> f3 : B'=1+B, C'=D, E'=F, G'=A, H'=B, [ A>=B ], cost: 1

This is only a partial result (probably due to a timeout), trying to find max complexity

Removed transitions with const cost
  Start location: f0
    <empty>


The final runtime is determined by this resulting transition:
  Final Guard: 
  Final Cost:  1

Obtained the following complexity w.r.t. the length of the input n:
  Complexity class: const
  Complexity value: 0

WORST_CASE(Omega(1),?)
