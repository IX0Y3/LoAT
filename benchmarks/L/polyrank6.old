Trying to load file: polyrank6.koat

Initial Control flow graph problem:
  Start location: f0
      0: f0 -> f2 : [ A>=0 && B>=C ], cost: 1
      1: f2 -> f2 : A'=-1+A, C'=-1+C, [ A>=1 && 1+B>=C ], cost: 1
      2: f2 -> f2 : B'=-1+B+C, C'=-1+C, [ A>=0 && B>=0 ], cost: 1

Eliminating 2 self-loops for location f2
  Self-Loop 1 has the metering function: A, resulting in the new transition 3.
  Removing the self-loops: 1 2.

Accelerated all simple loops using metering functions (where possible):
  Start location: f0
      0: f0 -> f2 : [ A>=0 && B>=C ], cost: 1
      3: f2 -> f2 : A'=0, C'=-A+C, [ A>=1 && 1+B>=C ], cost: A
      4: f2 -> f2 : B'=-1+B+C, C'=-1+C, [ A>=0 && B>=0 ], cost: 1


Chained simpled loops:
  Start location: f0
      0: f0 -> f2 : [ A>=0 && B>=C ], cost: 1
      5: f0 -> f2 : A'=0, C'=-A+C, [ A>=0 && B>=C && A>=1 && 1+B>=C ], cost: 1+A
      6: f0 -> f2 : B'=-1+B+C, C'=-1+C, [ A>=0 && B>=C && A>=0 && B>=0 ], cost: 2


Final control flow graph problem, now checking costs for infinitely many models:
  Start location: f0
      5: f0 -> f2 : A'=0, C'=-A+C, [ A>=0 && B>=C && A>=1 && 1+B>=C ], cost: 1+A


Computing complexity for remaining 1 transitions.

Created initial limit problem:
1+B-C (+/+!), 2+B-C (+/+!), 1+A (+), A (+/+!) [not solved]

applying transformation rule (D), replacing 1+A (+) by A (+)
resulting limit problem:
1+B-C (+/+!), 2+B-C (+/+!), A (+) [not solved]

applying transformation rule (A), replacing 1+B-C (+/+!) by 1 (+!) and B-C (+!) using +! limit vector (+!,+!)
resulting limit problem:
1 (+!), B-C (+!), 2+B-C (+/+!), A (+) [not solved]

applying transformation rule (B), deleting 1 (+!)
resulting limit problem:
B-C (+!), 2+B-C (+/+!), A (+) [not solved]

applying transformation rule (A), replacing B-C (+!) by B (+!) and -C (+!) using +! limit vector (+!,+!)
resulting limit problem:
2+B-C (+/+!), -C (+!), B (+!), A (+) [not solved]

applying transformation rule (C) using substitution {C==-1}
resulting limit problem:
1 (+!), 3+B (+/+!), B (+!), A (+) [not solved]

applying transformation rule (B), deleting 1 (+!)
resulting limit problem:
3+B (+/+!), B (+!), A (+) [not solved]

applying transformation rule (C) using substitution {B==1}
resulting limit problem:
1 (+!), 4 (+!), A (+) [not solved]

applying transformation rule (B), deleting 1 (+!)
resulting limit problem:
4 (+!), A (+) [not solved]

applying transformation rule (B), deleting 4 (+!)
resulting limit problem:
A (+) [solved]

Solution:
B / 1
A / n
C / -1
Found new complexity n^1, because: Solved the initial limit problem.


The final runtime is determined by this resulting transition:
  Final Guard: A>=0 && B>=C && A>=1 && 1+B>=C
  Final Cost:  1+n

Obtained the following complexity w.r.t. the length of the input n:
  Complexity class: n^1
  Complexity value: 1

WORST_CASE(Omega(n^1),?)
