Trying to load file: rsd.koat

Initial Control flow graph problem:
  Start location: start0
      0: start -> stop : [ 0>=1+A && B==C && D==A && E==F && G==H ], cost: 1
      1: start -> lbl82 : E'=2*D, G'=-1+2*D, [ A>=0 && B==C && D==A && E==F && G==H ], cost: 1
      2: start -> lbl121 : B'=2*D, E'=-1+2*D, G'=-1+2*D, [ A>=0 && B==C && D==A && E==F && G==H ], cost: 1
      3: lbl82 -> stop : [ E>=A && 2*A>=E && D==A && 1+G==A ], cost: 1
      4: lbl82 -> lbl82 : G'=-1+G, [ G>=A && E>=1+G && 2*A>=E && 1+G>=A && D==A ], cost: 1
      5: lbl82 -> lbl121 : B'=G, E'=-1+E, G'=-1+E, [ G>=A && E>=1+G && 2*A>=E && 1+G>=A && D==A ], cost: 1
      6: lbl121 -> stop : [ A>=1+E && 2*A>=1+E && B>=A && 1+E>=B && G==E && D==A ], cost: 1
      7: lbl121 -> lbl82 : G'=-1+G, [ E>=A && 2*A>=1+E && B>=A && 1+E>=B && G==E && D==A ], cost: 1
      8: lbl121 -> lbl121 : B'=G, E'=-1+E, G'=-1+E, [ E>=A && 2*A>=1+E && B>=A && 1+E>=B && G==E && D==A ], cost: 1
      9: start0 -> start : B'=C, D'=A, E'=F, G'=H, [], cost: 1


Simplified the transitions:
  Start location: start0
      1: start -> lbl82 : E'=2*D, G'=-1+2*D, [ A>=0 && B==C && D==A && E==F && G==H ], cost: 1
      2: start -> lbl121 : B'=2*D, E'=-1+2*D, G'=-1+2*D, [ A>=0 && B==C && D==A && E==F && G==H ], cost: 1
      4: lbl82 -> lbl82 : G'=-1+G, [ G>=A && E>=1+G && 2*A>=E && D==A ], cost: 1
      5: lbl82 -> lbl121 : B'=G, E'=-1+E, G'=-1+E, [ G>=A && E>=1+G && 2*A>=E && D==A ], cost: 1
      7: lbl121 -> lbl82 : G'=-1+G, [ E>=A && 2*A>=1+E && B>=A && 1+E>=B && G==E && D==A ], cost: 1
      8: lbl121 -> lbl121 : B'=G, E'=-1+E, G'=-1+E, [ E>=A && 2*A>=1+E && B>=A && 1+E>=B && G==E && D==A ], cost: 1
      9: start0 -> start : B'=C, D'=A, E'=F, G'=H, [], cost: 1

Eliminating 1 self-loops for location lbl82
  Self-Loop 4 has the metering function: 1+G-A, resulting in the new transition 10.
  Removing the self-loops: 4.
Eliminating 1 self-loops for location lbl121
  Self-Loop 8 has the metering function: 1+E-A, resulting in the new transition 11.
  Removing the self-loops: 8.

Accelerated all simple loops using metering functions (where possible):
  Start location: start0
      1: start -> lbl82 : E'=2*D, G'=-1+2*D, [ A>=0 && B==C && D==A && E==F && G==H ], cost: 1
      2: start -> lbl121 : B'=2*D, E'=-1+2*D, G'=-1+2*D, [ A>=0 && B==C && D==A && E==F && G==H ], cost: 1
     10: lbl82 -> lbl82 : G'=-1+A, [ G>=A && E>=1+G && 2*A>=E && D==A ], cost: 1+G-A
      5: lbl82 -> lbl121 : B'=G, E'=-1+E, G'=-1+E, [ G>=A && E>=1+G && 2*A>=E && D==A ], cost: 1
      7: lbl121 -> lbl82 : G'=-1+G, [ E>=A && 2*A>=1+E && B>=A && 1+E>=B && G==E && D==A ], cost: 1
     11: lbl121 -> lbl121 : B'=A, E'=-1+A, G'=-1+A, [ E>=A && 2*A>=1+E && B>=A && 1+E>=B && G==E && D==A ], cost: 1+E-A
      9: start0 -> start : B'=C, D'=A, E'=F, G'=H, [], cost: 1


Chained simpled loops:
  Start location: start0
     12: start -> lbl82 : E'=2*D, G'=-1+A, [ A>=0 && B==C && D==A && E==F && G==H && -1+2*D>=A && 2*D>=2*D && 2*A>=2*D && D==A ], cost: 1-A+2*D
     14: start -> lbl121 : B'=A, E'=-1+A, G'=-1+A, [ A>=0 && B==C && D==A && E==F && G==H && -1+2*D>=A && 2*A>=2*D && 2*D>=A && 2*D>=2*D && -1+2*D==-1+2*D && D==A ], cost: 1-A+2*D
     15: lbl82 -> lbl121 : B'=A, E'=-1+A, G'=-1+A, [ G>=A && E>=1+G && 2*A>=E && D==A && -1+E>=A && 2*A>=E && G>=A && E>=G && -1+E==-1+E && D==A ], cost: 1+E-A
     13: lbl121 -> lbl82 : G'=-1+A, [ E>=A && 2*A>=1+E && B>=A && 1+E>=B && G==E && D==A && -1+G>=A && E>=G && 2*A>=E && D==A ], cost: 1+G-A
      9: start0 -> start : B'=C, D'=A, E'=F, G'=H, [], cost: 1


Eliminated locations (branches):
  Start location: start0
     15: lbl82 -> lbl121 : B'=A, E'=-1+A, G'=-1+A, [ G>=A && E>=1+G && 2*A>=E && D==A && -1+E>=A && 2*A>=E && G>=A && E>=G && -1+E==-1+E && D==A ], cost: 1+E-A
     13: lbl121 -> lbl82 : G'=-1+A, [ E>=A && 2*A>=1+E && B>=A && 1+E>=B && G==E && D==A && -1+G>=A && E>=G && 2*A>=E && D==A ], cost: 1+G-A
     16: start0 -> lbl82 : B'=C, D'=A, E'=2*A, G'=-1+A, [ A>=0 && C==C && A==A && F==F && H==H && -1+2*A>=A && 2*A>=2*A && 2*A>=2*A && A==A ], cost: 2+A
     17: start0 -> lbl121 : B'=A, D'=A, E'=-1+A, G'=-1+A, [ A>=0 && C==C && A==A && F==F && H==H && -1+2*A>=A && 2*A>=2*A && 2*A>=A && 2*A>=2*A && -1+2*A==-1+2*A && A==A ], cost: 2+A


Eliminated locations:
  Start location: start0
     13: lbl121 -> lbl82 : G'=-1+A, [ E>=A && 2*A>=1+E && B>=A && 1+E>=B && G==E && D==A && -1+G>=A && E>=G && 2*A>=E && D==A ], cost: 1+G-A
     16: start0 -> lbl82 : B'=C, D'=A, E'=2*A, G'=-1+A, [ A>=0 && C==C && A==A && F==F && H==H && -1+2*A>=A && 2*A>=2*A && 2*A>=2*A && A==A ], cost: 2+A
     17: start0 -> lbl121 : B'=A, D'=A, E'=-1+A, G'=-1+A, [ A>=0 && C==C && A==A && F==F && H==H && -1+2*A>=A && 2*A>=2*A && 2*A>=A && 2*A>=2*A && -1+2*A==-1+2*A && A==A ], cost: 2+A


Eliminated locations (branches):
  Start location: start0
     16: start0 -> lbl82 : B'=C, D'=A, E'=2*A, G'=-1+A, [ A>=0 && C==C && A==A && F==F && H==H && -1+2*A>=A && 2*A>=2*A && 2*A>=2*A && A==A ], cost: 2+A
     18: start0 -> [5] : B'=A, D'=A, E'=-1+A, G'=-1+A, [ A>=0 && C==C && A==A && F==F && H==H && -1+2*A>=A && 2*A>=2*A && 2*A>=A && 2*A>=2*A && -1+2*A==-1+2*A && A==A ], cost: 2+A


Final control flow graph problem, now checking costs for infinitely many models:
  Start location: start0
     16: start0 -> lbl82 : B'=C, D'=A, E'=2*A, G'=-1+A, [ A>=0 && C==C && A==A && F==F && H==H && -1+2*A>=A && 2*A>=2*A && 2*A>=2*A && A==A ], cost: 2+A
     18: start0 -> [5] : B'=A, D'=A, E'=-1+A, G'=-1+A, [ A>=0 && C==C && A==A && F==F && H==H && -1+2*A>=A && 2*A>=2*A && 2*A>=A && 2*A>=2*A && -1+2*A==-1+2*A && A==A ], cost: 2+A


Computing complexity for remaining 2 transitions.

Created initial limit problem:
1 (+/+!), 2+A (+), A (+/+!), 1+A (+/+!) [not solved]

applying transformation rule (B), deleting 1 (+/+!)
resulting limit problem:
2+A (+), A (+/+!), 1+A (+/+!) [not solved]

applying transformation rule (D), replacing 2+A (+) by A (+)
resulting limit problem:
A (+), 1+A (+/+!) [not solved]

applying transformation rule (D), replacing 1+A (+/+!) by A (+)
resulting limit problem:
A (+) [solved]

Solution:
F / 0
A / n
C / 0
H / 0
Found new complexity n^1, because: Solved the initial limit problem.


The final runtime is determined by this resulting transition:
  Final Guard: A>=0 && C==C && A==A && F==F && H==H && -1+2*A>=A && 2*A>=2*A && 2*A>=2*A && A==A
  Final Cost:  2+n

Obtained the following complexity w.r.t. the length of the input n:
  Complexity class: n^1
  Complexity value: 1

WORST_CASE(Omega(n^1),?)
