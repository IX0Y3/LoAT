Trying to load file: heidy8.koat

Initial Control flow graph problem:
  Start location: f0
      0: f0 -> f3 : A'=0, B'=0, [], cost: 1
      1: f3 -> f3 : C'=-1+C, D'=free, [ C>=1 && free>=1 ], cost: 1
      2: f3 -> f3 : C'=-2+C, D'=free_1, [ C>=1 && 0>=free_1 ], cost: 1
      3: f3 -> f6 : E'=free_2, [ 0>=C ], cost: 1
      4: f6 -> f6 : A'=1, E'=free_3, [ E>=1 ], cost: 1
      5: f6 -> f6 : A'=0, E'=free_4, [ 0>=E ], cost: 1

Eliminating 2 self-loops for location f3
  Self-Loop 1 has the metering function: C, resulting in the new transition 6.
  Self-Loop 2 has the metering function: meter, resulting in the new transition 7.
  Removing the self-loops: 1 2.
Eliminating 2 self-loops for location f6
  Removing the self-loops: 4 5.

Accelerated all simple loops using metering functions (where possible):
  Start location: f0
      0: f0 -> f3 : A'=0, B'=0, [], cost: 1
      6: f3 -> f3 : C'=0, D'=free, [ C>=1 && free>=1 ], cost: C
      7: f3 -> f3 : C'=C-2*meter, D'=free_1, [ C>=1 && 0>=free_1 && 2*meter==C ], cost: meter
      3: f3 -> f6 : E'=free_2, [ 0>=C ], cost: 1
      8: f6 -> f6 : A'=1, E'=free_3, [ E>=1 ], cost: 1
      9: f6 -> f6 : A'=0, E'=free_4, [ 0>=E ], cost: 1


Chained simpled loops:
  Start location: f0
     10: f0 -> f3 : A'=0, B'=0, C'=0, D'=free, [ C>=1 && free>=1 ], cost: 1+C
     11: f0 -> f3 : A'=0, B'=0, C'=C-2*meter, D'=free_1, [ C>=1 && 0>=free_1 && 2*meter==C ], cost: 1+meter
      3: f3 -> f6 : E'=free_2, [ 0>=C ], cost: 1
     12: f3 -> f6 : A'=1, E'=free_3, [ 0>=C && free_2>=1 ], cost: 2
     13: f3 -> f6 : A'=0, E'=free_4, [ 0>=C && 0>=free_2 ], cost: 2


Eliminated locations (branches):
  Start location: f0
     14: f0 -> f6 : A'=0, B'=0, C'=0, D'=free, E'=free_2, [ C>=1 && free>=1 && 0>=0 ], cost: 2+C
     15: f0 -> f6 : A'=1, B'=0, C'=0, D'=free, E'=free_3, [ C>=1 && free>=1 && 0>=0 && free_2>=1 ], cost: 3+C
     16: f0 -> f6 : A'=0, B'=0, C'=0, D'=free, E'=free_4, [ C>=1 && free>=1 && 0>=0 && 0>=free_2 ], cost: 3+C
     17: f0 -> f6 : A'=0, B'=0, C'=C-2*meter, D'=free_1, E'=free_2, [ C>=1 && 0>=free_1 && 2*meter==C && 0>=C-2*meter ], cost: 2+meter
     18: f0 -> f6 : A'=1, B'=0, C'=C-2*meter, D'=free_1, E'=free_3, [ C>=1 && 0>=free_1 && 2*meter==C && 0>=C-2*meter && free_2>=1 ], cost: 3+meter
     19: f0 -> f6 : A'=0, B'=0, C'=C-2*meter, D'=free_1, E'=free_4, [ C>=1 && 0>=free_1 && 2*meter==C && 0>=C-2*meter && 0>=free_2 ], cost: 3+meter

Created initial limit problem:
1 (+/+!), 2+C (+), free (+/+!), C (+/+!) [not solved]

applying transformation rule (B), deleting 1 (+/+!)
resulting limit problem:
2+C (+), free (+/+!), C (+/+!) [not solved]

applying transformation rule (D), replacing 2+C (+) by C (+)
resulting limit problem:
free (+/+!), C (+) [solved]

Solution:
free / n
C / n
Created initial limit problem:
free_2 (+/+!), 1 (+/+!), free (+/+!), 3+C (+), C (+/+!) [not solved]

applying transformation rule (B), deleting 1 (+/+!)
resulting limit problem:
free_2 (+/+!), free (+/+!), 3+C (+), C (+/+!) [not solved]

applying transformation rule (D), replacing 3+C (+) by C (+)
resulting limit problem:
free_2 (+/+!), free (+/+!), C (+) [solved]

Solution:
free_2 / n
free / n
C / n
Created initial limit problem:
1 (+/+!), free (+/+!), 3+C (+), C (+/+!), 1-free_2 (+/+!) [not solved]

applying transformation rule (B), deleting 1 (+/+!)
resulting limit problem:
free (+/+!), 3+C (+), C (+/+!), 1-free_2 (+/+!) [not solved]

applying transformation rule (D), replacing 3+C (+) by C (+)
resulting limit problem:
free (+/+!), C (+), 1-free_2 (+/+!) [not solved]

applying transformation rule (D), replacing 1-free_2 (+/+!) by -free_2 (+)
resulting limit problem:
-free_2 (+), free (+/+!), C (+) [not solved]

applying transformation rule (C) using substitution {free==C}
resulting limit problem:
-free_2 (+), C (+) [not solved]

applying transformation rule (A), replacing -free_2 (+) by free_2 (-) and -1 (-!) using + limit vector (-,-!)
resulting limit problem:
free_2 (-), C (+), -1 (-!) [not solved]

applying transformation rule (B), deleting -1 (-!)
resulting limit problem:
free_2 (-), C (+) [solved]

Solution:
free_2 / -n
free / n
C / n

Pruned:
  Start location: f0
     14: f0 -> f6 : A'=0, B'=0, C'=0, D'=free, E'=free_2, [ C>=1 && free>=1 && 0>=0 ], cost: 2+C
     15: f0 -> f6 : A'=1, B'=0, C'=0, D'=free, E'=free_3, [ C>=1 && free>=1 && 0>=0 && free_2>=1 ], cost: 3+C
     16: f0 -> f6 : A'=0, B'=0, C'=0, D'=free, E'=free_4, [ C>=1 && free>=1 && 0>=0 && 0>=free_2 ], cost: 3+C
     17: f0 -> f6 : A'=0, B'=0, C'=C-2*meter, D'=free_1, E'=free_2, [ C>=1 && 0>=free_1 && 2*meter==C && 0>=C-2*meter ], cost: 2+meter
     19: f0 -> f6 : A'=0, B'=0, C'=C-2*meter, D'=free_1, E'=free_4, [ C>=1 && 0>=free_1 && 2*meter==C && 0>=C-2*meter && 0>=free_2 ], cost: 3+meter


Final control flow graph problem, now checking costs for infinitely many models:
  Start location: f0
     14: f0 -> f6 : A'=0, B'=0, C'=0, D'=free, E'=free_2, [ C>=1 && free>=1 && 0>=0 ], cost: 2+C
     15: f0 -> f6 : A'=1, B'=0, C'=0, D'=free, E'=free_3, [ C>=1 && free>=1 && 0>=0 && free_2>=1 ], cost: 3+C
     16: f0 -> f6 : A'=0, B'=0, C'=0, D'=free, E'=free_4, [ C>=1 && free>=1 && 0>=0 && 0>=free_2 ], cost: 3+C
     17: f0 -> f6 : A'=0, B'=0, C'=C-2*meter, D'=free_1, E'=free_2, [ C>=1 && 0>=free_1 && 2*meter==C && 0>=C-2*meter ], cost: 2+meter
     19: f0 -> f6 : A'=0, B'=0, C'=C-2*meter, D'=free_1, E'=free_4, [ C>=1 && 0>=free_1 && 2*meter==C && 0>=C-2*meter && 0>=free_2 ], cost: 3+meter


Computing complexity for remaining 5 transitions.

Created initial limit problem:
1 (+/+!), 2+C (+), free (+/+!), C (+/+!) [not solved]

applying transformation rule (B), deleting 1 (+/+!)
resulting limit problem:
2+C (+), free (+/+!), C (+/+!) [not solved]

applying transformation rule (D), replacing 2+C (+) by C (+)
resulting limit problem:
free (+/+!), C (+) [solved]

Solution:
free / n
C / n
Found new complexity n^1, because: Solved the initial limit problem.


The final runtime is determined by this resulting transition:
  Final Guard: C>=1 && free>=1 && 0>=0
  Final Cost:  2+n

Obtained the following complexity w.r.t. the length of the input n:
  Complexity class: n^1
  Complexity value: 1

WORST_CASE(Omega(n^1),?)
