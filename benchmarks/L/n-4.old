Trying to load file: n-4.koat

Initial Control flow graph problem:
  Start location: f5
      0: f5 -> f300 : [], cost: 1
      9: f300 -> f300 : C'=1+C, [ A>=1+C && A>=B ], cost: 1
     10: f300 -> f4 : A'=1+A, D'=free_5, [ free_5>=1 && A>=1+C && B>=1+A ], cost: 1
     11: f300 -> f4 : A'=1+A, D'=free_6, [ 0>=1+free_6 && A>=1+C && B>=1+A ], cost: 1
     12: f300 -> f2 : D'=0, [ A>=1+C && B>=1+A ], cost: 1
      8: f300 -> f1 : E'=free_4, [ C>=A ], cost: 1
      1: f4 -> f300 : C'=1+C, [ A>=B ], cost: 1
      2: f4 -> f4 : A'=1+A, D'=free, [ free>=1 && B>=1+A ], cost: 1
      3: f4 -> f4 : A'=1+A, D'=free_1, [ 0>=1+free_1 && B>=1+A ], cost: 1
      4: f4 -> f2 : D'=0, [ B>=1+A ], cost: 1
      5: f2 -> f4 : A'=1+A, D'=free_2, [ free_2>=1 && B>=1+A ], cost: 1
      6: f2 -> f4 : A'=1+A, D'=free_3, [ 0>=1+free_3 && B>=1+A ], cost: 1
      7: f2 -> f2 : D'=0, [ B>=1+A ], cost: 1


Simplified the transitions:
  Start location: f5
      0: f5 -> f300 : [], cost: 1
      9: f300 -> f300 : C'=1+C, [ A>=1+C && A>=B ], cost: 1
     10: f300 -> f4 : A'=1+A, D'=free_5, [ free_5>=1 && A>=1+C && B>=1+A ], cost: 1
     11: f300 -> f4 : A'=1+A, D'=free_6, [ 0>=1+free_6 && A>=1+C && B>=1+A ], cost: 1
     12: f300 -> f2 : D'=0, [ A>=1+C && B>=1+A ], cost: 1
      1: f4 -> f300 : C'=1+C, [ A>=B ], cost: 1
      2: f4 -> f4 : A'=1+A, D'=free, [ free>=1 && B>=1+A ], cost: 1
      3: f4 -> f4 : A'=1+A, D'=free_1, [ 0>=1+free_1 && B>=1+A ], cost: 1
      4: f4 -> f2 : D'=0, [ B>=1+A ], cost: 1
      5: f2 -> f4 : A'=1+A, D'=free_2, [ free_2>=1 && B>=1+A ], cost: 1
      6: f2 -> f4 : A'=1+A, D'=free_3, [ 0>=1+free_3 && B>=1+A ], cost: 1
      7: f2 -> f2 : D'=0, [ B>=1+A ], cost: 1

Eliminating 1 self-loops for location f300
  Self-Loop 9 has the metering function: A-C, resulting in the new transition 13.
  Removing the self-loops: 9.
Eliminating 2 self-loops for location f4
  Self-Loop 2 has the metering function: B-A, resulting in the new transition 14.
  Self-Loop 3 has the metering function: B-A, resulting in the new transition 15.
  Removing the self-loops: 2 3.
Eliminating 1 self-loops for location f2
  Self-Loop 7 has unbounded runtime, resulting in the new transition 16.
  Removing the self-loops: 7.

Accelerated all simple loops using metering functions (where possible):
  Start location: f5
      0: f5 -> f300 : [], cost: 1
     13: f300 -> f300 : C'=A, [ A>=1+C && A>=B ], cost: A-C
     10: f300 -> f4 : A'=1+A, D'=free_5, [ free_5>=1 && A>=1+C && B>=1+A ], cost: 1
     11: f300 -> f4 : A'=1+A, D'=free_6, [ 0>=1+free_6 && A>=1+C && B>=1+A ], cost: 1
     12: f300 -> f2 : D'=0, [ A>=1+C && B>=1+A ], cost: 1
      1: f4 -> f300 : C'=1+C, [ A>=B ], cost: 1
     14: f4 -> f4 : A'=B, D'=free, [ free>=1 && B>=1+A ], cost: B-A
     15: f4 -> f4 : A'=B, D'=free_1, [ 0>=1+free_1 && B>=1+A ], cost: B-A
      4: f4 -> f2 : D'=0, [ B>=1+A ], cost: 1
      5: f2 -> f4 : A'=1+A, D'=free_2, [ free_2>=1 && B>=1+A ], cost: 1
      6: f2 -> f4 : A'=1+A, D'=free_3, [ 0>=1+free_3 && B>=1+A ], cost: 1
     16: f2 -> f2 : [ B>=1+A ], cost: INF


Chained simpled loops:
  Start location: f5
     17: f5 -> f300 : C'=A, [ A>=1+C && A>=B ], cost: 1+A-C
     19: f300 -> f4 : A'=B, D'=free, [ free_5>=1 && A>=1+C && B>=1+A && free>=1 && B>=2+A ], cost: B-A
     20: f300 -> f4 : A'=B, D'=free, [ 0>=1+free_6 && A>=1+C && B>=1+A && free>=1 && B>=2+A ], cost: B-A
     23: f300 -> f4 : A'=B, D'=free_1, [ free_5>=1 && A>=1+C && B>=1+A && 0>=1+free_1 && B>=2+A ], cost: B-A
     24: f300 -> f4 : A'=B, D'=free_1, [ 0>=1+free_6 && A>=1+C && B>=1+A && 0>=1+free_1 && B>=2+A ], cost: B-A
     27: f300 -> f2 : D'=0, [ A>=1+C && B>=1+A && B>=1+A ], cost: INF
     18: f4 -> f300 : C'=A, [ A>=B && A>=2+C && A>=B ], cost: A-C
     28: f4 -> f2 : D'=0, [ B>=1+A && B>=1+A ], cost: INF
     21: f2 -> f4 : A'=B, D'=free, [ free_2>=1 && B>=1+A && free>=1 && B>=2+A ], cost: B-A
     22: f2 -> f4 : A'=B, D'=free, [ 0>=1+free_3 && B>=1+A && free>=1 && B>=2+A ], cost: B-A
     25: f2 -> f4 : A'=B, D'=free_1, [ free_2>=1 && B>=1+A && 0>=1+free_1 && B>=2+A ], cost: B-A
     26: f2 -> f4 : A'=B, D'=free_1, [ 0>=1+free_3 && B>=1+A && 0>=1+free_1 && B>=2+A ], cost: B-A


Eliminated locations:
  Start location: f5
     17: f5 -> f300 : C'=A, [ A>=1+C && A>=B ], cost: 1+A-C
     18: f4 -> f300 : C'=A, [ A>=B && A>=2+C && A>=B ], cost: A-C
     28: f4 -> f2 : D'=0, [ B>=1+A && B>=1+A ], cost: INF
     21: f2 -> f4 : A'=B, D'=free, [ free_2>=1 && B>=1+A && free>=1 && B>=2+A ], cost: B-A
     22: f2 -> f4 : A'=B, D'=free, [ 0>=1+free_3 && B>=1+A && free>=1 && B>=2+A ], cost: B-A
     25: f2 -> f4 : A'=B, D'=free_1, [ free_2>=1 && B>=1+A && 0>=1+free_1 && B>=2+A ], cost: B-A
     26: f2 -> f4 : A'=B, D'=free_1, [ 0>=1+free_3 && B>=1+A && 0>=1+free_1 && B>=2+A ], cost: B-A


Pruned:
  Start location: f5
     17: f5 -> f300 : C'=A, [ A>=1+C && A>=B ], cost: 1+A-C


Final control flow graph problem, now checking costs for infinitely many models:
  Start location: f5
     17: f5 -> f300 : C'=A, [ A>=1+C && A>=B ], cost: 1+A-C


Computing complexity for remaining 1 transitions.

Created initial limit problem:
1-B+A (+/+!), 1+A-C (+), A-C (+/+!) [not solved]

applying transformation rule (A), replacing 1-B+A (+/+!) by 1 (+!) and -B+A (+!) using +! limit vector (+!,+!)
resulting limit problem:
1 (+!), -B+A (+!), 1+A-C (+), A-C (+/+!) [not solved]

applying transformation rule (B), deleting 1 (+!)
resulting limit problem:
-B+A (+!), 1+A-C (+), A-C (+/+!) [not solved]

applying transformation rule (A), replacing -B+A (+!) by -B (+!) and A (+!) using +! limit vector (+!,+!)
resulting limit problem:
1+A-C (+), A-C (+/+!), A (+!), -B (+!) [not solved]

applying transformation rule (C) using substitution {A==1}
resulting limit problem:
1 (+!), 2-C (+), 1-C (+/+!), -B (+!) [not solved]

applying transformation rule (B), deleting 1 (+!)
resulting limit problem:
2-C (+), 1-C (+/+!), -B (+!) [not solved]

applying transformation rule (D), replacing 2-C (+) by -C (+)
resulting limit problem:
-C (+), 1-C (+/+!), -B (+!) [not solved]

applying transformation rule (D), replacing 1-C (+/+!) by -C (+)
resulting limit problem:
-C (+), -B (+!) [not solved]

applying transformation rule (C) using substitution {B==-1}
resulting limit problem:
1 (+!), -C (+) [not solved]

applying transformation rule (B), deleting 1 (+!)
resulting limit problem:
-C (+) [not solved]

applying transformation rule (A), replacing -C (+) by C (-) and -1 (-!) using + limit vector (-,-!)
resulting limit problem:
-1 (-!), C (-) [not solved]

applying transformation rule (B), deleting -1 (-!)
resulting limit problem:
C (-) [solved]

Solution:
B / -1
A / 1
C / -n
Found new complexity n^1, because: Solved the initial limit problem.


The final runtime is determined by this resulting transition:
  Final Guard: A>=1+C && A>=B
  Final Cost:  2+n

Obtained the following complexity w.r.t. the length of the input n:
  Complexity class: n^1
  Complexity value: 1

WORST_CASE(Omega(n^1),?)
