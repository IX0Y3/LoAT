Trying to load file: heidy7.koat

Initial Control flow graph problem:
  Start location: f0
      0: f0 -> f1 : A'=0, [], cost: 1
      1: f1 -> f1 : B'=-1+B, C'=free, [ B>=1 && free>=1 ], cost: 1
      2: f1 -> f1 : B'=-2+B, C'=free_1, [ B>=1 && 0>=free_1 ], cost: 1
      3: f1 -> f4 : C'=free_2, [ 0>=B ], cost: 1
      4: f4 -> f4 : A'=1, C'=free_3, [ C>=1 ], cost: 1
      5: f4 -> f4 : A'=2, C'=free_4, [ 0>=C ], cost: 1

Eliminating 2 self-loops for location f1
  Self-Loop 1 has the metering function: B, resulting in the new transition 6.
  Self-Loop 2 has the metering function: meter, resulting in the new transition 7.
  Removing the self-loops: 1 2.
Eliminating 2 self-loops for location f4
  Removing the self-loops: 4 5.

Accelerated all simple loops using metering functions (where possible):
  Start location: f0
      0: f0 -> f1 : A'=0, [], cost: 1
      6: f1 -> f1 : B'=0, C'=free, [ B>=1 && free>=1 ], cost: B
      7: f1 -> f1 : B'=-2*meter+B, C'=free_1, [ B>=1 && 0>=free_1 && 2*meter==B ], cost: meter
      3: f1 -> f4 : C'=free_2, [ 0>=B ], cost: 1
      8: f4 -> f4 : A'=1, C'=free_3, [ C>=1 ], cost: 1
      9: f4 -> f4 : A'=2, C'=free_4, [ 0>=C ], cost: 1


Chained simpled loops:
  Start location: f0
     10: f0 -> f1 : A'=0, B'=0, C'=free, [ B>=1 && free>=1 ], cost: 1+B
     11: f0 -> f1 : A'=0, B'=-2*meter+B, C'=free_1, [ B>=1 && 0>=free_1 && 2*meter==B ], cost: 1+meter
      3: f1 -> f4 : C'=free_2, [ 0>=B ], cost: 1
     12: f1 -> f4 : A'=1, C'=free_3, [ 0>=B && free_2>=1 ], cost: 2
     13: f1 -> f4 : A'=2, C'=free_4, [ 0>=B && 0>=free_2 ], cost: 2


Eliminated locations (branches):
  Start location: f0
     14: f0 -> f4 : A'=0, B'=0, C'=free_2, [ B>=1 && free>=1 && 0>=0 ], cost: 2+B
     15: f0 -> f4 : A'=1, B'=0, C'=free_3, [ B>=1 && free>=1 && 0>=0 && free_2>=1 ], cost: 3+B
     16: f0 -> f4 : A'=2, B'=0, C'=free_4, [ B>=1 && free>=1 && 0>=0 && 0>=free_2 ], cost: 3+B
     17: f0 -> f4 : A'=0, B'=-2*meter+B, C'=free_2, [ B>=1 && 0>=free_1 && 2*meter==B && 0>=-2*meter+B ], cost: 2+meter
     18: f0 -> f4 : A'=1, B'=-2*meter+B, C'=free_3, [ B>=1 && 0>=free_1 && 2*meter==B && 0>=-2*meter+B && free_2>=1 ], cost: 3+meter
     19: f0 -> f4 : A'=2, B'=-2*meter+B, C'=free_4, [ B>=1 && 0>=free_1 && 2*meter==B && 0>=-2*meter+B && 0>=free_2 ], cost: 3+meter

Created initial limit problem:
1 (+/+!), 2+B (+), free (+/+!), B (+/+!) [not solved]

applying transformation rule (B), deleting 1 (+/+!)
resulting limit problem:
2+B (+), free (+/+!), B (+/+!) [not solved]

applying transformation rule (D), replacing 2+B (+) by B (+)
resulting limit problem:
free (+/+!), B (+) [solved]

Solution:
free / n
B / n
Created initial limit problem:
1 (+/+!), 3+B (+), free (+/+!), B (+/+!), free_2 (+/+!) [not solved]

applying transformation rule (B), deleting 1 (+/+!)
resulting limit problem:
3+B (+), free (+/+!), B (+/+!), free_2 (+/+!) [not solved]

applying transformation rule (D), replacing 3+B (+) by B (+)
resulting limit problem:
free (+/+!), B (+), free_2 (+/+!) [solved]

Solution:
free / n
B / n
free_2 / n
Created initial limit problem:
1-free_2 (+/+!), 1 (+/+!), 3+B (+), free (+/+!), B (+/+!) [not solved]

applying transformation rule (B), deleting 1 (+/+!)
resulting limit problem:
1-free_2 (+/+!), 3+B (+), free (+/+!), B (+/+!) [not solved]

applying transformation rule (D), replacing 1-free_2 (+/+!) by -free_2 (+)
resulting limit problem:
-free_2 (+), 3+B (+), free (+/+!), B (+/+!) [not solved]

applying transformation rule (D), replacing 3+B (+) by B (+)
resulting limit problem:
-free_2 (+), free (+/+!), B (+) [not solved]

applying transformation rule (C) using substitution {free==B}
resulting limit problem:
-free_2 (+), B (+) [not solved]

applying transformation rule (A), replacing -free_2 (+) by free_2 (-) and -1 (-!) using + limit vector (-,-!)
resulting limit problem:
-1 (-!), B (+), free_2 (-) [not solved]

applying transformation rule (B), deleting -1 (-!)
resulting limit problem:
B (+), free_2 (-) [solved]

Solution:
free / n
B / n
free_2 / -n

Pruned:
  Start location: f0
     14: f0 -> f4 : A'=0, B'=0, C'=free_2, [ B>=1 && free>=1 && 0>=0 ], cost: 2+B
     15: f0 -> f4 : A'=1, B'=0, C'=free_3, [ B>=1 && free>=1 && 0>=0 && free_2>=1 ], cost: 3+B
     16: f0 -> f4 : A'=2, B'=0, C'=free_4, [ B>=1 && free>=1 && 0>=0 && 0>=free_2 ], cost: 3+B
     17: f0 -> f4 : A'=0, B'=-2*meter+B, C'=free_2, [ B>=1 && 0>=free_1 && 2*meter==B && 0>=-2*meter+B ], cost: 2+meter
     19: f0 -> f4 : A'=2, B'=-2*meter+B, C'=free_4, [ B>=1 && 0>=free_1 && 2*meter==B && 0>=-2*meter+B && 0>=free_2 ], cost: 3+meter


Final control flow graph problem, now checking costs for infinitely many models:
  Start location: f0
     14: f0 -> f4 : A'=0, B'=0, C'=free_2, [ B>=1 && free>=1 && 0>=0 ], cost: 2+B
     15: f0 -> f4 : A'=1, B'=0, C'=free_3, [ B>=1 && free>=1 && 0>=0 && free_2>=1 ], cost: 3+B
     16: f0 -> f4 : A'=2, B'=0, C'=free_4, [ B>=1 && free>=1 && 0>=0 && 0>=free_2 ], cost: 3+B
     17: f0 -> f4 : A'=0, B'=-2*meter+B, C'=free_2, [ B>=1 && 0>=free_1 && 2*meter==B && 0>=-2*meter+B ], cost: 2+meter
     19: f0 -> f4 : A'=2, B'=-2*meter+B, C'=free_4, [ B>=1 && 0>=free_1 && 2*meter==B && 0>=-2*meter+B && 0>=free_2 ], cost: 3+meter


Computing complexity for remaining 5 transitions.

Created initial limit problem:
1 (+/+!), 2+B (+), free (+/+!), B (+/+!) [not solved]

applying transformation rule (B), deleting 1 (+/+!)
resulting limit problem:
2+B (+), free (+/+!), B (+/+!) [not solved]

applying transformation rule (D), replacing 2+B (+) by B (+)
resulting limit problem:
free (+/+!), B (+) [solved]

Solution:
free / n
B / n
Found new complexity n^1, because: Solved the initial limit problem.


The final runtime is determined by this resulting transition:
  Final Guard: B>=1 && free>=1 && 0>=0
  Final Cost:  2+n

Obtained the following complexity w.r.t. the length of the input n:
  Complexity class: n^1
  Complexity value: 1

WORST_CASE(Omega(n^1),?)
