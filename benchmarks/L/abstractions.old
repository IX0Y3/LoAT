Trying to load file: abstractions.koat

Initial Control flow graph problem:
  Start location: start
      0: eval -> eval : A'=-1+A, B'=free, [ A>=1 && B>=1 ], cost: 1
      1: eval -> eval : B'=-1+B, [ A>=1 && B>=1 ], cost: 1
      2: start -> eval : [], cost: 1

Eliminating 2 self-loops for location eval
  Self-Loop 1 has the metering function: B, resulting in the new transition 4.
  Removing the self-loops: 0 1.

Accelerated all simple loops using metering functions (where possible):
  Start location: start
      3: eval -> eval : A'=-1+A, B'=free, [ A>=1 && B>=1 ], cost: 1
      4: eval -> eval : B'=0, [ A>=1 && B>=1 ], cost: B
      2: start -> eval : [], cost: 1


Chained simpled loops:
  Start location: start
      2: start -> eval : [], cost: 1
      5: start -> eval : A'=-1+A, B'=free, [ A>=1 && B>=1 ], cost: 2
      6: start -> eval : B'=0, [ A>=1 && B>=1 ], cost: 1+B


Final control flow graph problem, now checking costs for infinitely many models:
  Start location: start
      6: start -> eval : B'=0, [ A>=1 && B>=1 ], cost: 1+B


Computing complexity for remaining 1 transitions.

Created initial limit problem:
B (+/+!), A (+/+!), 1+B (+) [not solved]

applying transformation rule (D), replacing 1+B (+) by B (+)
resulting limit problem:
B (+), A (+/+!) [solved]

Solution:
B / n
A / n
Found new complexity n^1, because: Solved the initial limit problem.


The final runtime is determined by this resulting transition:
  Final Guard: A>=1 && B>=1
  Final Cost:  1+n

Obtained the following complexity w.r.t. the length of the input n:
  Complexity class: n^1
  Complexity value: 1

WORST_CASE(Omega(n^1),?)
