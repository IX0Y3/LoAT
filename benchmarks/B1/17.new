Trying to load file: 17.koat

Initial Control flow graph problem:
  Start location: start
      0: eval -> eval : A'=-1+A, [ B+A>=1 && A>=1+B ], cost: 1
      1: eval -> eval : A'=-1+A, [ 2*A>=1 && B==A ], cost: 1
      2: eval -> eval : B'=-1+B, [ B+A>=1 && B>=A && B>=1+A ], cost: 1
      3: eval -> eval : B'=-1+B, [ B+A>=1 && B>=A && A>=1+B ], cost: 1
      4: start -> eval : [], cost: 1


Simplified the transitions:
  Start location: start
      0: eval -> eval : A'=-1+A, [ B+A>=1 && A>=1+B ], cost: 1
      1: eval -> eval : A'=-1+A, [ 2*A>=1 && B==A ], cost: 1
      2: eval -> eval : B'=-1+B, [ B+A>=1 && B>=1+A ], cost: 1
      3: eval -> eval : B'=-1+B, [ B+A>=1 && B>=A && A>=1+B ], cost: 1
      4: start -> eval : [], cost: 1


Try instantiation
  Start location: start
      5: eval -> eval : B'=-A, [ B+A>=1 && A<=0 ], cost: B+A
      6: eval -> eval : B'=A, [ B>=1+A && A>=0 ], cost: B-A
      7: eval -> eval : A'=0, [ B<=A && B>=A && B<=1 && B>=1 ], cost: A
      8: eval -> eval : A'=-1+B, [ B<=A && B>=A && B>=1 ], cost: 1-B+A
      9: eval -> eval : A'=-B, [ B+A>=1 && B<=0 ], cost: B+A
     10: eval -> eval : A'=B, [ A>=1+B && B>=0 ], cost: -B+A
      4: start -> eval : [], cost: 1

Eliminating 6 self-loops for location eval
  Self-Loop 7 has the metering function: 1-B+A, resulting in the new transition 13.
  Self-Loop 8 has the metering function: 1-B+A, resulting in the new transition 14.
  Removing the self-loops: 5 6 7 8 9 10.
Adding an epsilon transition (to model nonexecution of the loops): 17.

Removed all Self-loops using metering functions (where possible):
  Start location: start
     11: eval -> [2] : B'=-A, [ B+A>=1 && A<=0 ], cost: B+A
     12: eval -> [2] : B'=A, [ B>=1+A && A>=0 ], cost: B-A
     13: eval -> [2] : A'=0, [ B-A==0 && -1+B==0 ], cost: 0
     14: eval -> [2] : A'=-1+B, [ B-A==0 && B>=1 ], cost: 0
     15: eval -> [2] : A'=-B, [ B+A>=1 && B<=0 ], cost: B+A
     16: eval -> [2] : A'=B, [ A>=1+B && B>=0 ], cost: -B+A
     17: eval -> [2] : [], cost: 0
      4: start -> eval : [], cost: 1


Applied chaining over branches and pruning:
  Start location: start
     18: start -> [2] : B'=-A, [ B+A>=1 && A<=0 ], cost: 1+B+A
     19: start -> [2] : B'=A, [ B>=1+A && A>=0 ], cost: 1+B-A
     22: start -> [2] : A'=-B, [ B+A>=1 && B<=0 ], cost: 1+B+A
     23: start -> [2] : A'=B, [ A>=1+B && B>=0 ], cost: 1-B+A


Final control flow graph problem, now checking costs for infinitely many models:
  Start location: start
     18: start -> [2] : B'=-A, [ B+A>=1 && A<=0 ], cost: 1+B+A
     19: start -> [2] : B'=A, [ B>=1+A && A>=0 ], cost: 1+B-A
     22: start -> [2] : A'=-B, [ B+A>=1 && B<=0 ], cost: 1+B+A
     23: start -> [2] : A'=B, [ A>=1+B && B>=0 ], cost: 1-B+A


Computing complexity for remaining 4 transitions.

  Found configuration with infinitely models for cost: 1+B-A
  and guard: B>=1+A && A>=0:
  B: Pos, A: Pos, where: B > A

Found new complexity n^1, because: Found infinity configuration.


The final runtime is determined by this resulting transition:
  Final Guard: B>=1+A && A>=0
  Final Cost:  1+B-A

Obtained the following complexity w.r.t. the length of the input n:
  Complexity class: n^1
  Complexity value: 1

WORST_CASE(Omega(n^1),?)
