Trying to load file: speedpldi4.koat

Initial Control flow graph problem:
  Start location: evalspeedpldi4start
      0: evalspeedpldi4start -> evalspeedpldi4entryin : [], cost: 1
      1: evalspeedpldi4entryin -> evalspeedpldi4returnin : [ 0>=A ], cost: 1
      2: evalspeedpldi4entryin -> evalspeedpldi4returnin : [ A>=B ], cost: 1
      3: evalspeedpldi4entryin -> evalspeedpldi4bb5in : [ A>=1 && B>=1+A ], cost: 1
     10: evalspeedpldi4returnin -> evalspeedpldi4stop : [], cost: 1
      5: evalspeedpldi4bb5in -> evalspeedpldi4returnin : [ 0>=B ], cost: 1
      4: evalspeedpldi4bb5in -> evalspeedpldi4bb2in : [ B>=1 ], cost: 1
      6: evalspeedpldi4bb2in -> evalspeedpldi4bb3in : [ A>=1+B ], cost: 1
      7: evalspeedpldi4bb2in -> evalspeedpldi4bb4in : [ B>=A ], cost: 1
      8: evalspeedpldi4bb3in -> evalspeedpldi4bb5in : B'=-1+B, [], cost: 1
      9: evalspeedpldi4bb4in -> evalspeedpldi4bb5in : B'=B-A, [], cost: 1


Simplified the transitions:
  Start location: evalspeedpldi4start
      0: evalspeedpldi4start -> evalspeedpldi4entryin : [], cost: 1
      3: evalspeedpldi4entryin -> evalspeedpldi4bb5in : [ A>=1 && B>=1+A ], cost: 1
      4: evalspeedpldi4bb5in -> evalspeedpldi4bb2in : [ B>=1 ], cost: 1
      6: evalspeedpldi4bb2in -> evalspeedpldi4bb3in : [ A>=1+B ], cost: 1
      7: evalspeedpldi4bb2in -> evalspeedpldi4bb4in : [ B>=A ], cost: 1
      8: evalspeedpldi4bb3in -> evalspeedpldi4bb5in : B'=-1+B, [], cost: 1
      9: evalspeedpldi4bb4in -> evalspeedpldi4bb5in : B'=B-A, [], cost: 1


Applied simple chaining:
  Start location: evalspeedpldi4start
      0: evalspeedpldi4start -> evalspeedpldi4bb5in : [ A>=1 && B>=1+A ], cost: 2
      4: evalspeedpldi4bb5in -> evalspeedpldi4bb2in : [ B>=1 ], cost: 1
      6: evalspeedpldi4bb2in -> evalspeedpldi4bb5in : B'=-1+B, [ A>=1+B ], cost: 2
      7: evalspeedpldi4bb2in -> evalspeedpldi4bb5in : B'=B-A, [ B>=A ], cost: 2


Applied chaining over branches and pruning:
  Start location: evalspeedpldi4start
      0: evalspeedpldi4start -> evalspeedpldi4bb5in : [ A>=1 && B>=1+A ], cost: 2
     11: evalspeedpldi4bb5in -> evalspeedpldi4bb5in : B'=-1+B, [ B>=1 && A>=1+B ], cost: 3
     12: evalspeedpldi4bb5in -> evalspeedpldi4bb5in : B'=B-A, [ B>=1 && B>=A ], cost: 3


Try instantiation
  Start location: evalspeedpldi4start
      0: evalspeedpldi4start -> evalspeedpldi4bb5in : [ A>=1 && B>=1+A ], cost: 2
     13: evalspeedpldi4bb5in -> evalspeedpldi4bb5in : [ B>=1 && A<=-1 && A>=-1 ], cost: INF
     14: evalspeedpldi4bb5in -> evalspeedpldi4bb5in : B'=0, [ B>=1 && A<=1 && A>=1 ], cost: 3*B
     15: evalspeedpldi4bb5in -> evalspeedpldi4bb5in : B'=0, [ B>=1 && A>=1+B ], cost: 3*B

Eliminating 3 self-loops for location evalspeedpldi4bb5in
  Removing the self-loops: 13 14 15.
Adding an epsilon transition (to model nonexecution of the loops): 19.

Removed all Self-loops using metering functions (where possible):
  Start location: evalspeedpldi4start
      0: evalspeedpldi4start -> evalspeedpldi4bb5in : [ A>=1 && B>=1+A ], cost: 2
     16: evalspeedpldi4bb5in -> [8] : [ B>=1 && A<=-1 && A>=-1 ], cost: INF
     17: evalspeedpldi4bb5in -> [8] : B'=0, [ B>=1 && -1+A==0 ], cost: 3*B
     18: evalspeedpldi4bb5in -> [8] : B'=0, [ B>=1 && A>=1+B ], cost: 3*B
     19: evalspeedpldi4bb5in -> [8] : [], cost: 0


Applied chaining over branches and pruning:
  Start location: evalspeedpldi4start
     20: evalspeedpldi4start -> [8] : B'=0, [ A>=1 && B>=1+A && B>=1 && -1+A==0 ], cost: 2+3*B


Final control flow graph problem, now checking costs for infinitely many models:
  Start location: evalspeedpldi4start
     20: evalspeedpldi4start -> [8] : B'=0, [ A>=1 && B>=1+A && B>=1 && -1+A==0 ], cost: 2+3*B


Computing complexity for remaining 1 transitions.

  Found configuration with infinitely models for cost: 2+3*B
  and guard: A>=1 && B>=1+A && B>=1 && -1+A==0:
  B: Pos, A: Both

Found new complexity n^1, because: Found infinity configuration.


The final runtime is determined by this resulting transition:
  Final Guard: A>=1 && B>=1+A && B>=1 && -1+A==0
  Final Cost:  2+3*B

Obtained the following complexity w.r.t. the length of the input n:
  Complexity class: n^1
  Complexity value: 1

WORST_CASE(Omega(n^1),?)
