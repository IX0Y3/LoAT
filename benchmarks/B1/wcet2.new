Trying to load file: wcet2.koat

Initial Control flow graph problem:
  Start location: evalwcet2start
      0: evalwcet2start -> evalwcet2entryin : [], cost: 1
      1: evalwcet2entryin -> evalwcet2bb5in : [], cost: 1
      2: evalwcet2bb5in -> evalwcet2bb2in : B'=0, [ 4>=A ], cost: 1
      3: evalwcet2bb5in -> evalwcet2returnin : [ A>=5 ], cost: 1
      4: evalwcet2bb2in -> evalwcet2bb1in : [ A>=3 && 9>=B ], cost: 1
      5: evalwcet2bb2in -> evalwcet2bb4in : [ 2>=A ], cost: 1
      6: evalwcet2bb2in -> evalwcet2bb4in : [ B>=10 ], cost: 1
      9: evalwcet2returnin -> evalwcet2stop : [], cost: 1
      7: evalwcet2bb1in -> evalwcet2bb2in : B'=1+B, [], cost: 1
      8: evalwcet2bb4in -> evalwcet2bb5in : A'=1+A, [], cost: 1


Simplified the transitions:
  Start location: evalwcet2start
      0: evalwcet2start -> evalwcet2entryin : [], cost: 1
      1: evalwcet2entryin -> evalwcet2bb5in : [], cost: 1
      2: evalwcet2bb5in -> evalwcet2bb2in : B'=0, [ 4>=A ], cost: 1
      4: evalwcet2bb2in -> evalwcet2bb1in : [ A>=3 && 9>=B ], cost: 1
      5: evalwcet2bb2in -> evalwcet2bb4in : [ 2>=A ], cost: 1
      6: evalwcet2bb2in -> evalwcet2bb4in : [ B>=10 ], cost: 1
      7: evalwcet2bb1in -> evalwcet2bb2in : B'=1+B, [], cost: 1
      8: evalwcet2bb4in -> evalwcet2bb5in : A'=1+A, [], cost: 1


Applied simple chaining:
  Start location: evalwcet2start
      0: evalwcet2start -> evalwcet2bb5in : [], cost: 2
      2: evalwcet2bb5in -> evalwcet2bb2in : B'=0, [ 4>=A ], cost: 1
      4: evalwcet2bb2in -> evalwcet2bb2in : B'=1+B, [ A>=3 && 9>=B ], cost: 2
      5: evalwcet2bb2in -> evalwcet2bb4in : [ 2>=A ], cost: 1
      6: evalwcet2bb2in -> evalwcet2bb4in : [ B>=10 ], cost: 1
      8: evalwcet2bb4in -> evalwcet2bb5in : A'=1+A, [], cost: 1


Try instantiation
  Start location: evalwcet2start
      0: evalwcet2start -> evalwcet2bb5in : [], cost: 2
      2: evalwcet2bb5in -> evalwcet2bb2in : B'=0, [ 4>=A ], cost: 1
     10: evalwcet2bb2in -> evalwcet2bb2in : B'=10, [ 9>=B && A>=3 ], cost: 20-2*B
      5: evalwcet2bb2in -> evalwcet2bb4in : [ 2>=A ], cost: 1
      6: evalwcet2bb2in -> evalwcet2bb4in : [ B>=10 ], cost: 1
      8: evalwcet2bb4in -> evalwcet2bb5in : A'=1+A, [], cost: 1

Eliminating 1 self-loops for location evalwcet2bb2in
  Removing the self-loops: 10.
Adding an epsilon transition (to model nonexecution of the loops): 12.

Removed all Self-loops using metering functions (where possible):
  Start location: evalwcet2start
      0: evalwcet2start -> evalwcet2bb5in : [], cost: 2
      2: evalwcet2bb5in -> evalwcet2bb2in : B'=0, [ 4>=A ], cost: 1
     11: evalwcet2bb2in -> [8] : B'=10, [ 9>=B && A>=3 ], cost: 20-2*B
     12: evalwcet2bb2in -> [8] : [], cost: 0
      8: evalwcet2bb4in -> evalwcet2bb5in : A'=1+A, [], cost: 1
      5: [8] -> evalwcet2bb4in : [ 2>=A ], cost: 1
      6: [8] -> evalwcet2bb4in : [ B>=10 ], cost: 1


Applied chaining over branches and pruning:
  Start location: evalwcet2start
      0: evalwcet2start -> evalwcet2bb5in : [], cost: 2
     13: evalwcet2bb5in -> [8] : B'=10, [ 4>=A && 9>=0 && A>=3 ], cost: 21
     14: evalwcet2bb5in -> [8] : B'=0, [ 4>=A ], cost: 1
     15: [8] -> evalwcet2bb5in : A'=1+A, [ 2>=A ], cost: 2
     16: [8] -> evalwcet2bb5in : A'=1+A, [ B>=10 ], cost: 2


Applied chaining over branches and pruning:
  Start location: evalwcet2start
      0: evalwcet2start -> evalwcet2bb5in : [], cost: 2
     17: evalwcet2bb5in -> evalwcet2bb5in : A'=1+A, B'=10, [ 4>=A && 9>=0 && A>=3 && 10>=10 ], cost: 23
     18: evalwcet2bb5in -> evalwcet2bb5in : A'=1+A, B'=0, [ 4>=A && 2>=A ], cost: 3


Try instantiation
  Start location: evalwcet2start
      0: evalwcet2start -> evalwcet2bb5in : [], cost: 2
     19: evalwcet2bb5in -> evalwcet2bb5in : A'=3, B'=0, [ 2>=A ], cost: 9-3*A
     20: evalwcet2bb5in -> evalwcet2bb5in : A'=5, B'=10, [ 4>=A && A>=3 ], cost: 115-23*A

Eliminating 2 self-loops for location evalwcet2bb5in
  Self-Loop 20 has the metering function: meter, resulting in the new transition 22.
  Removing the self-loops: 19 20.
Adding an epsilon transition (to model nonexecution of the loops): 23.

Removed all Self-loops using metering functions (where possible):
  Start location: evalwcet2start
      0: evalwcet2start -> evalwcet2bb5in : [], cost: 2
     21: evalwcet2bb5in -> [9] : A'=3, B'=0, [ 2>=A ], cost: 9-3*A
     22: evalwcet2bb5in -> [9] : A'=5, B'=10, [ 4>=A && A>=3 && 2*meter==4-A ], cost: 0
     23: evalwcet2bb5in -> [9] : [], cost: 0


Applied chaining over branches and pruning:
  Start location: evalwcet2start
     24: evalwcet2start -> [9] : A'=3, B'=0, [ 2>=A ], cost: 11-3*A


Final control flow graph problem, now checking costs for infinitely many models:
  Start location: evalwcet2start
     24: evalwcet2start -> [9] : A'=3, B'=0, [ 2>=A ], cost: 11-3*A


Computing complexity for remaining 1 transitions.

  Found configuration with infinitely models for cost: 11-3*A
  and guard: 2>=A:
  A: Neg

Found new complexity n^1, because: Found infinity configuration.


The final runtime is determined by this resulting transition:
  Final Guard: 2>=A
  Final Cost:  11-3*A

Obtained the following complexity w.r.t. the length of the input n:
  Complexity class: n^1
  Complexity value: 1

WORST_CASE(Omega(n^1),?)
