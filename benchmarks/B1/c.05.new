Trying to load file: c.05.koat

Initial Control flow graph problem:
  Start location: start
      0: eval -> eval : A'=-B+A, [ A>=1+B && A>=1 && B>=1 ], cost: 1
      1: eval -> eval : A'=-B+A, [ B>=1+A && A>=1 && B>=1 && A>=1+B ], cost: 1
      2: eval -> eval : B'=B-A, [ A>=1+B && A>=1 && B>=1 && B>=A ], cost: 1
      3: eval -> eval : B'=B-A, [ B>=1+A && A>=1 && B>=1 && B>=A ], cost: 1
      4: start -> eval : [], cost: 1


Simplified the transitions:
  Start location: start
      0: eval -> eval : A'=-B+A, [ A>=1+B && A>=1 && B>=1 ], cost: 1
      1: eval -> eval : A'=-B+A, [ B>=1+A && A>=1 && B>=1 && A>=1+B ], cost: 1
      2: eval -> eval : B'=B-A, [ A>=1+B && A>=1 && B>=1 && B>=A ], cost: 1
      3: eval -> eval : B'=B-A, [ B>=1+A && A>=1 && B>=1 ], cost: 1
      4: start -> eval : [], cost: 1


Try instantiation
  Start location: start
      5: eval -> eval : B'=1, [ B>=2 && A<=1 && A>=1 ], cost: -1+B
      6: eval -> eval : A'=1, [ A>=2 && B<=1 && B>=1 ], cost: -1+A
      4: start -> eval : [], cost: 1

Eliminating 2 self-loops for location eval
  Removing the self-loops: 5 6.
Adding an epsilon transition (to model nonexecution of the loops): 9.

Removed all Self-loops using metering functions (where possible):
  Start location: start
      7: eval -> [2] : B'=1, [ B>=2 && -1+A==0 ], cost: -1+B
      8: eval -> [2] : A'=1, [ A>=2 && -1+B==0 ], cost: -1+A
      9: eval -> [2] : [], cost: 0
      4: start -> eval : [], cost: 1


Applied chaining over branches and pruning:
  Start location: start
     10: start -> [2] : B'=1, [ B>=2 && -1+A==0 ], cost: B
     11: start -> [2] : A'=1, [ A>=2 && -1+B==0 ], cost: A


Final control flow graph problem, now checking costs for infinitely many models:
  Start location: start
     10: start -> [2] : B'=1, [ B>=2 && -1+A==0 ], cost: B
     11: start -> [2] : A'=1, [ A>=2 && -1+B==0 ], cost: A


Computing complexity for remaining 2 transitions.

  Found configuration with infinitely models for cost: B
  and guard: B>=2 && -1+A==0:
  B: Pos, A: Both

Found new complexity n^1, because: Found infinity configuration.


The final runtime is determined by this resulting transition:
  Final Guard: B>=2 && -1+A==0
  Final Cost:  B

Obtained the following complexity w.r.t. the length of the input n:
  Complexity class: n^1
  Complexity value: 1

WORST_CASE(Omega(n^1),?)
