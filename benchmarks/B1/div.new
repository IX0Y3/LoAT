Trying to load file: div.koat

Initial Control flow graph problem:
  Start location: start
      2: div -> div : B'=B-A, [ B>=1+A && A>=1 ], cost: 1
      0: div -> end : [ 0>=A ], cost: 1
      1: div -> end : [ A>=B ], cost: 1
      3: start -> div : [], cost: 1


Simplified the transitions:
  Start location: start
      2: div -> div : B'=B-A, [ B>=1+A && A>=1 ], cost: 1
      3: start -> div : [], cost: 1


Try instantiation
  Start location: start
      4: div -> div : B'=1, [ B>=2 && A<=1 && A>=1 ], cost: -1+B
      3: start -> div : [], cost: 1

Eliminating 1 self-loops for location div
  Removing the self-loops: 4.
Adding an epsilon transition (to model nonexecution of the loops): 6.

Removed all Self-loops using metering functions (where possible):
  Start location: start
      5: div -> [3] : B'=1, [ B>=2 && -1+A==0 ], cost: -1+B
      6: div -> [3] : [], cost: 0
      3: start -> div : [], cost: 1


Applied chaining over branches and pruning:
  Start location: start
      7: start -> [3] : B'=1, [ B>=2 && -1+A==0 ], cost: B


Final control flow graph problem, now checking costs for infinitely many models:
  Start location: start
      7: start -> [3] : B'=1, [ B>=2 && -1+A==0 ], cost: B


Computing complexity for remaining 1 transitions.

  Found configuration with infinitely models for cost: B
  and guard: B>=2 && -1+A==0:
  B: Pos, A: Both

Found new complexity n^1, because: Found infinity configuration.


The final runtime is determined by this resulting transition:
  Final Guard: B>=2 && -1+A==0
  Final Cost:  B

Obtained the following complexity w.r.t. the length of the input n:
  Complexity class: n^1
  Complexity value: 1

WORST_CASE(Omega(n^1),?)
