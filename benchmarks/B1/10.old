Trying to load file: 10.koat

Initial Control flow graph problem:
  Start location: start
      0: eval -> eval : A'=0, [ 2*free>=0 && 0>=2*free && A==1 ], cost: 1
      1: eval -> eval : A'=2*free_1, [ 2*free_1>=0 && 2+2*free_1>=0 && A==1+2*free_1 ], cost: 1
      2: eval -> eval : A'=free_2, [ 1>=2*free_3 && 2*free_3>=0 && 2*free_4>=1 && 1>=2*free_4 && 1>=2*free_5 && 3*free_5>=2 && free_2>=free_5 && 1>=2*free_6 && 3*free_6>=2 && free_6>=free_2 && A==1 ], cost: 1
      3: eval -> eval : A'=free_7, [ 2*free_8>=1 && 1+2*free_8>=0 && 2*free_8>=2*free_9 && 1+2*free_9>=2*free_8 && 2*free_8>=2*free_10 && 3*free_10>=1+2*free_8 && free_7>=free_10 && 2*free_8>=2*free_11 && 3*free_11>=1+2*free_8 && free_11>=free_7 && A==2*free_8 ], cost: 1
      4: start -> eval : [], cost: 1


Simplified the transitions:
  Start location: start
      0: eval -> eval : A'=0, [ -2*free==0 && A==1 ], cost: 1
      1: eval -> eval : A'=2*free_1, [ 2*free_1>=0 && A==1+2*free_1 ], cost: 1
      2: eval -> eval : A'=free_2, [ 1>=2*free_3 && 2*free_3>=0 && 1-2*free_4==0 && 1>=2*free_5 && 3*free_5>=2 && free_2>=free_5 && 1>=2*free_6 && 3*free_6>=2 && free_6>=free_2 ], cost: 1
      3: eval -> eval : A'=free_7, [ 2*free_8>=1 && 2*free_8>=2*free_9 && 1+2*free_9>=2*free_8 && 2*free_8>=2*free_10 && 3*free_10>=1+2*free_8 && free_7>=free_10 && 2*free_8>=2*free_11 && 3*free_11>=1+2*free_8 && free_11>=free_7 && A==2*free_8 ], cost: 1
      4: start -> eval : [], cost: 1

Eliminating 4 self-loops for location eval
  Removing the self-loops: 0 1 2 3.

Accelerated all simple loops using metering functions (where possible):
  Start location: start
      5: eval -> eval : A'=0, [ -2*free==0 && A==1 ], cost: 1
      6: eval -> eval : A'=2*free_1, [ 2*free_1>=0 && A==1+2*free_1 ], cost: 1
      7: eval -> eval : A'=free_2, [ 1-2*free_4==0 ], cost: 1
      8: eval -> eval : A'=free_7, [ 2*free_8>=1 && 2*free_8>=2*free_9 && 1+2*free_9>=2*free_8 && 2*free_8>=2*free_10 && 3*free_10>=1+2*free_8 && free_7>=free_10 && 2*free_8>=2*free_11 && 3*free_11>=1+2*free_8 && free_11>=free_7 && A==2*free_8 ], cost: 1
      4: start -> eval : [], cost: 1


Chained simpled loops:
  Start location: start
      4: start -> eval : [], cost: 1
      9: start -> eval : A'=0, [ -2*free==0 && A==1 ], cost: 2
     10: start -> eval : A'=2*free_1, [ 2*free_1>=0 && A==1+2*free_1 ], cost: 2
     11: start -> eval : A'=free_7, [ 2*free_8>=1 && 2*free_8>=2*free_9 && 1+2*free_9>=2*free_8 && 2*free_8>=2*free_10 && 3*free_10>=1+2*free_8 && free_7>=free_10 && 2*free_8>=2*free_11 && 3*free_11>=1+2*free_8 && free_11>=free_7 && A==2*free_8 ], cost: 2


Pruned:
  Start location: start
    <empty>


Final control flow graph problem, now checking costs for infinitely many models:
  Start location: start
    <empty>


Computing complexity for remaining 0 transitions.


The final runtime is determined by this resulting transition:
  Final Guard: 
  Final Cost:  1

Obtained the following complexity w.r.t. the length of the input n:
  Complexity class: const
  Complexity value: 0

WORST_CASE(Omega(1),?)
