Trying to load file: rationalPotential.koat

Initial Control flow graph problem:
  Start location: start
      0: zip3 -> zip3 : A'=-1+A, B'=-1+B, C'=-1+C, [ A>=1 && B>=1 && C>=1 ], cost: 1
      1: group3 -> group3 : A'=-3+A, [ A>=4 ], cost: 1
      2: start -> zip3 : [], cost: 1


Simplified the transitions:
  Start location: start
      0: zip3 -> zip3 : A'=-1+A, B'=-1+B, C'=-1+C, [ A>=1 && B>=1 && C>=1 ], cost: 1
      2: start -> zip3 : [], cost: 1


Try instantiation
  Start location: start
      3: zip3 -> zip3 : A'=0, B'=B-A, C'=-A+C, [ A>=1 && B-A>=0 && -A+C>=0 ], cost: A
      4: zip3 -> zip3 : A'=-B+A, B'=0, C'=-B+C, [ B>=1 && -B+A>=0 && -B+C>=0 ], cost: B
      5: zip3 -> zip3 : A'=A-C, B'=B-C, C'=0, [ C>=1 && A-C>=0 && B-C>=0 ], cost: C
      2: start -> zip3 : [], cost: 1

Eliminating 3 self-loops for location zip3
  Removing the self-loops: 3 4 5.
Adding an epsilon transition (to model nonexecution of the loops): 9.

Removed all Self-loops using metering functions (where possible):
  Start location: start
      6: zip3 -> [3] : A'=0, B'=B-A, C'=-A+C, [ A>=1 && B-A>=0 && -A+C>=0 ], cost: A
      7: zip3 -> [3] : A'=-B+A, B'=0, C'=-B+C, [ B>=1 && -B+A>=0 && -B+C>=0 ], cost: B
      8: zip3 -> [3] : A'=A-C, B'=B-C, C'=0, [ C>=1 && A-C>=0 && B-C>=0 ], cost: C
      9: zip3 -> [3] : [], cost: 0
      2: start -> zip3 : [], cost: 1


Applied chaining over branches and pruning:
  Start location: start
     10: start -> [3] : A'=0, B'=B-A, C'=-A+C, [ A>=1 && B-A>=0 && -A+C>=0 ], cost: 1+A
     11: start -> [3] : A'=-B+A, B'=0, C'=-B+C, [ B>=1 && -B+A>=0 && -B+C>=0 ], cost: 1+B
     12: start -> [3] : A'=A-C, B'=B-C, C'=0, [ C>=1 && A-C>=0 && B-C>=0 ], cost: 1+C


Final control flow graph problem, now checking costs for infinitely many models:
  Start location: start
     10: start -> [3] : A'=0, B'=B-A, C'=-A+C, [ A>=1 && B-A>=0 && -A+C>=0 ], cost: 1+A
     11: start -> [3] : A'=-B+A, B'=0, C'=-B+C, [ B>=1 && -B+A>=0 && -B+C>=0 ], cost: 1+B
     12: start -> [3] : A'=A-C, B'=B-C, C'=0, [ C>=1 && A-C>=0 && B-C>=0 ], cost: 1+C


Computing complexity for remaining 3 transitions.

  Found configuration with infinitely models for cost: 1+A
  and guard: A>=1 && B-A>=0 && -A+C>=0:
  B: Pos, A: Pos, C: Pos, where: B > A C > A

Found new complexity n^1, because: Found infinity configuration.


The final runtime is determined by this resulting transition:
  Final Guard: A>=1 && B-A>=0 && -A+C>=0
  Final Cost:  1+A

Obtained the following complexity w.r.t. the length of the input n:
  Complexity class: n^1
  Complexity value: 1

WORST_CASE(Omega(n^1),?)
