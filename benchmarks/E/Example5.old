Trying to load file: Example5.koat

Initial Control flow graph problem:
  Start location: evalfstart
      0: evalfstart -> evalfentryin : [], cost: 1
      1: evalfentryin -> evalfbb3in : A'=C, C'=A, [ A>=1 && B>=1+A ], cost: 1
      2: evalfbb3in -> evalfbbin : [ C>=1 && B>=1+C ], cost: 1
      3: evalfbb3in -> evalfreturnin : [ 0>=C ], cost: 1
      4: evalfbb3in -> evalfreturnin : [ C>=B ], cost: 1
      5: evalfbbin -> evalfbb1in : [ A>=1 ], cost: 1
      6: evalfbbin -> evalfbb2in : [ 0>=A ], cost: 1
      9: evalfreturnin -> evalfstop : [], cost: 1
      7: evalfbb1in -> evalfbb3in : C'=1+C, [], cost: 1
      8: evalfbb2in -> evalfbb3in : C'=-1+C, [], cost: 1


Simplified the transitions:
  Start location: evalfstart
      0: evalfstart -> evalfentryin : [], cost: 1
      1: evalfentryin -> evalfbb3in : A'=C, C'=A, [ A>=1 && B>=1+A ], cost: 1
      2: evalfbb3in -> evalfbbin : [ C>=1 && B>=1+C ], cost: 1
      5: evalfbbin -> evalfbb1in : [ A>=1 ], cost: 1
      6: evalfbbin -> evalfbb2in : [ 0>=A ], cost: 1
      7: evalfbb1in -> evalfbb3in : C'=1+C, [], cost: 1
      8: evalfbb2in -> evalfbb3in : C'=-1+C, [], cost: 1


Eliminated locations (linear):
  Start location: evalfstart
      0: evalfstart -> evalfbb3in : A'=C, C'=A, [ A>=1 && B>=1+A ], cost: 2
      2: evalfbb3in -> evalfbbin : [ C>=1 && B>=1+C ], cost: 1
      5: evalfbbin -> evalfbb3in : C'=1+C, [ A>=1 ], cost: 2
      6: evalfbbin -> evalfbb3in : C'=-1+C, [ 0>=A ], cost: 2


Eliminated locations (branches):
  Start location: evalfstart
      0: evalfstart -> evalfbb3in : A'=C, C'=A, [ A>=1 && B>=1+A ], cost: 2
     10: evalfbb3in -> evalfbb3in : C'=1+C, [ C>=1 && B>=1+C && A>=1 ], cost: 3
     11: evalfbb3in -> evalfbb3in : C'=-1+C, [ C>=1 && B>=1+C && 0>=A ], cost: 3

Eliminating 2 self-loops for location evalfbb3in
  Self-Loop 10 has the metering function: B-C, resulting in the new transition 12.
  Self-Loop 11 has the metering function: C, resulting in the new transition 13.
  Removing the self-loops: 10 11.

Accelerated all simple loops using metering functions (where possible):
  Start location: evalfstart
      0: evalfstart -> evalfbb3in : A'=C, C'=A, [ A>=1 && B>=1+A ], cost: 2
     12: evalfbb3in -> evalfbb3in : C'=B, [ C>=1 && B>=1+C && A>=1 ], cost: 3*B-3*C
     13: evalfbb3in -> evalfbb3in : C'=0, [ C>=1 && B>=1+C && 0>=A ], cost: 3*C


Chained simpled loops:
  Start location: evalfstart
     14: evalfstart -> evalfbb3in : A'=C, C'=B, [ A>=1 && B>=1+A && A>=1 && B>=1+A && C>=1 ], cost: 2+3*B-3*A
     15: evalfstart -> evalfbb3in : A'=C, C'=0, [ A>=1 && B>=1+A && A>=1 && B>=1+A && 0>=C ], cost: 2+3*A


Final control flow graph problem, now checking costs for infinitely many models:
  Start location: evalfstart
     14: evalfstart -> evalfbb3in : A'=C, C'=B, [ A>=1 && B>=1+A && A>=1 && B>=1+A && C>=1 ], cost: 2+3*B-3*A
     15: evalfstart -> evalfbb3in : A'=C, C'=0, [ A>=1 && B>=1+A && A>=1 && B>=1+A && 0>=C ], cost: 2+3*A


Computing complexity for remaining 2 transitions.

Created initial limit problem:
A (+/+!), B-A (+/+!), 2+3*B-3*A (+), C (+/+!) [not solved]

applying transformation rule (C) using substitution {A==C}
resulting limit problem:
2+3*B-3*C (+), B-C (+/+!), C (+/+!) [not solved]

applying transformation rule (C) using substitution {C==1}
resulting limit problem:
1 (+/+!), -1+3*B (+), -1+B (+/+!) [not solved]

applying transformation rule (B), deleting 1 (+/+!)
resulting limit problem:
-1+3*B (+), -1+B (+/+!) [not solved]

applying transformation rule (D), replacing -1+3*B (+) by 3*B (+)
resulting limit problem:
3*B (+), -1+B (+/+!) [not solved]

applying transformation rule (D), replacing -1+B (+/+!) by B (+)
resulting limit problem:
3*B (+), B (+) [not solved]

applying transformation rule (A), replacing 3*B (+) by B (+) and 3 (+!) using + limit vector (+,+!)
resulting limit problem:
3 (+!), B (+) [not solved]

applying transformation rule (B), deleting 3 (+!)
resulting limit problem:
B (+) [solved]

Solution:
B / n
A / 1
C / 1
Found new complexity n^1, because: Solved the initial limit problem.


The final runtime is determined by this resulting transition:
  Final Guard: A>=1 && B>=1+A && A>=1 && B>=1+A && C>=1
  Final Cost:  -1+3*n

Obtained the following complexity w.r.t. the length of the input n:
  Complexity class: n^1
  Complexity value: 1

WORST_CASE(Omega(n^1),?)
