Trying to load file: a.10.koat

Initial Control flow graph problem:
  Start location: start
      0: eval -> eval : B'=1+B, [ A>=1+B ], cost: 1
      1: eval -> eval : B'=1+B, [ B>=1+A && A>=1+B ], cost: 1
      2: eval -> eval : A'=1+A, [ A>=1+B && B>=A ], cost: 1
      3: eval -> eval : A'=1+A, [ B>=1+A && B>=A ], cost: 1
      4: start -> eval : [], cost: 1


Simplified the transitions:
  Start location: start
      0: eval -> eval : B'=1+B, [ A>=1+B ], cost: 1
      1: eval -> eval : B'=1+B, [ B>=1+A && A>=1+B ], cost: 1
      2: eval -> eval : A'=1+A, [ A>=1+B && B>=A ], cost: 1
      3: eval -> eval : A'=1+A, [ B>=1+A ], cost: 1
      4: start -> eval : [], cost: 1

Eliminating 4 self-loops for location eval
  Self-Loop 0 has the metering function: -B+A, resulting in the new transition 5.
  Self-Loop 1 has unbounded runtime, resulting in the new transition 6.
  Self-Loop 2 has unbounded runtime, resulting in the new transition 7.
  Self-Loop 3 has the metering function: B-A, resulting in the new transition 8.
  Removing the self-loops: 0 1 2 3.

Accelerated all simple loops using metering functions (where possible):
  Start location: start
      5: eval -> eval : B'=A, [ A>=1+B ], cost: -B+A
      6: eval -> eval : [ B>=1+A && A>=1+B ], cost: INF
      7: eval -> eval : [ A>=1+B && B>=A ], cost: INF
      8: eval -> eval : A'=B, [ B>=1+A ], cost: B-A
      4: start -> eval : [], cost: 1


Chained simpled loops:
  Start location: start
      9: start -> eval : B'=A, [ A>=1+B ], cost: 1-B+A
     10: start -> eval : A'=B, [ B>=1+A ], cost: 1+B-A


Final control flow graph problem, now checking costs for infinitely many models:
  Start location: start
      9: start -> eval : B'=A, [ A>=1+B ], cost: 1-B+A
     10: start -> eval : A'=B, [ B>=1+A ], cost: 1+B-A


Computing complexity for remaining 2 transitions.

Created initial limit problem:
-B+A (+/+!), 1-B+A (+) [not solved]

applying transformation rule (A), replacing -B+A (+/+!) by -B (-!) and A (+) using + limit vector (-!,+)
resulting limit problem:
1-B+A (+), A (+), -B (-!) [not solved]

applying transformation rule (C) using substitution {B==1}
resulting limit problem:
A (+), -1 (-!) [not solved]

applying transformation rule (B), deleting -1 (-!)
resulting limit problem:
A (+) [solved]

Solution:
B / 1
A / n
Found new complexity n^1, because: Solved the initial limit problem.


The final runtime is determined by this resulting transition:
  Final Guard: A>=1+B
  Final Cost:  n

Obtained the following complexity w.r.t. the length of the input n:
  Complexity class: n^1
  Complexity value: 1

WORST_CASE(Omega(n^1),?)
