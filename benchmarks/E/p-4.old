Trying to load file: p-4.koat

Initial Control flow graph problem:
  Start location: f3
      0: f1 -> f1 : B'=1+B, [ A>=1+B ], cost: 1
      2: f1 -> f1 : C'=1+C, [ B>=2+C && B>=A ], cost: 1
      1: f3 -> f1 : [ B>=1+C ], cost: 1

Eliminating 2 self-loops for location f1
  Self-Loop 0 has the metering function: A-B, resulting in the new transition 3.
  Self-Loop 2 has the metering function: -1-C+B, resulting in the new transition 4.
  Found this metering function when nesting loops: A-B,
  Removing the self-loops: 0 2.

Accelerated all simple loops using metering functions (where possible):
  Start location: f3
      3: f1 -> f1 : B'=A, [ A>=1+B ], cost: A-B
      4: f1 -> f1 : C'=-1+B, [ B>=2+C && B>=A ], cost: -1-C+B
      1: f3 -> f1 : [ B>=1+C ], cost: 1


Chained simpled loops:
  Start location: f3
      5: f3 -> f1 : B'=A, [ B>=1+C && A>=1+B ], cost: 1+A-B
      6: f3 -> f1 : C'=-1+B, [ B>=1+C && B>=2+C && B>=A ], cost: -C+B


Final control flow graph problem, now checking costs for infinitely many models:
  Start location: f3
      5: f3 -> f1 : B'=A, [ B>=1+C && A>=1+B ], cost: 1+A-B
      6: f3 -> f1 : C'=-1+B, [ B>=1+C && B>=2+C && B>=A ], cost: -C+B


Computing complexity for remaining 2 transitions.

Created initial limit problem:
-C+B (+/+!), A-B (+/+!), 1+A-B (+) [not solved]

applying transformation rule (C) using substitution {B==1+C}
resulting limit problem:
1 (+/+!), A-C (+), -1+A-C (+/+!) [not solved]

applying transformation rule (C) using substitution {A==1+B}
resulting limit problem:
1 (+/+!), 1-C+B (+), -C+B (+/+!) [not solved]

applying transformation rule (B), deleting 1 (+/+!)
resulting limit problem:
1-C+B (+), -C+B (+/+!) [not solved]

applying transformation rule (A), replacing 1-C+B (+) by 1 (+!) and -C+B (+) using + limit vector (+!,+)
resulting limit problem:
1 (+!), -C+B (+) [not solved]

applying transformation rule (B), deleting 1 (+!)
resulting limit problem:
-C+B (+) [not solved]

applying transformation rule (A), replacing -C+B (+) by -C (-!) and B (+) using + limit vector (-!,+)
resulting limit problem:
-C (-!), B (+) [not solved]

applying transformation rule (C) using substitution {C==1}
resulting limit problem:
-1 (-!), B (+) [not solved]

applying transformation rule (B), deleting -1 (-!)
resulting limit problem:
B (+) [solved]

Solution:
A / 1+n
C / 1
B / 2
Found new complexity n^1, because: Solved the initial limit problem.


The final runtime is determined by this resulting transition:
  Final Guard: B>=1+C && A>=1+B
  Final Cost:  n

Obtained the following complexity w.r.t. the length of the input n:
  Complexity class: n^1
  Complexity value: 1

WORST_CASE(Omega(n^1),?)
