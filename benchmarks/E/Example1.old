Trying to load file: Example1.koat

Initial Control flow graph problem:
  Start location: evalfstart
      0: evalfstart -> evalfentryin : [], cost: 1
      1: evalfentryin -> evalfbb6in : A'=0, [], cost: 1
      2: evalfbb6in -> evalfbbin : [ B>=1+A ], cost: 1
      3: evalfbb6in -> evalfreturnin : [ A>=B ], cost: 1
      4: evalfbbin -> evalfbb2in : C'=0, D'=1+A, [], cost: 1
     13: evalfreturnin -> evalfstop : [], cost: 1
      5: evalfbb2in -> evalfbb4in : [ D>=B ], cost: 1
      6: evalfbb2in -> evalfbb3in : [ B>=1+D ], cost: 1
     11: evalfbb4in -> evalfbb6in : A'=-1+D, [ C>=1 ], cost: 1
     12: evalfbb4in -> evalfbb6in : A'=D, [ 0>=C ], cost: 1
      9: evalfbb3in -> evalfbb4in : [], cost: 1
      7: evalfbb3in -> evalfbb1in : [ 0>=1+free ], cost: 1
      8: evalfbb3in -> evalfbb1in : [ free_1>=1 ], cost: 1
     10: evalfbb1in -> evalfbb2in : C'=1+C, D'=1+D, [], cost: 1

Removing duplicate transition: 7.

Simplified the transitions:
  Start location: evalfstart
      0: evalfstart -> evalfentryin : [], cost: 1
      1: evalfentryin -> evalfbb6in : A'=0, [], cost: 1
      2: evalfbb6in -> evalfbbin : [ B>=1+A ], cost: 1
      4: evalfbbin -> evalfbb2in : C'=0, D'=1+A, [], cost: 1
      5: evalfbb2in -> evalfbb4in : [ D>=B ], cost: 1
      6: evalfbb2in -> evalfbb3in : [ B>=1+D ], cost: 1
     11: evalfbb4in -> evalfbb6in : A'=-1+D, [ C>=1 ], cost: 1
     12: evalfbb4in -> evalfbb6in : A'=D, [ 0>=C ], cost: 1
      9: evalfbb3in -> evalfbb4in : [], cost: 1
      8: evalfbb3in -> evalfbb1in : [], cost: 1
     10: evalfbb1in -> evalfbb2in : C'=1+C, D'=1+D, [], cost: 1


Eliminated locations (linear):
  Start location: evalfstart
      0: evalfstart -> evalfbb6in : A'=0, [], cost: 2
      2: evalfbb6in -> evalfbb2in : C'=0, D'=1+A, [ B>=1+A ], cost: 2
      5: evalfbb2in -> evalfbb4in : [ D>=B ], cost: 1
      6: evalfbb2in -> evalfbb3in : [ B>=1+D ], cost: 1
     11: evalfbb4in -> evalfbb6in : A'=-1+D, [ C>=1 ], cost: 1
     12: evalfbb4in -> evalfbb6in : A'=D, [ 0>=C ], cost: 1
      8: evalfbb3in -> evalfbb2in : C'=1+C, D'=1+D, [], cost: 2
      9: evalfbb3in -> evalfbb4in : [], cost: 1


Eliminated locations (branches):
  Start location: evalfstart
      0: evalfstart -> evalfbb6in : A'=0, [], cost: 2
      2: evalfbb6in -> evalfbb2in : C'=0, D'=1+A, [ B>=1+A ], cost: 2
     14: evalfbb2in -> evalfbb2in : C'=1+C, D'=1+D, [ B>=1+D ], cost: 3
      5: evalfbb2in -> evalfbb4in : [ D>=B ], cost: 1
     15: evalfbb2in -> evalfbb4in : [ B>=1+D ], cost: 2
     11: evalfbb4in -> evalfbb6in : A'=-1+D, [ C>=1 ], cost: 1
     12: evalfbb4in -> evalfbb6in : A'=D, [ 0>=C ], cost: 1

Eliminating 1 self-loops for location evalfbb2in
  Self-Loop 14 has the metering function: -D+B, resulting in the new transition 16.
  Removing the self-loops: 14.

Accelerated all simple loops using metering functions (where possible):
  Start location: evalfstart
      0: evalfstart -> evalfbb6in : A'=0, [], cost: 2
      2: evalfbb6in -> evalfbb2in : C'=0, D'=1+A, [ B>=1+A ], cost: 2
     16: evalfbb2in -> evalfbb2in : C'=C-D+B, D'=B, [ B>=1+D ], cost: -3*D+3*B
      5: evalfbb2in -> evalfbb4in : [ D>=B ], cost: 1
     15: evalfbb2in -> evalfbb4in : [ B>=1+D ], cost: 2
     11: evalfbb4in -> evalfbb6in : A'=-1+D, [ C>=1 ], cost: 1
     12: evalfbb4in -> evalfbb6in : A'=D, [ 0>=C ], cost: 1


Chained simpled loops:
  Start location: evalfstart
      0: evalfstart -> evalfbb6in : A'=0, [], cost: 2
     17: evalfbb6in -> evalfbb2in : C'=-1-A+B, D'=B, [ B>=1+A && B>=2+A ], cost: -1-3*A+3*B
      5: evalfbb2in -> evalfbb4in : [ D>=B ], cost: 1
     15: evalfbb2in -> evalfbb4in : [ B>=1+D ], cost: 2
     11: evalfbb4in -> evalfbb6in : A'=-1+D, [ C>=1 ], cost: 1
     12: evalfbb4in -> evalfbb6in : A'=D, [ 0>=C ], cost: 1


Eliminated locations (branches):
  Start location: evalfstart
      0: evalfstart -> evalfbb6in : A'=0, [], cost: 2
     18: evalfbb6in -> evalfbb4in : C'=-1-A+B, D'=B, [ B>=1+A && B>=2+A && B>=B ], cost: -3*A+3*B
     19: evalfbb6in -> [10] : C'=-1-A+B, D'=B, [ B>=1+A && B>=2+A ], cost: -1-3*A+3*B
     11: evalfbb4in -> evalfbb6in : A'=-1+D, [ C>=1 ], cost: 1
     12: evalfbb4in -> evalfbb6in : A'=D, [ 0>=C ], cost: 1


Eliminated locations (branches):
  Start location: evalfstart
      0: evalfstart -> evalfbb6in : A'=0, [], cost: 2
     20: evalfbb6in -> evalfbb6in : A'=-1+B, C'=-1-A+B, D'=B, [ B>=1+A && B>=2+A && B>=B && -1-A+B>=1 ], cost: 1-3*A+3*B
     19: evalfbb6in -> [10] : C'=-1-A+B, D'=B, [ B>=1+A && B>=2+A ], cost: -1-3*A+3*B
     21: evalfbb6in -> [11] : C'=-1-A+B, D'=B, [ B>=1+A && B>=2+A && B>=B ], cost: -3*A+3*B

Eliminating 1 self-loops for location evalfbb6in
  Removing the self-loops: 20.

Accelerated all simple loops using metering functions (where possible):
  Start location: evalfstart
      0: evalfstart -> evalfbb6in : A'=0, [], cost: 2
     22: evalfbb6in -> evalfbb6in : A'=-1+B, C'=-1-A+B, D'=B, [ B>=2+A ], cost: 1-3*A+3*B
     19: evalfbb6in -> [10] : C'=-1-A+B, D'=B, [ B>=1+A && B>=2+A ], cost: -1-3*A+3*B
     21: evalfbb6in -> [11] : C'=-1-A+B, D'=B, [ B>=1+A && B>=2+A && B>=B ], cost: -3*A+3*B


Chained simpled loops:
  Start location: evalfstart
      0: evalfstart -> evalfbb6in : A'=0, [], cost: 2
     23: evalfstart -> evalfbb6in : A'=-1+B, C'=-1+B, D'=B, [ B>=2 ], cost: 3+3*B
     19: evalfbb6in -> [10] : C'=-1-A+B, D'=B, [ B>=1+A && B>=2+A ], cost: -1-3*A+3*B
     21: evalfbb6in -> [11] : C'=-1-A+B, D'=B, [ B>=1+A && B>=2+A && B>=B ], cost: -3*A+3*B


Eliminated locations (branches):
  Start location: evalfstart
     24: evalfstart -> [10] : A'=0, C'=-1+B, D'=B, [ B>=1 && B>=2 ], cost: 1+3*B
     25: evalfstart -> [11] : A'=0, C'=-1+B, D'=B, [ B>=1 && B>=2 && B>=B ], cost: 2+3*B
     26: evalfstart -> [12] : A'=-1+B, C'=-1+B, D'=B, [ B>=2 ], cost: 3+3*B
     27: evalfstart -> [13] : A'=-1+B, C'=-1+B, D'=B, [ B>=2 ], cost: 3+3*B

Removing duplicate transition: 26.

Final control flow graph problem, now checking costs for infinitely many models:
  Start location: evalfstart
     24: evalfstart -> [10] : A'=0, C'=-1+B, D'=B, [ B>=1 && B>=2 ], cost: 1+3*B
     25: evalfstart -> [11] : A'=0, C'=-1+B, D'=B, [ B>=1 && B>=2 && B>=B ], cost: 2+3*B
     27: evalfstart -> [13] : A'=-1+B, C'=-1+B, D'=B, [ B>=2 ], cost: 3+3*B


Computing complexity for remaining 3 transitions.

Created initial limit problem:
-1+B (+/+!), 1+3*B (+), B (+/+!) [not solved]

applying transformation rule (D), replacing -1+B (+/+!) by B (+)
resulting limit problem:
1+3*B (+), B (+) [not solved]

applying transformation rule (D), replacing 1+3*B (+) by 3*B (+)
resulting limit problem:
3*B (+), B (+) [not solved]

applying transformation rule (A), replacing 3*B (+) by B (+) and 3 (+!) using + limit vector (+,+!)
resulting limit problem:
3 (+!), B (+) [not solved]

applying transformation rule (B), deleting 3 (+!)
resulting limit problem:
B (+) [solved]

Solution:
B / n
Found new complexity n^1, because: Solved the initial limit problem.


The final runtime is determined by this resulting transition:
  Final Guard: B>=1 && B>=2
  Final Cost:  1+3*n

Obtained the following complexity w.r.t. the length of the input n:
  Complexity class: n^1
  Complexity value: 1

WORST_CASE(Omega(n^1),?)
