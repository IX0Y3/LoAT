Trying to load file: sas1.koat

Initial Control flow graph problem:
  Start location: f0
      0: f0 -> f4 : A'=0, [], cost: 1
      1: f4 -> f8 : A'=1+A, C'=0, [ B>=1+A ], cost: 1
      8: f4 -> f20 : [ A>=B ], cost: 1
      4: f8 -> f8 : A'=1+A, C'=1+C, D'=free, [ B>=1+A && 0>=1+free ], cost: 1
      5: f8 -> f8 : A'=1+A, C'=1+C, D'=free_1, [ B>=1+A && free_1>=1 ], cost: 1
      2: f8 -> f16 : D'=0, [ B>=1+A ], cost: 1
      3: f8 -> f16 : [ A>=B ], cost: 1
      6: f16 -> f4 : [ 0>=C ], cost: 1
      7: f16 -> f4 : A'=-1+A, [ C>=1 ], cost: 1


Simplified the transitions:
  Start location: f0
      0: f0 -> f4 : A'=0, [], cost: 1
      1: f4 -> f8 : A'=1+A, C'=0, [ B>=1+A ], cost: 1
      4: f8 -> f8 : A'=1+A, C'=1+C, D'=free, [ B>=1+A && 0>=1+free ], cost: 1
      5: f8 -> f8 : A'=1+A, C'=1+C, D'=free_1, [ B>=1+A && free_1>=1 ], cost: 1
      2: f8 -> f16 : D'=0, [ B>=1+A ], cost: 1
      3: f8 -> f16 : [ A>=B ], cost: 1
      6: f16 -> f4 : [ 0>=C ], cost: 1
      7: f16 -> f4 : A'=-1+A, [ C>=1 ], cost: 1

Eliminating 2 self-loops for location f8
  Self-Loop 4 has the metering function: -A+B, resulting in the new transition 9.
  Self-Loop 5 has the metering function: -A+B, resulting in the new transition 10.
  Removing the self-loops: 4 5.

Accelerated all simple loops using metering functions (where possible):
  Start location: f0
      0: f0 -> f4 : A'=0, [], cost: 1
      1: f4 -> f8 : A'=1+A, C'=0, [ B>=1+A ], cost: 1
      9: f8 -> f8 : A'=B, C'=-A+C+B, D'=free, [ B>=1+A && 0>=1+free ], cost: -A+B
     10: f8 -> f8 : A'=B, C'=-A+C+B, D'=free_1, [ B>=1+A && free_1>=1 ], cost: -A+B
      2: f8 -> f16 : D'=0, [ B>=1+A ], cost: 1
      3: f8 -> f16 : [ A>=B ], cost: 1
      6: f16 -> f4 : [ 0>=C ], cost: 1
      7: f16 -> f4 : A'=-1+A, [ C>=1 ], cost: 1


Chained simpled loops:
  Start location: f0
      0: f0 -> f4 : A'=0, [], cost: 1
     11: f4 -> f8 : A'=B, C'=-1-A+B, D'=free, [ B>=1+A && B>=2+A && 0>=1+free ], cost: -A+B
     12: f4 -> f8 : A'=B, C'=-1-A+B, D'=free_1, [ B>=1+A && B>=2+A && free_1>=1 ], cost: -A+B
      2: f8 -> f16 : D'=0, [ B>=1+A ], cost: 1
      3: f8 -> f16 : [ A>=B ], cost: 1
      6: f16 -> f4 : [ 0>=C ], cost: 1
      7: f16 -> f4 : A'=-1+A, [ C>=1 ], cost: 1


Eliminated locations (branches):
  Start location: f0
      0: f0 -> f4 : A'=0, [], cost: 1
     14: f4 -> f16 : A'=B, C'=-1-A+B, D'=free, [ B>=1+A && B>=2+A && 0>=1+free && B>=B ], cost: 1-A+B
     16: f4 -> f16 : A'=B, C'=-1-A+B, D'=free_1, [ B>=1+A && B>=2+A && free_1>=1 && B>=B ], cost: 1-A+B
     13: f4 -> [5] : A'=B, C'=-1-A+B, D'=free, [ B>=1+A && B>=2+A && 0>=1+free ], cost: -A+B
     15: f4 -> [6] : A'=B, C'=-1-A+B, D'=free_1, [ B>=1+A && B>=2+A && free_1>=1 ], cost: -A+B
      6: f16 -> f4 : [ 0>=C ], cost: 1
      7: f16 -> f4 : A'=-1+A, [ C>=1 ], cost: 1


Eliminated locations (branches):
  Start location: f0
      0: f0 -> f4 : A'=0, [], cost: 1
     18: f4 -> f4 : A'=-1+B, C'=-1-A+B, D'=free, [ B>=1+A && B>=2+A && 0>=1+free && B>=B && -1-A+B>=1 ], cost: 2-A+B
     20: f4 -> f4 : A'=-1+B, C'=-1-A+B, D'=free_1, [ B>=1+A && B>=2+A && free_1>=1 && B>=B && -1-A+B>=1 ], cost: 2-A+B
     13: f4 -> [5] : A'=B, C'=-1-A+B, D'=free, [ B>=1+A && B>=2+A && 0>=1+free ], cost: -A+B
     15: f4 -> [6] : A'=B, C'=-1-A+B, D'=free_1, [ B>=1+A && B>=2+A && free_1>=1 ], cost: -A+B
     17: f4 -> [7] : A'=B, C'=-1-A+B, D'=free, [ B>=1+A && B>=2+A && 0>=1+free && B>=B ], cost: 1-A+B
     19: f4 -> [8] : A'=B, C'=-1-A+B, D'=free_1, [ B>=1+A && B>=2+A && free_1>=1 && B>=B ], cost: 1-A+B

Eliminating 2 self-loops for location f4
  Removing the self-loops: 18 20.

Accelerated all simple loops using metering functions (where possible):
  Start location: f0
      0: f0 -> f4 : A'=0, [], cost: 1
     21: f4 -> f4 : A'=-1+B, C'=-1-A+B, D'=free, [ B>=2+A && 0>=1+free ], cost: 2-A+B
     22: f4 -> f4 : A'=-1+B, C'=-1-A+B, D'=free_1, [ B>=2+A && free_1>=1 ], cost: 2-A+B
     13: f4 -> [5] : A'=B, C'=-1-A+B, D'=free, [ B>=1+A && B>=2+A && 0>=1+free ], cost: -A+B
     15: f4 -> [6] : A'=B, C'=-1-A+B, D'=free_1, [ B>=1+A && B>=2+A && free_1>=1 ], cost: -A+B
     17: f4 -> [7] : A'=B, C'=-1-A+B, D'=free, [ B>=1+A && B>=2+A && 0>=1+free && B>=B ], cost: 1-A+B
     19: f4 -> [8] : A'=B, C'=-1-A+B, D'=free_1, [ B>=1+A && B>=2+A && free_1>=1 && B>=B ], cost: 1-A+B


Chained simpled loops:
  Start location: f0
      0: f0 -> f4 : A'=0, [], cost: 1
     23: f0 -> f4 : A'=-1+B, C'=-1+B, D'=free, [ B>=2 && 0>=1+free ], cost: 3+B
     24: f0 -> f4 : A'=-1+B, C'=-1+B, D'=free_1, [ B>=2 && free_1>=1 ], cost: 3+B
     13: f4 -> [5] : A'=B, C'=-1-A+B, D'=free, [ B>=1+A && B>=2+A && 0>=1+free ], cost: -A+B
     15: f4 -> [6] : A'=B, C'=-1-A+B, D'=free_1, [ B>=1+A && B>=2+A && free_1>=1 ], cost: -A+B
     17: f4 -> [7] : A'=B, C'=-1-A+B, D'=free, [ B>=1+A && B>=2+A && 0>=1+free && B>=B ], cost: 1-A+B
     19: f4 -> [8] : A'=B, C'=-1-A+B, D'=free_1, [ B>=1+A && B>=2+A && free_1>=1 && B>=B ], cost: 1-A+B


Eliminated locations (branches):
  Start location: f0
     25: f0 -> [5] : A'=B, C'=-1+B, D'=free, [ B>=1 && B>=2 && 0>=1+free ], cost: 1+B
     26: f0 -> [6] : A'=B, C'=-1+B, D'=free_1, [ B>=1 && B>=2 && free_1>=1 ], cost: 1+B
     27: f0 -> [7] : A'=B, C'=-1+B, D'=free, [ B>=1 && B>=2 && 0>=1+free && B>=B ], cost: 2+B
     28: f0 -> [8] : A'=B, C'=-1+B, D'=free_1, [ B>=1 && B>=2 && free_1>=1 && B>=B ], cost: 2+B
     29: f0 -> [9] : A'=-1+B, C'=-1+B, D'=free, [ B>=2 && 0>=1+free ], cost: 3+B
     30: f0 -> [10] : A'=-1+B, C'=-1+B, D'=free, [ B>=2 && 0>=1+free ], cost: 3+B
     31: f0 -> [11] : A'=-1+B, C'=-1+B, D'=free, [ B>=2 && 0>=1+free ], cost: 3+B
     32: f0 -> [12] : A'=-1+B, C'=-1+B, D'=free, [ B>=2 && 0>=1+free ], cost: 3+B
     33: f0 -> [13] : A'=-1+B, C'=-1+B, D'=free_1, [ B>=2 && free_1>=1 ], cost: 3+B
     34: f0 -> [14] : A'=-1+B, C'=-1+B, D'=free_1, [ B>=2 && free_1>=1 ], cost: 3+B
     35: f0 -> [15] : A'=-1+B, C'=-1+B, D'=free_1, [ B>=2 && free_1>=1 ], cost: 3+B
     36: f0 -> [16] : A'=-1+B, C'=-1+B, D'=free_1, [ B>=2 && free_1>=1 ], cost: 3+B

Removing duplicate transition: 29.
Removing duplicate transition: 30.
Removing duplicate transition: 31.
Removing duplicate transition: 33.
Removing duplicate transition: 34.
Removing duplicate transition: 35.

Final control flow graph problem, now checking costs for infinitely many models:
  Start location: f0
     25: f0 -> [5] : A'=B, C'=-1+B, D'=free, [ B>=1 && B>=2 && 0>=1+free ], cost: 1+B
     26: f0 -> [6] : A'=B, C'=-1+B, D'=free_1, [ B>=1 && B>=2 && free_1>=1 ], cost: 1+B
     27: f0 -> [7] : A'=B, C'=-1+B, D'=free, [ B>=1 && B>=2 && 0>=1+free && B>=B ], cost: 2+B
     28: f0 -> [8] : A'=B, C'=-1+B, D'=free_1, [ B>=1 && B>=2 && free_1>=1 && B>=B ], cost: 2+B
     32: f0 -> [12] : A'=-1+B, C'=-1+B, D'=free, [ B>=2 && 0>=1+free ], cost: 3+B
     36: f0 -> [16] : A'=-1+B, C'=-1+B, D'=free_1, [ B>=2 && free_1>=1 ], cost: 3+B


Computing complexity for remaining 6 transitions.

Created initial limit problem:
-free (+/+!), 1+B (+), -1+B (+/+!), B (+/+!) [not solved]

applying transformation rule (D), replacing 1+B (+) by B (+)
resulting limit problem:
-free (+/+!), -1+B (+/+!), B (+) [not solved]

applying transformation rule (D), replacing -1+B (+/+!) by B (+)
resulting limit problem:
-free (+/+!), B (+) [not solved]

applying transformation rule (C) using substitution {free==-1}
resulting limit problem:
1 (+/+!), B (+) [not solved]

applying transformation rule (B), deleting 1 (+/+!)
resulting limit problem:
B (+) [solved]

Solution:
free / -1
B / n
Found new complexity n^1, because: Solved the initial limit problem.


The final runtime is determined by this resulting transition:
  Final Guard: B>=1 && B>=2 && 0>=1+free
  Final Cost:  1+n

Obtained the following complexity w.r.t. the length of the input n:
  Complexity class: n^1
  Complexity value: 1

WORST_CASE(Omega(n^1),?)
