(set-logic HORN)
(set-info :source |
    Benchmark: C_VC
    Output by Princess (http://www.philipp.ruemmer.org/princess.shtml)
|)
(set-info :status unknown)
(declare-heap Heap Addr HeapObject
 defObj
 ((HeapObject 0) (S 0)) (
  (
   (O_Int (getInt Int))
   (O_Addr (getAddr Addr))
   (O_S (getS S))
   (defObj)
  )
  (
   (S (x Int))
  )
))
(declare-fun inv_main10 (Heap Addr) Bool)
(declare-fun inv_main11 (Heap Addr) Bool)
(declare-fun inv_main13 (Heap Addr) Bool)
(declare-fun inv_main14 (Heap Addr) Bool)
(declare-fun inv_main16 (Heap Addr) Bool)
(declare-fun inv_main17 (Heap Addr) Bool)
(declare-fun inv_main19 (Heap Addr) Bool)
(declare-fun inv_main2 (Heap Addr) Bool)
(declare-fun inv_main20 (Heap Addr) Bool)
(declare-fun inv_main21 (Heap Addr Int) Bool)
(declare-fun inv_main3 (Heap Addr) Bool)
(declare-fun inv_main5 (Heap Addr) Bool)
(declare-fun inv_main7 (Heap Addr) Bool)
(declare-fun inv_main8 (Heap Addr) Bool)
(assert (forall ((var0 Addr)) (inv_main2 (as emptyHeap Heap) var0)))
(assert (forall ((var0 Int) (var1 Heap) (var2 Addr) (var3 Int) (var4 Heap) (var5 Int) (var6 Addr)) (or (not (and (inv_main21 var1 var6 var0) (and (and (and (= var4 var1) (= var2 var6)) (= var3 var0)) (= var5 (x (getS (read var1 var6))))))) (inv_main20 (write var4 var2 (O_S (S (+ var3 (* (- 1) var5))))) var2))))
(assert (forall ((var0 Heap) (var1 Addr) (var2 Int) (var3 Heap) (var4 Addr) (var5 Int) (var6 Int)) (or (not (and (inv_main16 var0 var4) (and (and (= var3 var0) (= var1 var4)) (= var2 (x (getS (read var0 var4))))))) (or (not (and (and (and (and (<= 0 (+ (+ 3 (* (- 1) var5)) (- 1))) (<= 0 (+ (+ 3 (* 1 var5)) (- 1)))) (or (not (<= 0 (+ var5 (- 1)))) (<= 0 (+ var2 (- 1))))) (or (not (<= 0 (+ (* (- 1) var5) (- 1)))) (<= 0 (+ (* (- 1) var2) (- 1))))) (= var2 (+ (* 3 var6) var5)))) (inv_main17 (write var3 var1 (O_S (S var5))) var1)))))
(assert (forall ((var0 Heap) (var1 Addr)) (or (not (inv_main11 var0 var1)) (inv_main13 var0 var1))))
(assert (forall ((var0 Heap) (var1 Addr)) (or (not (inv_main14 var0 var1)) (inv_main16 var0 var1))))
(assert (forall ((var0 Heap) (var1 Heap) (var2 Addr) (var3 Int) (var4 Addr) (var5 Int)) (or (not (and (inv_main10 var0 var2) (and (and (= var1 var0) (= var4 var2)) (= var3 (x (getS (read var0 var2))))))) (or (not (and (and (and (<= 0 (+ (+ 4 (* (- 1) (+ var3 (* (- 4) var5)))) (- 1))) (<= 0 (+ (+ 4 (* 1 (+ var3 (* (- 4) var5)))) (- 1)))) (or (not (<= 0 (+ (+ var3 (* (- 4) var5)) (- 1)))) (<= 0 (+ var3 (- 1))))) (or (not (<= 0 (+ (* (- 1) (+ var3 (* (- 4) var5))) (- 1)))) (<= 0 (+ (* (- 1) var3) (- 1)))))) (inv_main11 (write var1 var4 (O_S (S var5))) var4)))))
(assert (forall ((var0 Heap) (var1 Addr)) (or (not (inv_main19 var0 var1)) (inv_main21 var0 var1 (x (getS (read var0 var1)))))))
(assert (forall ((var0 Heap) (var1 Addr)) (or (not (inv_main17 var0 var1)) (inv_main19 var0 var1))))
(assert (forall ((var0 Heap) (var1 Addr) (var2 Addr) (var3 Heap) (var4 Addr)) (or (not (and (inv_main2 var0 var4) (and (and (= var3 (newHeap (alloc var0 (O_S (S 0))))) (= var1 var4)) (= var2 (newAddr (alloc var0 (O_S (S 0)))))))) (inv_main3 var3 var2))))
(assert (forall ((var0 Heap) (var1 Int) (var2 Addr) (var3 Addr) (var4 Heap)) (or (not (and (inv_main3 var0 var3) (and (and (= var4 var0) (= var2 var3)) (= var1 (x (getS (read var0 var3))))))) (inv_main5 (write var4 var2 (O_S (S (+ var1 42)))) var2))))
(assert (forall ((var0 Heap) (var1 Addr)) (or (not (inv_main8 var0 var1)) (inv_main10 var0 var1))))
(assert (forall ((var0 Heap) (var1 Addr) (var2 Addr) (var3 Int) (var4 Heap)) (or (not (and (inv_main7 var0 var2) (and (and (= var4 var0) (= var1 var2)) (= var3 (x (getS (read var0 var2))))))) (inv_main8 (write var4 var1 (O_S (S (* 2 var3)))) var1))))
(assert (forall ((var0 Heap) (var1 Addr) (var2 Heap) (var3 Int) (var4 Addr)) (or (not (and (inv_main13 var0 var4) (and (and (= var2 var0) (= var1 var4)) (= var3 (x (getS (read var0 var4))))))) (inv_main14 (write var2 var1 (O_S (S (+ var3 (- 1))))) var1))))
(assert (forall ((var0 Heap) (var1 Addr)) (or (not (inv_main5 var0 var1)) (inv_main7 var0 var1))))
(assert (forall ((var0 Heap) (var1 Addr)) (not (and (inv_main3 var0 var1) (not (is-O_S (read var0 var1)))))))
(assert (forall ((var0 Heap) (var1 Addr)) (not (and (inv_main5 var0 var1) (not (is-O_S (read var0 var1)))))))
(assert (forall ((var0 Heap) (var1 Addr)) (not (and (inv_main5 var0 var1) (not (= (x (getS (read var0 var1))) 42))))))
(assert (forall ((var0 Heap) (var1 Addr)) (not (and (inv_main7 var0 var1) (not (is-O_S (read var0 var1)))))))
(assert (forall ((var0 Heap) (var1 Addr)) (not (and (inv_main8 var0 var1) (not (is-O_S (read var0 var1)))))))
(assert (forall ((var0 Heap) (var1 Addr)) (not (and (inv_main8 var0 var1) (not (= (x (getS (read var0 var1))) 84))))))
(assert (forall ((var0 Heap) (var1 Addr)) (not (and (inv_main10 var0 var1) (not (is-O_S (read var0 var1)))))))
(assert (forall ((var0 Heap) (var1 Addr)) (not (and (inv_main11 var0 var1) (not (is-O_S (read var0 var1)))))))
(assert (forall ((var0 Heap) (var1 Addr)) (not (and (inv_main11 var0 var1) (not (= (x (getS (read var0 var1))) 21))))))
(assert (forall ((var0 Heap) (var1 Addr)) (not (and (inv_main13 var0 var1) (not (is-O_S (read var0 var1)))))))
(assert (forall ((var0 Heap) (var1 Addr)) (not (and (inv_main14 var0 var1) (not (is-O_S (read var0 var1)))))))
(assert (forall ((var0 Heap) (var1 Addr)) (not (and (inv_main14 var0 var1) (not (= (x (getS (read var0 var1))) 20))))))
(assert (forall ((var0 Heap) (var1 Addr)) (not (and (inv_main16 var0 var1) (not (is-O_S (read var0 var1)))))))
(assert (forall ((var0 Heap) (var1 Addr)) (not (and (inv_main17 var0 var1) (not (is-O_S (read var0 var1)))))))
(assert (forall ((var0 Heap) (var1 Addr)) (not (and (inv_main17 var0 var1) (not (= (x (getS (read var0 var1))) 2))))))
(assert (forall ((var0 Heap) (var1 Addr)) (not (and (inv_main19 var0 var1) (not (is-O_S (read var0 var1)))))))
(assert (forall ((var0 Int) (var1 Heap) (var2 Addr)) (not (and (inv_main21 var1 var2 var0) (not (is-O_S (read var1 var2)))))))
(assert (forall ((var0 Heap) (var1 Addr)) (not (and (inv_main20 var0 var1) (not (is-O_S (read var0 var1)))))))
(assert (forall ((var0 Heap) (var1 Addr)) (not (and (inv_main20 var0 var1) (not (= (x (getS (read var0 var1))) 0))))))
(check-sat)
